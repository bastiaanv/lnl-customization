diff --git a/.gitmodules b/.gitmodules
index 1308e60..b5a534c 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -58,3 +58,6 @@
 [submodule "LibreTransmitter"]
 	path = LibreTransmitter
 	url = https://github.com/LoopKit/LibreTransmitter.git
+[submodule "DanaKit"]
+	path = DanaKit
+	url = https://github.com/bastiaanv/DanaKit
Submodule DanaKit 0000000...f69c26c (new submodule)
diff --git a/DanaKit/.gitignore b/DanaKit/.gitignore
new file mode 100644
index 0000000..72baa45
--- /dev/null
+++ b/DanaKit/.gitignore
@@ -0,0 +1,91 @@
+# Xcode
+#
+# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore
+.DS_Store
+
+## User settings
+xcuserdata/
+
+## compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)
+*.xcscmblueprint
+*.xccheckout
+
+## compatibility with Xcode 3 and earlier (ignoring not required starting Xcode 4)
+build/
+DerivedData/
+*.moved-aside
+*.pbxuser
+!default.pbxuser
+*.mode1v3
+!default.mode1v3
+*.mode2v3
+!default.mode2v3
+*.perspectivev3
+!default.perspectivev3
+
+## Obj-C/Swift specific
+*.hmap
+
+## App packaging
+*.ipa
+*.dSYM.zip
+*.dSYM
+
+## Playgrounds
+timeline.xctimeline
+playground.xcworkspace
+
+# Swift Package Manager
+#
+# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
+# Packages/
+# Package.pins
+# Package.resolved
+# *.xcodeproj
+#
+# Xcode automatically generates this directory with a .xcworkspacedata file and xcuserdata
+# hence it is not needed unless you have added a package configuration file to your project
+# .swiftpm
+
+.build/
+
+# CocoaPods
+#
+# We recommend against adding the Pods directory to your .gitignore. However
+# you should judge for yourself, the pros and cons are mentioned at:
+# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
+#
+# Pods/
+#
+# Add this line if you want to avoid checking in source code from the Xcode workspace
+# *.xcworkspace
+
+# Carthage
+#
+# Add this line if you want to avoid checking in source code from Carthage dependencies.
+# Carthage/Checkouts
+
+Carthage/Build/
+
+# Accio dependency management
+Dependencies/
+.accio/
+
+# fastlane
+#
+# It is recommended to not store the screenshots in the git repo.
+# Instead, use fastlane to re-generate the screenshots whenever they are needed.
+# For more information about the recommended setup visit:
+# https://docs.fastlane.tools/best-practices/source-control/#source-control
+
+fastlane/report.xml
+fastlane/Preview.html
+fastlane/screenshots/**/*.png
+fastlane/test_output
+
+# Code Injection
+#
+# After new code Injection tools there's a generated folder /iOSInjectionProject
+# https://github.com/johnno1962/injectionforxcode
+
+iOSInjectionProject/
diff --git a/DanaKit/Common/BackgroundTask.swift b/DanaKit/Common/BackgroundTask.swift
new file mode 100644
index 0000000..ffdeec8
--- /dev/null
+++ b/DanaKit/Common/BackgroundTask.swift
@@ -0,0 +1,55 @@
+//
+//  BackgroundTask.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 19/02/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import AVFoundation
+
+
+/// A trick used to keep the app alive
+class BackgroundTask {
+    
+    // MARK: - Vars
+    var player = AVAudioPlayer()
+    var timer = Timer()
+    
+    // MARK: - Methods
+    func startBackgroundTask() {
+        NotificationCenter.default.addObserver(self, selector: #selector(interruptedAudio), name: AVAudioSession.interruptionNotification, object: AVAudioSession.sharedInstance())
+        self.playAudio()
+    }
+    
+    func stopBackgroundTask() {
+        NotificationCenter.default.removeObserver(self, name: AVAudioSession.interruptionNotification, object: nil)
+        player.stop()
+    }
+    
+    @objc fileprivate func interruptedAudio(_ notification: Notification) {
+        if notification.name == AVAudioSession.interruptionNotification && notification.userInfo != nil {
+            let info = notification.userInfo!
+            var intValue = 0
+            (info[AVAudioSessionInterruptionTypeKey]! as AnyObject).getValue(&intValue)
+            if intValue == 1 { playAudio() }
+        }
+    }
+    
+    fileprivate func playAudio() {
+        do {
+            let bundle = Bundle(for: DanaKitHUDProvider.self).path(forResource: "blank", ofType: "wav")
+            let alertSound = URL(fileURLWithPath: bundle!)
+           // try AVAudioSession.sharedInstance().setCategory(AVAudioSession.Category.playback)
+            try AVAudioSession.sharedInstance().setCategory(.playback, mode: .default, options: .mixWithOthers)
+            try AVAudioSession.sharedInstance().setActive(true)
+            try self.player = AVAudioPlayer(contentsOf: alertSound)
+            // Play audio forever by setting num of loops to -1
+            self.player.numberOfLoops = -1
+            self.player.volume = 0.01
+            self.player.prepareToPlay()
+            self.player.play()
+        } catch { print(error)
+        }
+    }
+}
diff --git a/DanaKit/Common/Bundle.swift b/DanaKit/Common/Bundle.swift
new file mode 100644
index 0000000..1c297e7
--- /dev/null
+++ b/DanaKit/Common/Bundle.swift
@@ -0,0 +1,15 @@
+//
+//  Bundle.swift
+//  DanaKit
+//
+//  Created by Darin Krauss on 1/23/21.
+//  Copyright © 2021 LoopKit Authors. All rights reserved.
+//
+
+import Foundation
+
+extension Bundle {
+    var bundleDisplayName: String {
+        return object(forInfoDictionaryKey: "CFBundleDisplayName") as! String
+    }
+}
diff --git a/DanaKit/Common/Data.swift b/DanaKit/Common/Data.swift
new file mode 100644
index 0000000..bb86ac8
--- /dev/null
+++ b/DanaKit/Common/Data.swift
@@ -0,0 +1,76 @@
+//
+//  Data.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+extension Data {
+    init?(hexString: String) {
+      let len = hexString.count / 2
+      var data = Data(capacity: len)
+      var i = hexString.startIndex
+      for _ in 0..<len {
+        let j = hexString.index(i, offsetBy: 2)
+        let bytes = hexString[i..<j]
+        if var num = UInt8(bytes, radix: 16) {
+          data.append(&num, count: 1)
+        } else {
+          return nil
+        }
+        i = j
+      }
+      self = data
+    }
+    
+    func uint16(at index: Int) -> UInt16 {
+        var value: UInt16 = 0
+        (self as NSData).getBytes(&value, range: NSRange(location: index, length: MemoryLayout<UInt16>.size))
+        return UInt16(littleEndian: value)
+    }
+    
+    mutating func addDate(at index: Int, date: Date, utc: Bool = true) {
+        var date = date
+        var calendar = Calendar(identifier: .gregorian)
+        calendar.timeZone = TimeZone(identifier: "UTC")!
+        
+        if !utc {
+            let delta = TimeInterval(TimeZone.current.secondsFromGMT(for: date) - TimeZone(identifier: "UTC")!.secondsFromGMT(for: date))
+            date = date.addingTimeInterval(delta)
+        }
+        
+        self[index] = UInt8((calendar.component(.year, from: date) - 2000) & 0xff)
+        self[index + 1] = UInt8(calendar.component(.month, from: date) & 0xff)
+        self[index + 2] = UInt8(calendar.component(.day, from: date) & 0xff)
+        self[index + 3] = UInt8(calendar.component(.hour, from: date) & 0xff)
+        self[index + 4] = UInt8(calendar.component(.minute, from: date) & 0xff)
+        self[index + 5] = UInt8(calendar.component(.second, from: date) & 0xff)
+    }
+    
+    func date(at index: Int, _ usingUtc: Bool) -> Date {
+        let year = 2000 + Int(self[index])
+        let month = Int(self[index + 1])
+        let day = Int(self[index + 2])
+        let hour = Int(self[index + 3])
+        let min = Int(self[index + 4])
+        let sec = Int(self[index + 5])
+
+        var components = DateComponents()
+        components.year = year
+        components.month = month
+        components.day = day
+        components.hour = hour
+        components.minute = min
+        components.second = sec
+
+        var calendar = Calendar.current
+        if usingUtc {
+            calendar.timeZone = TimeZone(identifier: "UTC")!
+        } else {
+            calendar.timeZone = TimeZone.current
+        }
+        
+        return calendar.date(from: components)!
+    }
+}
diff --git a/DanaKit/Common/DoseEntry.swift b/DanaKit/Common/DoseEntry.swift
new file mode 100644
index 0000000..b7afa93
--- /dev/null
+++ b/DanaKit/Common/DoseEntry.swift
@@ -0,0 +1,62 @@
+//
+//  DoseEntry.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 21/01/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import Foundation
+import LoopKit
+
+extension DoseEntry {
+    public static func bolus(units: Double, deliveredUnits: Double, duration: TimeInterval, activationType: BolusActivationType, insulinType: InsulinType, startDate: Date = Date.now) -> DoseEntry {
+        var endTime = Date.now
+        endTime.addTimeInterval(duration)
+        
+        return DoseEntry(
+            type: .bolus,
+            startDate: startDate,
+            endDate: endTime,
+            value: units,
+            unit: .units,
+            deliveredUnits: deliveredUnits,
+            insulinType: insulinType,
+            automatic: activationType.isAutomatic,
+            manuallyEntered: activationType == .manualNoRecommendation,
+            isMutable: false
+        )
+    }
+    
+    public static func tempBasal(absoluteUnit: Double, duration: TimeInterval, insulinType: InsulinType, startDate: Date = Date.now) -> DoseEntry {
+        return DoseEntry(
+            type: .tempBasal,
+            startDate: startDate,
+            endDate: startDate + duration,
+            value: absoluteUnit,
+            unit: .unitsPerHour,
+            insulinType: insulinType
+        )
+    }
+    
+    public static func basal(rate: Double, insulinType: InsulinType, startDate: Date = Date.now) -> DoseEntry {
+        return DoseEntry(
+            type: .basal,
+            startDate: startDate,
+            value: rate,
+            unit: .unitsPerHour,
+            insulinType: insulinType
+        )
+    }
+    
+    public static func resume(insulinType: InsulinType, resumeDate: Date = Date.now) -> DoseEntry {
+        return DoseEntry(
+            resumeDate: resumeDate,
+            insulinType: insulinType
+        )
+    }
+    
+    public static func suspend(suspendDate: Date = Date.now) -> DoseEntry {
+        return DoseEntry(suspendDate: suspendDate)
+    }
+}
diff --git a/DanaKit/Common/IdentifiableClass.swift b/DanaKit/Common/IdentifiableClass.swift
new file mode 100644
index 0000000..6e38d00
--- /dev/null
+++ b/DanaKit/Common/IdentifiableClass.swift
@@ -0,0 +1,21 @@
+//
+//  IdentifiableClass.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 18/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import Foundation
+
+
+protocol IdentifiableClass: AnyObject {
+    static var className: String { get }
+}
+
+
+extension IdentifiableClass {
+    static var className: String {
+        return NSStringFromClass(self).components(separatedBy: ".").last!
+    }
+}
diff --git a/DanaKit/Common/LocalizedString.swift b/DanaKit/Common/LocalizedString.swift
new file mode 100644
index 0000000..c9a01bc
--- /dev/null
+++ b/DanaKit/Common/LocalizedString.swift
@@ -0,0 +1,21 @@
+//
+//  LocalizedString.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 05/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import Foundation
+
+private class FrameworkBundle {
+    static let main = Bundle(for: FrameworkBundle.self)
+}
+
+func LocalizedString(_ key: String, tableName: String? = nil, value: String? = nil, comment: String) -> String {
+    if let value = value {
+        return NSLocalizedString(key, tableName: tableName, bundle: FrameworkBundle.main, value: value, comment: comment)
+    } else {
+        return NSLocalizedString(key, tableName: tableName, bundle: FrameworkBundle.main, comment: comment)
+    }
+}
diff --git a/DanaKit/Common/NavigationLink.swift b/DanaKit/Common/NavigationLink.swift
new file mode 100644
index 0000000..d7292cb
--- /dev/null
+++ b/DanaKit/Common/NavigationLink.swift
@@ -0,0 +1,18 @@
+//
+//  NavigationLink.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 01/01/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+
+extension NavigationLink where Label == EmptyView, Destination == EmptyView {
+
+   /// Useful in cases where a `NavigationLink` is needed but there should not be
+   /// a destination. e.g. for programmatic navigation.
+   static var empty: NavigationLink {
+       self.init(destination: EmptyView(), label: { EmptyView() })
+   }
+}
diff --git a/DanaKit/Common/NewPumpEvent.swift b/DanaKit/Common/NewPumpEvent.swift
new file mode 100644
index 0000000..56a32ed
--- /dev/null
+++ b/DanaKit/Common/NewPumpEvent.swift
@@ -0,0 +1,62 @@
+//
+//  NewPumpEvent.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 21/01/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import Foundation
+import LoopKit
+
+extension NewPumpEvent {
+    public static func bolus(dose: DoseEntry, units: Double, date: Date = Date.now) -> NewPumpEvent {
+        let dateFormatter = ISO8601DateFormatter()
+        return NewPumpEvent(
+            date: date,
+            dose: dose,
+            raw: "\(DoseType.bolus.rawValue) \(units) \(dateFormatter.string(from: date))".data(using: .utf8) ?? Data([]),
+            title: LocalizedString("Bolus", comment: "Pump Event title for UnfinalizedDose with doseType of .bolus")
+        )
+    }
+    
+    public static func tempBasal(dose: DoseEntry, units: Double, duration: TimeInterval, date: Date = Date.now) -> NewPumpEvent {
+        let dateFormatter = ISO8601DateFormatter()
+        return NewPumpEvent(
+            date: date,
+            dose: dose,
+            raw: "\(DoseType.tempBasal.rawValue) \(units) \(duration) \(dateFormatter.string(from: date))".data(using: .utf8) ?? Data([]),
+            title: LocalizedString("Temp Basal", comment: "Pump Event title for UnfinalizedDose with doseType of .tempBasal")
+        )
+    }
+    
+    public static func basal(dose: DoseEntry, date: Date = Date.now) -> NewPumpEvent {
+        let dateFormatter = ISO8601DateFormatter()
+        return NewPumpEvent(
+            date: date,
+            dose: dose,
+            raw: "\(DoseType.basal.rawValue) \(dateFormatter.string(from: date))".data(using: .utf8) ?? Data([]),
+            title: LocalizedString("Basal", comment: "Pump Event title for UnfinalizedDose with doseType of .basal")
+        )
+    }
+    
+    public static func resume(dose: DoseEntry, date: Date = Date.now) -> NewPumpEvent {
+        let dateFormatter = ISO8601DateFormatter()
+        return NewPumpEvent(
+            date: date,
+            dose: dose,
+            raw: "\(DoseType.resume.rawValue) \(dateFormatter.string(from: date))".data(using: .utf8) ?? Data([]),
+            title: LocalizedString("Resume", comment: "Pump Event title for UnfinalizedDose with doseType of .resume")
+        )
+    }
+    
+    public static func suspend(dose: DoseEntry, date: Date = Date.now) -> NewPumpEvent {
+        let dateFormatter = ISO8601DateFormatter()
+        return NewPumpEvent(
+            date: date,
+            dose: dose,
+            raw: "\(DoseType.suspend.rawValue) \(dateFormatter.string(from: date))".data(using: .utf8) ?? Data([]),
+            title: LocalizedString("Suspend", comment: "Pump Event title for UnfinalizedDose with doseType of .suspend")
+        )
+    }
+}
diff --git a/DanaKit/Common/NibLoadable.swift b/DanaKit/Common/NibLoadable.swift
new file mode 100644
index 0000000..ff1e099
--- /dev/null
+++ b/DanaKit/Common/NibLoadable.swift
@@ -0,0 +1,21 @@
+//
+//  NibLoadable.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 18/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import UIKit
+
+
+protocol NibLoadable: IdentifiableClass {
+    static func nib() -> UINib
+}
+
+
+extension NibLoadable {
+    static func nib() -> UINib {
+        return UINib(nibName: className, bundle: Bundle(for: self))
+    }
+}
diff --git a/DanaKit/Common/NumberFormatter.swift b/DanaKit/Common/NumberFormatter.swift
new file mode 100644
index 0000000..9b0ae5d
--- /dev/null
+++ b/DanaKit/Common/NumberFormatter.swift
@@ -0,0 +1,15 @@
+//
+//  NumberFormatter.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 15/01/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import Foundation
+
+extension NumberFormatter {
+    func string(from number: Double) -> String? {
+        return string(from: NSNumber(value: number))
+    }
+}
diff --git a/DanaKit/Common/OSLog.swift b/DanaKit/Common/OSLog.swift
new file mode 100644
index 0000000..3044d5d
--- /dev/null
+++ b/DanaKit/Common/OSLog.swift
@@ -0,0 +1,143 @@
+//
+//  OSLog.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 06/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import OSLog
+import Combine
+
+class DanaLogger {
+    private let logger: Logger
+    private let fileManager = FileManager.default
+    
+    
+    init(category: String) {
+        logger = Logger(subsystem: "com.randallknutson.DanaKit", category: category)
+    }
+    
+    public func info(_ msg: String, file: String = #file, _ function: String = #function, _ line: Int = #line) {
+        let message = "\(file.file) - \(function)#\(line): \(msg)"
+        self.logger.info("\(message, privacy: .public)")
+        self.writeToFile(message, .info)
+    }
+    
+    public func warning(_ msg: String, file: String = #file, _ function: String = #function, _ line: Int = #line) {
+        let message = "\(file.file) - \(function)#\(line): \(msg)"
+        self.logger.warning("\(message, privacy: .public)")
+        self.writeToFile(message, .notice)
+    }
+    
+    public func error(_ msg: String, file: String = #file, _ function: String = #function, _ line: Int = #line) {
+        let message = "\(file.file) - \(function)#\(line): \(msg)"
+        self.logger.error("\(message, privacy: .public)")
+        self.writeToFile(message, .error)
+    }
+    
+    private func writeToFile(_ msg: String, _ type: OSLogEntryLog.Level) {
+        if !fileManager.fileExists(atPath: logDir) {
+            try? fileManager.createDirectory(
+                atPath: logDir,
+                withIntermediateDirectories: false,
+                attributes: nil
+            )
+        }
+
+        if !fileManager.fileExists(atPath: logFile) {
+            createFile(at: startOfDay)
+        } else if let attributes = try? fileManager.attributesOfItem(atPath: logFile),
+               let creationDate = attributes[.creationDate] as? Date, creationDate < startOfDay
+            {
+                try? fileManager.removeItem(atPath: logFilePrev)
+                try? fileManager.moveItem(atPath: logFile, toPath: logFilePrev)
+                createFile(at: startOfDay)
+        }
+        
+        let logEntry = "[\(dateFormatter.string(from: Date())) \(getLevel(type))] \(msg)\n"
+        let data = logEntry.data(using: .utf8)!
+        try? data.append(fileURL: URL(fileURLWithPath: logFile))
+    }
+    
+    private var startOfDay: Date {
+        Calendar.current.startOfDay(for: Date())
+    }
+    
+    private var logFile: String {
+        getDocumentsDirectory().appendingPathComponent("danakit/log.txt").path
+    }
+
+    private var logDir: String {
+        getDocumentsDirectory().appendingPathComponent("danakit").path
+    }
+
+    private var logFilePrev: String {
+        getDocumentsDirectory().appendingPathComponent("danakit/log_prev.txt").path
+    }
+
+    private func getDocumentsDirectory() -> URL {
+        let paths = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)
+        let documentsDirectory = paths[0]
+        return documentsDirectory
+    }
+    
+    private var dateFormatter: DateFormatter {
+        let dateFormatter = DateFormatter()
+        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ssZ"
+        return dateFormatter
+    }
+    
+    private func createFile(at date: Date) {
+        fileManager.createFile(atPath: logFile, contents: nil, attributes: [.creationDate: date])
+    }
+    
+    func getDebugLogs() -> [URL] {
+        var items: [URL] = []
+
+        if fileManager.fileExists(atPath: logFile) {
+            items.append(URL(fileURLWithPath: logFile))
+        }
+
+        if fileManager.fileExists(atPath: logFilePrev) {
+            items.append(URL(fileURLWithPath: logFilePrev))
+        }
+
+        return items
+    }
+    
+    private func getLevel(_ type: OSLogEntryLog.Level) -> String {
+        switch type {
+        case .info:
+            return "INFO"
+        case .notice:
+            return "WARNING"
+        case .error:
+            return "ERROR"
+        case .fault:
+            return "FAULT"
+        case .debug:
+            return "DEBUG"
+        default:
+            return "UNKNOWN"
+        }
+    }
+}
+
+private extension Data {
+    func append(fileURL: URL) throws {
+        if let fileHandle = FileHandle(forWritingAtPath: fileURL.path) {
+            defer {
+                fileHandle.closeFile()
+            }
+            fileHandle.seekToEndOfFile()
+            fileHandle.write(self)
+        } else {
+            try write(to: fileURL, options: .atomic)
+        }
+    }
+}
+
+private extension String {
+    var file: String { components(separatedBy: "/").last ?? "" }
+}
diff --git a/DanaKit/Common/PumpAlarmType.swift b/DanaKit/Common/PumpAlarmType.swift
new file mode 100644
index 0000000..dd36b24
--- /dev/null
+++ b/DanaKit/Common/PumpAlarmType.swift
@@ -0,0 +1,39 @@
+//
+//  PumpAlarmType.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 28/01/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import Foundation
+import LoopKit
+
+extension PumpAlarmType {
+    static func fromParam8(_ value: UInt8?) -> PumpAlarmType? {
+        guard let value = value else {
+            return nil
+        }
+        
+        switch(value) {
+        case 0x50:
+            return PumpAlarmType.other("Basal Compare")
+        case 0x52:
+            return PumpAlarmType.lowInsulin
+        case 0x43:
+            return PumpAlarmType.other("Check")
+        case 0x4f:
+            return PumpAlarmType.occlusion
+        case 0x4d:
+            return PumpAlarmType.other("Basal maximum exceeded")
+        case 0x44:
+            return PumpAlarmType.other("Daily max insulin reached")
+        case 0x42:
+            return PumpAlarmType.lowPower
+        case 0x53:
+            return PumpAlarmType.noPower
+        default:
+            return nil
+        }
+    }
+}
diff --git a/DanaKit/Common/TimeInterval.swift b/DanaKit/Common/TimeInterval.swift
new file mode 100644
index 0000000..aa1b4d4
--- /dev/null
+++ b/DanaKit/Common/TimeInterval.swift
@@ -0,0 +1,81 @@
+//
+//  TimeInterval.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 14/02/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import Foundation
+
+extension TimeInterval {
+
+    static func days(_ days: Double) -> TimeInterval {
+        return self.init(days: days)
+    }
+
+    static func hours(_ hours: Double) -> TimeInterval {
+        return self.init(hours: hours)
+    }
+
+    static func minutes(_ minutes: Int) -> TimeInterval {
+        return self.init(minutes: Double(minutes))
+    }
+
+    static func minutes(_ minutes: Double) -> TimeInterval {
+        return self.init(minutes: minutes)
+    }
+
+    static func seconds(_ seconds: Double) -> TimeInterval {
+        return self.init(seconds)
+    }
+
+    static func milliseconds(_ milliseconds: Double) -> TimeInterval {
+        return self.init(milliseconds / 1000)
+    }
+
+    init(days: Double) {
+        self.init(hours: days * 24)
+    }
+
+    init(hours: Double) {
+        self.init(minutes: hours * 60)
+    }
+
+    init(minutes: Double) {
+        self.init(minutes * 60)
+    }
+
+    init(seconds: Double) {
+        self.init(seconds)
+    }
+
+    init(milliseconds: Double) {
+        self.init(milliseconds / 1000)
+    }
+
+    var milliseconds: Double {
+        return self * 1000
+    }
+
+    init(hundredthsOfMilliseconds: Double) {
+        self.init(hundredthsOfMilliseconds / 100000)
+    }
+
+    var hundredthsOfMilliseconds: Double {
+        return self * 100000
+    }
+
+    var minutes: Double {
+        return self / 60.0
+    }
+
+    var hours: Double {
+        return minutes / 60.0
+    }
+
+    var days: Double {
+        return hours / 24.0
+    }
+
+}
diff --git a/DanaKit/Common/UnfinalizedDose.swift b/DanaKit/Common/UnfinalizedDose.swift
new file mode 100644
index 0000000..c5711a7
--- /dev/null
+++ b/DanaKit/Common/UnfinalizedDose.swift
@@ -0,0 +1,55 @@
+//
+//  UnfinalizedDose.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 23/01/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import Foundation
+import LoopKit
+
+public class UnfinalizedDose {
+    public typealias RawValue = [String: Any]
+    
+    public let type: DoseType
+    public let startDate: Date
+    public let endDate: Date
+    public let unit: DoseUnit
+    public let value: Double
+    public var deliveredUnits: Double = 0
+    public let insulinType: InsulinType?
+    public let automatic: Bool?
+    
+    public init(units: Double, duration: TimeInterval, activationType: BolusActivationType, insulinType: InsulinType) {
+        var endTime = Date.now
+        endTime.addTimeInterval(duration)
+        
+        self.type = .bolus
+        self.unit = .units
+        self.value = units
+        self.startDate = Date.now
+        self.endDate = endTime
+        self.insulinType = insulinType
+        self.automatic = activationType.isAutomatic
+    }
+    
+    public func toDoseEntry() -> DoseEntry? {
+        switch type {
+        case .bolus:
+            return DoseEntry(
+                type: .bolus,
+                startDate: startDate,
+                endDate: endDate,
+                value: value,
+                unit: .units,
+                deliveredUnits: deliveredUnits,
+                insulinType: insulinType,
+                automatic: automatic,
+                isMutable: false
+            )
+        default:
+            return nil
+        }
+    }
+}
diff --git a/DanaKit/DanaKit.xcodeproj/project.pbxproj b/DanaKit/DanaKit.xcodeproj/project.pbxproj
new file mode 100644
index 0000000..9fbc9c5
--- /dev/null
+++ b/DanaKit/DanaKit.xcodeproj/project.pbxproj
@@ -0,0 +1,1434 @@
+// !$*UTF8*$!
+{
+	archiveVersion = 1;
+	classes = {
+	};
+	objectVersion = 55;
+	objects = {
+
+/* Begin PBXBuildFile section */
+		1029AE4827094D0E00B7F5B6 /* DanaKitPumpManager.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1029AE4627094D0E00B7F5B6 /* DanaKitPumpManager.swift */; };
+		1029AE4927094D0E00B7F5B6 /* DanaKitPumpManagerState.swift in Sources */ = {isa = PBXBuildFile; fileRef = 1029AE4727094D0E00B7F5B6 /* DanaKitPumpManagerState.swift */; };
+		84752E9326ED0FFE009FD801 /* DanaKit.h in Headers */ = {isa = PBXBuildFile; fileRef = 84752E8526ED0FFE009FD801 /* DanaKit.h */; settings = {ATTRIBUTES = (Public, ); }; };
+		847530F626ED65DD009FD801 /* LoopKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 847530F426ED65DD009FD801 /* LoopKit.framework */; };
+		847530F826ED65DD009FD801 /* LoopKitUI.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 847530F526ED65DD009FD801 /* LoopKitUI.framework */; };
+		A91B2DEC276E1E5E001B0E95 /* README.md in Resources */ = {isa = PBXBuildFile; fileRef = A91B2DEB276E1E5E001B0E95 /* README.md */; };
+		B62557432BF65396006C4517 /* Bundle.swift in Sources */ = {isa = PBXBuildFile; fileRef = B62557422BF65396006C4517 /* Bundle.swift */; };
+		B80C73D62B7D534300821A38 /* TimeInterval.swift in Sources */ = {isa = PBXBuildFile; fileRef = B80C73D52B7D534300821A38 /* TimeInterval.swift */; };
+		B80EC4AE2B45EFDD005E2A1A /* LoadingModal.swift in Sources */ = {isa = PBXBuildFile; fileRef = B80EC4AD2B45EFDD005E2A1A /* LoadingModal.swift */; };
+		B80EC4B02B45F66E005E2A1A /* DanaKitSettingsView.swift in Sources */ = {isa = PBXBuildFile; fileRef = B80EC4AF2B45F66E005E2A1A /* DanaKitSettingsView.swift */; };
+		B80EC4B22B45F681005E2A1A /* DanaKitSettingsViewModel.swift in Sources */ = {isa = PBXBuildFile; fileRef = B80EC4B12B45F681005E2A1A /* DanaKitSettingsViewModel.swift */; };
+		B8179E5A2B20F2A10049EEE7 /* OSLog.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8179E592B20F2A10049EEE7 /* OSLog.swift */; };
+		B81C52242B30E95E00FB801D /* IdentifiableClass.swift in Sources */ = {isa = PBXBuildFile; fileRef = B81C52232B30E95E00FB801D /* IdentifiableClass.swift */; };
+		B81E9D052B66906000AB6AA1 /* PumpAlarmType.swift in Sources */ = {isa = PBXBuildFile; fileRef = B81E9D042B66906000AB6AA1 /* PumpAlarmType.swift */; };
+		B82FA9452B3DF3AD004F2AFE /* DanaKitScanView.swift in Sources */ = {isa = PBXBuildFile; fileRef = B82FA9442B3DF3AD004F2AFE /* DanaKitScanView.swift */; };
+		B82FA9472B3DF85F004F2AFE /* DanaKitScanViewModel.swift in Sources */ = {isa = PBXBuildFile; fileRef = B82FA9462B3DF85F004F2AFE /* DanaKitScanViewModel.swift */; };
+		B8313D272B3B162900A0F64D /* DanaKitSetupView.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8313D262B3B162900A0F64D /* DanaKitSetupView.swift */; };
+		B8360A702B26011200152188 /* DanaPacketBase.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A6F2B26011200152188 /* DanaPacketBase.swift */; };
+		B8360A722B2601D600152188 /* DanaBasalCancelTemporary.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A712B2601D600152188 /* DanaBasalCancelTemporary.swift */; };
+		B8360A742B26037100152188 /* DanaBasalGetProfileNumber.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A732B26037100152188 /* DanaBasalGetProfileNumber.swift */; };
+		B8360A762B263BE700152188 /* DanaBasalGetRate.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A752B263BE700152188 /* DanaBasalGetRate.swift */; };
+		B8360A782B263C8900152188 /* DanaBasalSetProfileNumber.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A772B263C8900152188 /* DanaBasalSetProfileNumber.swift */; };
+		B8360A7A2B263CD400152188 /* DanaBasalSetProfileRate.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A792B263CD400152188 /* DanaBasalSetProfileRate.swift */; };
+		B8360A7C2B263E0F00152188 /* DanaBasalSetSuspendOff.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A7B2B263E0F00152188 /* DanaBasalSetSuspendOff.swift */; };
+		B8360A7E2B263E5500152188 /* DanaBasalSetSuspendOn.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A7D2B263E5500152188 /* DanaBasalSetSuspendOn.swift */; };
+		B8360A802B263EA200152188 /* DanaBasalSetTemporary.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A7F2B263EA200152188 /* DanaBasalSetTemporary.swift */; };
+		B8360A822B263ED700152188 /* DanaBolusCancelExtended.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A812B263ED700152188 /* DanaBolusCancelExtended.swift */; };
+		B8360A842B263F1700152188 /* DanaBolusGet24CIRCFArray.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A832B263F1700152188 /* DanaBolusGet24CIRCFArray.swift */; };
+		B8360A862B26402700152188 /* DanaBolusGetCalculationInformation.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A852B26402700152188 /* DanaBolusGetCalculationInformation.swift */; };
+		B8360A882B26415700152188 /* DanaBolusGetCIRCFArray.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A872B26415700152188 /* DanaBolusGetCIRCFArray.swift */; };
+		B8360A8B2B2641C200152188 /* Data.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A8A2B2641C200152188 /* Data.swift */; };
+		B8360A8D2B2642FE00152188 /* DanaBolusGetOption.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A8C2B2642FE00152188 /* DanaBolusGetOption.swift */; };
+		B8360A8F2B26435900152188 /* DanaBolusGetStepInformation.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A8E2B26435900152188 /* DanaBolusGetStepInformation.swift */; };
+		B8360A912B2643C900152188 /* DanaBolusSet24CIRCFArray.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A902B2643C900152188 /* DanaBolusSet24CIRCFArray.swift */; };
+		B8360A932B2644A800152188 /* DanaBolusSetExtended.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A922B2644A800152188 /* DanaBolusSetExtended.swift */; };
+		B8360A952B2644D300152188 /* DanaBolusSetOption.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A942B2644D300152188 /* DanaBolusSetOption.swift */; };
+		B8360A972B26452B00152188 /* DanaBolusStart.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A962B26452B00152188 /* DanaBolusStart.swift */; };
+		B8360A992B26456600152188 /* DanaBolusStop.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A982B26456600152188 /* DanaBolusStop.swift */; };
+		B8360A9D2B2646A100152188 /* DanaGeneralAvgBolus.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A9C2B2646A100152188 /* DanaGeneralAvgBolus.swift */; };
+		B8360A9F2B2A26C700152188 /* DanaGeneralClearUserTimeChangeFlag.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360A9E2B2A26C700152188 /* DanaGeneralClearUserTimeChangeFlag.swift */; };
+		B8360AA12B2A26EB00152188 /* DanaGeneralGetInitialScreenInformation.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AA02B2A26EB00152188 /* DanaGeneralGetInitialScreenInformation.swift */; };
+		B8360AA32B2A275400152188 /* DanaGeneralGetPumpCheck.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AA22B2A275400152188 /* DanaGeneralGetPumpCheck.swift */; };
+		B8360AA52B2A281700152188 /* DanaGeneralGetPumpDecRatio.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AA42B2A281700152188 /* DanaGeneralGetPumpDecRatio.swift */; };
+		B8360AA72B2A289A00152188 /* DanaGeneralGetPumpTime.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AA62B2A289A00152188 /* DanaGeneralGetPumpTime.swift */; };
+		B8360AA92B2A28CE00152188 /* DanaGeneralGetPumpTimeUtcWithTimezone.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AA82B2A28CE00152188 /* DanaGeneralGetPumpTimeUtcWithTimezone.swift */; };
+		B8360AAB2B2A290900152188 /* DanaGeneralGetShippingInformation.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AAA2B2A290900152188 /* DanaGeneralGetShippingInformation.swift */; };
+		B8360AAD2B2A294400152188 /* DanaGeneralGetShippingVersion.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AAC2B2A294400152188 /* DanaGeneralGetShippingVersion.swift */; };
+		B8360AAF2B2A298200152188 /* DanaGeneralGetUserOption.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AAE2B2A298200152188 /* DanaGeneralGetUserOption.swift */; };
+		B8360AB12B2A2A1900152188 /* DanaGeneralGetUserTimeChangeFlag.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AB02B2A2A1900152188 /* DanaGeneralGetUserTimeChangeFlag.swift */; };
+		B8360AB32B2A2A6A00152188 /* DanaGeneralKeepConnection.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AB22B2A2A6A00152188 /* DanaGeneralKeepConnection.swift */; };
+		B8360AB52B2A2A9800152188 /* DanaGeneralSaveHistory.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AB42B2A2A9800152188 /* DanaGeneralSaveHistory.swift */; };
+		B8360AB72B2A2BA200152188 /* DanaGeneralSetHistoryUploadMode.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AB62B2A2BA200152188 /* DanaGeneralSetHistoryUploadMode.swift */; };
+		B8360AB92B2A2C3C00152188 /* DanaGeneralSetPumpTime.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AB82B2A2C3C00152188 /* DanaGeneralSetPumpTime.swift */; };
+		B8360ABB2B2A2C7300152188 /* DanaGeneralSetPumpTimeUtcWithTimezone.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360ABA2B2A2C7300152188 /* DanaGeneralSetPumpTimeUtcWithTimezone.swift */; };
+		B8360ABD2B2A2CA700152188 /* DanaGeneralSetUserOption.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360ABC2B2A2CA700152188 /* DanaGeneralSetUserOption.swift */; };
+		B8360ABF2B2A2D6C00152188 /* DanaHistoryAlarm.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360ABE2B2A2D6C00152188 /* DanaHistoryAlarm.swift */; };
+		B8360AC12B2A2DA600152188 /* DanaHistoryAll.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AC02B2A2DA500152188 /* DanaHistoryAll.swift */; };
+		B8360AC32B2A2DCC00152188 /* DanaHistoryBasal.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AC22B2A2DCC00152188 /* DanaHistoryBasal.swift */; };
+		B8360AC52B2A2DF100152188 /* DanaHistoryBase.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AC42B2A2DF100152188 /* DanaHistoryBase.swift */; };
+		B8360AC72B2A306F00152188 /* DanaHistoryBloodGlucose.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AC62B2A306F00152188 /* DanaHistoryBloodGlucose.swift */; };
+		B8360AC92B2A311200152188 /* DanaHistoryBolus.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AC82B2A311200152188 /* DanaHistoryBolus.swift */; };
+		B8360ACB2B2A341B00152188 /* DanaHistoryCarbohydrates.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360ACA2B2A341B00152188 /* DanaHistoryCarbohydrates.swift */; };
+		B8360ACD2B2A343200152188 /* DanaHistoryDaily.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360ACC2B2A343200152188 /* DanaHistoryDaily.swift */; };
+		B8360ACF2B2A344900152188 /* DanaHistoryPrime.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360ACE2B2A344900152188 /* DanaHistoryPrime.swift */; };
+		B8360AD12B2A346C00152188 /* DanaHistoryRefill.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AD02B2A346C00152188 /* DanaHistoryRefill.swift */; };
+		B8360AD32B2A348100152188 /* DanaHistorySuspend.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AD22B2A348100152188 /* DanaHistorySuspend.swift */; };
+		B8360AD52B2A349400152188 /* DanaHistoryTemporary.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AD42B2A349400152188 /* DanaHistoryTemporary.swift */; };
+		B8360AD72B2A34E300152188 /* DanaLoopHistoryEvents.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AD62B2A34E300152188 /* DanaLoopHistoryEvents.swift */; };
+		B8360AD92B2A354500152188 /* DanaLoopSetEventHistory.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AD82B2A354500152188 /* DanaLoopSetEventHistory.swift */; };
+		B8360ADB2B2A39DF00152188 /* DanaLoopSetTemporaryBasal.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360ADA2B2A39DF00152188 /* DanaLoopSetTemporaryBasal.swift */; };
+		B8360ADD2B2A3A1600152188 /* DanaNotifyDeliveryComplete.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360ADC2B2A3A1600152188 /* DanaNotifyDeliveryComplete.swift */; };
+		B8360AE12B2A3C3C00152188 /* DanaNotifyAlarm.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360ADE2B2A3C3B00152188 /* DanaNotifyAlarm.swift */; };
+		B8360AE22B2A3C3C00152188 /* DanaNotifyMissedBolus.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360ADF2B2A3C3B00152188 /* DanaNotifyMissedBolus.swift */; };
+		B8360AE32B2A3C3C00152188 /* DanaNotifyDeliveryRateDisplay.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AE02B2A3C3C00152188 /* DanaNotifyDeliveryRateDisplay.swift */; };
+		B8360AE62B2A3D9B00152188 /* GeneratePacketTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AE52B2A3D9B00152188 /* GeneratePacketTests.swift */; };
+		B8360AE92B2B954700152188 /* BluetoothManager.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AE82B2B954700152188 /* BluetoothManager.swift */; };
+		B8360AEB2B2B95B000152188 /* EncryptionManager.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8360AEA2B2B95B000152188 /* EncryptionManager.swift */; };
+		B83815C82B322B0800627125 /* DanaKitDebugViewModel.swift in Sources */ = {isa = PBXBuildFile; fileRef = B83815C72B322B0800627125 /* DanaKitDebugViewModel.swift */; };
+		B83815CA2B34C8CA00627125 /* PeripheralManager.swift in Sources */ = {isa = PBXBuildFile; fileRef = B83815C92B34C8CA00627125 /* PeripheralManager.swift */; };
+		B85335D82B55D3A900DB470A /* NumberFormatter.swift in Sources */ = {isa = PBXBuildFile; fileRef = B85335D72B55D3A900DB470A /* NumberFormatter.swift */; };
+		B85335DA2B58599400DB470A /* ReservoirView.swift in Sources */ = {isa = PBXBuildFile; fileRef = B85335D92B58599300DB470A /* ReservoirView.swift */; };
+		B85335DC2B58658A00DB470A /* DanaKitSettingsPumpSpeed.swift in Sources */ = {isa = PBXBuildFile; fileRef = B85335DB2B58658A00DB470A /* DanaKitSettingsPumpSpeed.swift */; };
+		B85418A82B20F46200C3B4D0 /* Lookup.swift in Sources */ = {isa = PBXBuildFile; fileRef = B85418A72B20F46200C3B4D0 /* Lookup.swift */; };
+		B85418AA2B20F52200C3B4D0 /* Common.swift in Sources */ = {isa = PBXBuildFile; fileRef = B85418A92B20F52200C3B4D0 /* Common.swift */; };
+		B85418AC2B20F6B700C3B4D0 /* CommonTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = B85418AB2B20F6B700C3B4D0 /* CommonTests.swift */; };
+		B85418AE2B20F6F800C3B4D0 /* Constants.swift in Sources */ = {isa = PBXBuildFile; fileRef = B85418AD2B20F6F800C3B4D0 /* Constants.swift */; };
+		B85418B02B20F77900C3B4D0 /* Encrypt.swift in Sources */ = {isa = PBXBuildFile; fileRef = B85418AF2B20F77900C3B4D0 /* Encrypt.swift */; };
+		B85418B32B20F92C00C3B4D0 /* DanaPacketType.swift in Sources */ = {isa = PBXBuildFile; fileRef = B85418B22B20F92C00C3B4D0 /* DanaPacketType.swift */; };
+		B85418B52B20FBAD00C3B4D0 /* EncryptTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = B85418B42B20FBAD00C3B4D0 /* EncryptTests.swift */; };
+		B85418B72B21001000C3B4D0 /* Decryption.swift in Sources */ = {isa = PBXBuildFile; fileRef = B85418B62B21001000C3B4D0 /* Decryption.swift */; };
+		B85418B92B21032600C3B4D0 /* DecryptionTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = B85418B82B21032600C3B4D0 /* DecryptionTests.swift */; };
+		B857E7F22B1FABF000BDFFC4 /* LocalizedString.swift in Sources */ = {isa = PBXBuildFile; fileRef = B857E7F12B1FABF000BDFFC4 /* LocalizedString.swift */; };
+		B86326A72B683538005D8ECD /* DanaKitUserSettingsViewModel.swift in Sources */ = {isa = PBXBuildFile; fileRef = B86326A62B683538005D8ECD /* DanaKitUserSettingsViewModel.swift */; };
+		B86326A92B68354D005D8ECD /* DanaKitUserSettingsView.swift in Sources */ = {isa = PBXBuildFile; fileRef = B86326A82B68354D005D8ECD /* DanaKitUserSettingsView.swift */; };
+		B86326AC2B683E25005D8ECD /* PickerView.swift in Sources */ = {isa = PBXBuildFile; fileRef = B86326AB2B683E25005D8ECD /* PickerView.swift */; };
+		B864F7A02B49E29700C503A2 /* DanaKitPumpSpeed.swift in Sources */ = {isa = PBXBuildFile; fileRef = B864F79F2B49E29700C503A2 /* DanaKitPumpSpeed.swift */; };
+		B864F7A22B49EF3800C503A2 /* DanaKitSetupCompleteView.swift in Sources */ = {isa = PBXBuildFile; fileRef = B864F7A12B49EF3800C503A2 /* DanaKitSetupCompleteView.swift */; };
+		B871156F2B4C8419004B4A98 /* DanaKitUI.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = B885168B2B305E740063402A /* DanaKitUI.xcassets */; };
+		B87115752B4DD0AC004B4A98 /* DanaKitPumpManagerError.swift in Sources */ = {isa = PBXBuildFile; fileRef = B87115742B4DD0AC004B4A98 /* DanaKitPumpManagerError.swift */; };
+		B87730972BB865B100D2C653 /* ActivityViewController.swift in Sources */ = {isa = PBXBuildFile; fileRef = B87730962BB865B100D2C653 /* ActivityViewController.swift */; };
+		B87730982BB8683D00D2C653 /* DanaKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 84752E8226ED0FFE009FD801 /* DanaKit.framework */; };
+		B87D571C2B20EEAF00FD82E9 /* Crc.swift in Sources */ = {isa = PBXBuildFile; fileRef = B87D571B2B20EEAF00FD82E9 /* Crc.swift */; };
+		B87D571F2B20EFE700FD82E9 /* CrcTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = B87D571E2B20EFE700FD82E9 /* CrcTests.swift */; };
+		B87E6BA92B6053CD001B7FAD /* DanaKitDoseProgressReporter.swift in Sources */ = {isa = PBXBuildFile; fileRef = B87E6BA82B6053CD001B7FAD /* DanaKitDoseProgressReporter.swift */; };
+		B87E6BAB2B605F5F001B7FAD /* UnfinalizedDose.swift in Sources */ = {isa = PBXBuildFile; fileRef = B87E6BAA2B605F5F001B7FAD /* UnfinalizedDose.swift */; };
+		B88516872B2F74D60063402A /* DanaPacketParser.swift in Sources */ = {isa = PBXBuildFile; fileRef = B88516862B2F74D60063402A /* DanaPacketParser.swift */; };
+		B885168A2B305D6E0063402A /* DanaKitPumpManager+UI.swift in Sources */ = {isa = PBXBuildFile; fileRef = B88516892B305D6E0063402A /* DanaKitPumpManager+UI.swift */; };
+		B88516912B30638D0063402A /* DanaKitReservoirView.swift in Sources */ = {isa = PBXBuildFile; fileRef = B88516902B30638D0063402A /* DanaKitReservoirView.swift */; };
+		B88516932B30C6DA0063402A /* DanaKitReservoirView.xib in Resources */ = {isa = PBXBuildFile; fileRef = B88516922B30C6DA0063402A /* DanaKitReservoirView.xib */; };
+		B88516952B30C7170063402A /* NibLoadable.swift in Sources */ = {isa = PBXBuildFile; fileRef = B88516942B30C7170063402A /* NibLoadable.swift */; };
+		B88516972B30CA860063402A /* DanaKitHUDProvider.swift in Sources */ = {isa = PBXBuildFile; fileRef = B88516962B30CA860063402A /* DanaKitHUDProvider.swift */; };
+		B88516992B30D6EC0063402A /* DanaUICoordinator.swift in Sources */ = {isa = PBXBuildFile; fileRef = B88516982B30D6EC0063402A /* DanaUICoordinator.swift */; };
+		B885169B2B30D8140063402A /* DanaKitDebugView.swift in Sources */ = {isa = PBXBuildFile; fileRef = B885169A2B30D8140063402A /* DanaKitDebugView.swift */; };
+		B8A0163F2B433E000054AECA /* InsulinTypeConfirmation.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8A0163E2B433E000054AECA /* InsulinTypeConfirmation.swift */; };
+		B8F4DCA42B94C06100AB00E6 /* Image.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8F4DCA32B94C06100AB00E6 /* Image.swift */; };
+		B8F4DCA62B94C0D800AB00E6 /* DanaIExplainationView.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8F4DCA52B94C0D800AB00E6 /* DanaIExplainationView.swift */; };
+		B8F4DCA82B94C0E700AB00E6 /* DanaRSv3Explaination.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8F4DCA72B94C0E700AB00E6 /* DanaRSv3Explaination.swift */; };
+		B8F4DCAA2B94C0F900AB00E6 /* DanaRSv1Explaination.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8F4DCA92B94C0F900AB00E6 /* DanaRSv1Explaination.swift */; };
+		B8F4DCAC2B94C10800AB00E6 /* DanaRSv1Password.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8F4DCAB2B94C10800AB00E6 /* DanaRSv1Password.swift */; };
+		B8F4DCAE2B94CF8100AB00E6 /* ContinueButton.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8F4DCAD2B94CF8100AB00E6 /* ContinueButton.swift */; };
+		B8F4DCB22B97290800AB00E6 /* InsulinTypeView.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8F4DCB12B97290800AB00E6 /* InsulinTypeView.swift */; };
+		B8F4DCB42B9729E800AB00E6 /* BasalProfileView.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8F4DCB32B9729E800AB00E6 /* BasalProfileView.swift */; };
+		B8F4DCB62B972AB400AB00E6 /* BasalProfileViewModel.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8F4DCB52B972AB400AB00E6 /* BasalProfileViewModel.swift */; };
+		B8F4E1A82B83D28A000F4AE1 /* BackgroundTask.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8F4E1A72B83D28A000F4AE1 /* BackgroundTask.swift */; };
+		B8F4E1AA2B83D4F1000F4AE1 /* blank.wav in Resources */ = {isa = PBXBuildFile; fileRef = B8F4E1A92B83D4F1000F4AE1 /* blank.wav */; };
+		B8FB5F152B5D705D001C88BA /* DoseEntry.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8FB5F142B5D705D001C88BA /* DoseEntry.swift */; };
+		B8FB5F172B5D91A6001C88BA /* NewPumpEvent.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8FB5F162B5D91A6001C88BA /* NewPumpEvent.swift */; };
+		B8FDA0DE2B77D037007004A5 /* PumpManagerAlert.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8FDA0DD2B77D037007004A5 /* PumpManagerAlert.swift */; };
+		B8FF961A2B4305A300C14280 /* NavigationLink.swift in Sources */ = {isa = PBXBuildFile; fileRef = B8FF96192B4305A300C14280 /* NavigationLink.swift */; };
+		C10D6D6E27A2395700F53D58 /* DanaKitPlugin.swift in Sources */ = {isa = PBXBuildFile; fileRef = C10D6D6D27A2395700F53D58 /* DanaKitPlugin.swift */; };
+		C187C19A279086A8006E3557 /* DanaKitPlugin.h in Headers */ = {isa = PBXBuildFile; fileRef = C187C199279086A8006E3557 /* DanaKitPlugin.h */; settings = {ATTRIBUTES = (Public, ); }; };
+		C187C1A3279087A4006E3557 /* OSLog.swift in Sources */ = {isa = PBXBuildFile; fileRef = C187C1A2279087A4006E3557 /* OSLog.swift */; };
+		C1C001C127A2349D00533D35 /* DanaKit.swift in Sources */ = {isa = PBXBuildFile; fileRef = C1C001C027A2349D00533D35 /* DanaKit.swift */; };
+		C1D27A1527908DC600C41EBA /* DanaKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 84752E8226ED0FFE009FD801 /* DanaKit.framework */; };
+		C1D27A1727908DE500C41EBA /* DanaKit.framework in CopyFiles */ = {isa = PBXBuildFile; fileRef = 84752E8226ED0FFE009FD801 /* DanaKit.framework */; settings = {ATTRIBUTES = (CodeSignOnCopy, RemoveHeadersOnCopy, ); }; };
+/* End PBXBuildFile section */
+
+/* Begin PBXContainerItemProxy section */
+		84752E8D26ED0FFE009FD801 /* PBXContainerItemProxy */ = {
+			isa = PBXContainerItemProxy;
+			containerPortal = 84752E7926ED0FFE009FD801 /* Project object */;
+			proxyType = 1;
+			remoteGlobalIDString = 84752E8126ED0FFE009FD801;
+			remoteInfo = DanaKit;
+		};
+		B87730992BB8683D00D2C653 /* PBXContainerItemProxy */ = {
+			isa = PBXContainerItemProxy;
+			containerPortal = 84752E7926ED0FFE009FD801 /* Project object */;
+			proxyType = 1;
+			remoteGlobalIDString = 84752E8126ED0FFE009FD801;
+			remoteInfo = DanaKit;
+		};
+		C187C19F279086FF006E3557 /* PBXContainerItemProxy */ = {
+			isa = PBXContainerItemProxy;
+			containerPortal = 84752E7926ED0FFE009FD801 /* Project object */;
+			proxyType = 1;
+			remoteGlobalIDString = 84752E8126ED0FFE009FD801;
+			remoteInfo = DanaKit;
+		};
+/* End PBXContainerItemProxy section */
+
+/* Begin PBXCopyFilesBuildPhase section */
+		C1D27A1627908DCF00C41EBA /* CopyFiles */ = {
+			isa = PBXCopyFilesBuildPhase;
+			buildActionMask = 2147483647;
+			dstPath = "";
+			dstSubfolderSpec = 10;
+			files = (
+				C1D27A1727908DE500C41EBA /* DanaKit.framework in CopyFiles */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXCopyFilesBuildPhase section */
+
+/* Begin PBXFileReference section */
+		1029AE4627094D0E00B7F5B6 /* DanaKitPumpManager.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = DanaKitPumpManager.swift; sourceTree = "<group>"; };
+		1029AE4727094D0E00B7F5B6 /* DanaKitPumpManagerState.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = DanaKitPumpManagerState.swift; sourceTree = "<group>"; };
+		84752E8226ED0FFE009FD801 /* DanaKit.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = DanaKit.framework; sourceTree = BUILT_PRODUCTS_DIR; };
+		84752E8526ED0FFE009FD801 /* DanaKit.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = DanaKit.h; sourceTree = "<group>"; };
+		84752E8626ED0FFE009FD801 /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
+		84752E8B26ED0FFE009FD801 /* DanaKitTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = DanaKitTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
+		84752E9226ED0FFE009FD801 /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
+		847530F426ED65DD009FD801 /* LoopKit.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; path = LoopKit.framework; sourceTree = BUILT_PRODUCTS_DIR; };
+		847530F526ED65DD009FD801 /* LoopKitUI.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; path = LoopKitUI.framework; sourceTree = BUILT_PRODUCTS_DIR; };
+		A91B2DEB276E1E5E001B0E95 /* README.md */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = net.daringfireball.markdown; path = README.md; sourceTree = "<group>"; };
+		B62557422BF65396006C4517 /* Bundle.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = Bundle.swift; sourceTree = "<group>"; };
+		B80C73D52B7D534300821A38 /* TimeInterval.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = TimeInterval.swift; sourceTree = "<group>"; };
+		B80EC4AD2B45EFDD005E2A1A /* LoadingModal.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = LoadingModal.swift; sourceTree = "<group>"; };
+		B80EC4AF2B45F66E005E2A1A /* DanaKitSettingsView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaKitSettingsView.swift; sourceTree = "<group>"; };
+		B80EC4B12B45F681005E2A1A /* DanaKitSettingsViewModel.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaKitSettingsViewModel.swift; sourceTree = "<group>"; };
+		B8179E592B20F2A10049EEE7 /* OSLog.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = OSLog.swift; sourceTree = "<group>"; };
+		B81C52232B30E95E00FB801D /* IdentifiableClass.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = IdentifiableClass.swift; sourceTree = "<group>"; };
+		B81E9D042B66906000AB6AA1 /* PumpAlarmType.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = PumpAlarmType.swift; sourceTree = "<group>"; };
+		B82FA9342B3CAEFC004F2AFE /* ar */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = ar; path = Localization/ar.lproj/Localizable.strings; sourceTree = "<group>"; };
+		B82FA9352B3CAEFD004F2AFE /* zh-Hans */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = "zh-Hans"; path = "Localization/zh-Hans.lproj/Localizable.strings"; sourceTree = "<group>"; };
+		B82FA9362B3CAEFE004F2AFE /* cs */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = cs; path = Localization/cs.lproj/Localizable.strings; sourceTree = "<group>"; };
+		B82FA9372B3CAEFF004F2AFE /* da */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = da; path = Localization/da.lproj/Localizable.strings; sourceTree = "<group>"; };
+		B82FA9382B3CAF00004F2AFE /* fi */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = fi; path = Localization/fi.lproj/Localizable.strings; sourceTree = "<group>"; };
+		B82FA9392B3CAF00004F2AFE /* fr */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = fr; path = Localization/fr.lproj/Localizable.strings; sourceTree = "<group>"; };
+		B82FA93A2B3CAF01004F2AFE /* he */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = he; path = Localization/he.lproj/Localizable.strings; sourceTree = "<group>"; };
+		B82FA93B2B3CAF06004F2AFE /* hi */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = hi; path = Localization/hi.lproj/Localizable.strings; sourceTree = "<group>"; };
+		B82FA93C2B3CAF06004F2AFE /* ja */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = ja; path = Localization/ja.lproj/Localizable.strings; sourceTree = "<group>"; };
+		B82FA93D2B3CAF07004F2AFE /* pt-BR */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = "pt-BR"; path = "Localization/pt-BR.lproj/Localizable.strings"; sourceTree = "<group>"; };
+		B82FA93E2B3CAF08004F2AFE /* ro */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = ro; path = Localization/ro.lproj/Localizable.strings; sourceTree = "<group>"; };
+		B82FA93F2B3CAF0A004F2AFE /* sk */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = sk; path = Localization/sk.lproj/Localizable.strings; sourceTree = "<group>"; };
+		B82FA9402B3CAF0A004F2AFE /* es */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = es; path = Localization/es.lproj/Localizable.strings; sourceTree = "<group>"; };
+		B82FA9412B3CAF0B004F2AFE /* sv */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = sv; path = Localization/sv.lproj/Localizable.strings; sourceTree = "<group>"; };
+		B82FA9422B3CAF0C004F2AFE /* tr */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = tr; path = Localization/tr.lproj/Localizable.strings; sourceTree = "<group>"; };
+		B82FA9432B3CAF0C004F2AFE /* vi */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = vi; path = Localization/vi.lproj/Localizable.strings; sourceTree = "<group>"; };
+		B82FA9442B3DF3AD004F2AFE /* DanaKitScanView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaKitScanView.swift; sourceTree = "<group>"; };
+		B82FA9462B3DF85F004F2AFE /* DanaKitScanViewModel.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaKitScanViewModel.swift; sourceTree = "<group>"; };
+		B8313D262B3B162900A0F64D /* DanaKitSetupView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaKitSetupView.swift; sourceTree = "<group>"; };
+		B8313D282B3B168800A0F64D /* en */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = en; path = Localization/en.lproj/Localizable.strings; sourceTree = "<group>"; };
+		B8360A6F2B26011200152188 /* DanaPacketBase.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaPacketBase.swift; sourceTree = "<group>"; };
+		B8360A712B2601D600152188 /* DanaBasalCancelTemporary.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaBasalCancelTemporary.swift; sourceTree = "<group>"; };
+		B8360A732B26037100152188 /* DanaBasalGetProfileNumber.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaBasalGetProfileNumber.swift; sourceTree = "<group>"; };
+		B8360A752B263BE700152188 /* DanaBasalGetRate.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaBasalGetRate.swift; sourceTree = "<group>"; };
+		B8360A772B263C8900152188 /* DanaBasalSetProfileNumber.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaBasalSetProfileNumber.swift; sourceTree = "<group>"; };
+		B8360A792B263CD400152188 /* DanaBasalSetProfileRate.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaBasalSetProfileRate.swift; sourceTree = "<group>"; };
+		B8360A7B2B263E0F00152188 /* DanaBasalSetSuspendOff.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaBasalSetSuspendOff.swift; sourceTree = "<group>"; };
+		B8360A7D2B263E5500152188 /* DanaBasalSetSuspendOn.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaBasalSetSuspendOn.swift; sourceTree = "<group>"; };
+		B8360A7F2B263EA200152188 /* DanaBasalSetTemporary.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaBasalSetTemporary.swift; sourceTree = "<group>"; };
+		B8360A812B263ED700152188 /* DanaBolusCancelExtended.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaBolusCancelExtended.swift; sourceTree = "<group>"; };
+		B8360A832B263F1700152188 /* DanaBolusGet24CIRCFArray.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaBolusGet24CIRCFArray.swift; sourceTree = "<group>"; };
+		B8360A852B26402700152188 /* DanaBolusGetCalculationInformation.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaBolusGetCalculationInformation.swift; sourceTree = "<group>"; };
+		B8360A872B26415700152188 /* DanaBolusGetCIRCFArray.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaBolusGetCIRCFArray.swift; sourceTree = "<group>"; };
+		B8360A8A2B2641C200152188 /* Data.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Data.swift; sourceTree = "<group>"; };
+		B8360A8C2B2642FE00152188 /* DanaBolusGetOption.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaBolusGetOption.swift; sourceTree = "<group>"; };
+		B8360A8E2B26435900152188 /* DanaBolusGetStepInformation.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaBolusGetStepInformation.swift; sourceTree = "<group>"; };
+		B8360A902B2643C900152188 /* DanaBolusSet24CIRCFArray.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaBolusSet24CIRCFArray.swift; sourceTree = "<group>"; };
+		B8360A922B2644A800152188 /* DanaBolusSetExtended.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaBolusSetExtended.swift; sourceTree = "<group>"; };
+		B8360A942B2644D300152188 /* DanaBolusSetOption.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaBolusSetOption.swift; sourceTree = "<group>"; };
+		B8360A962B26452B00152188 /* DanaBolusStart.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaBolusStart.swift; sourceTree = "<group>"; };
+		B8360A982B26456600152188 /* DanaBolusStop.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaBolusStop.swift; sourceTree = "<group>"; };
+		B8360A9C2B2646A100152188 /* DanaGeneralAvgBolus.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaGeneralAvgBolus.swift; sourceTree = "<group>"; };
+		B8360A9E2B2A26C700152188 /* DanaGeneralClearUserTimeChangeFlag.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaGeneralClearUserTimeChangeFlag.swift; sourceTree = "<group>"; };
+		B8360AA02B2A26EB00152188 /* DanaGeneralGetInitialScreenInformation.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaGeneralGetInitialScreenInformation.swift; sourceTree = "<group>"; };
+		B8360AA22B2A275400152188 /* DanaGeneralGetPumpCheck.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaGeneralGetPumpCheck.swift; sourceTree = "<group>"; };
+		B8360AA42B2A281700152188 /* DanaGeneralGetPumpDecRatio.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaGeneralGetPumpDecRatio.swift; sourceTree = "<group>"; };
+		B8360AA62B2A289A00152188 /* DanaGeneralGetPumpTime.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaGeneralGetPumpTime.swift; sourceTree = "<group>"; };
+		B8360AA82B2A28CE00152188 /* DanaGeneralGetPumpTimeUtcWithTimezone.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaGeneralGetPumpTimeUtcWithTimezone.swift; sourceTree = "<group>"; };
+		B8360AAA2B2A290900152188 /* DanaGeneralGetShippingInformation.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaGeneralGetShippingInformation.swift; sourceTree = "<group>"; };
+		B8360AAC2B2A294400152188 /* DanaGeneralGetShippingVersion.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaGeneralGetShippingVersion.swift; sourceTree = "<group>"; };
+		B8360AAE2B2A298200152188 /* DanaGeneralGetUserOption.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaGeneralGetUserOption.swift; sourceTree = "<group>"; };
+		B8360AB02B2A2A1900152188 /* DanaGeneralGetUserTimeChangeFlag.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaGeneralGetUserTimeChangeFlag.swift; sourceTree = "<group>"; };
+		B8360AB22B2A2A6A00152188 /* DanaGeneralKeepConnection.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaGeneralKeepConnection.swift; sourceTree = "<group>"; };
+		B8360AB42B2A2A9800152188 /* DanaGeneralSaveHistory.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaGeneralSaveHistory.swift; sourceTree = "<group>"; };
+		B8360AB62B2A2BA200152188 /* DanaGeneralSetHistoryUploadMode.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaGeneralSetHistoryUploadMode.swift; sourceTree = "<group>"; };
+		B8360AB82B2A2C3C00152188 /* DanaGeneralSetPumpTime.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaGeneralSetPumpTime.swift; sourceTree = "<group>"; };
+		B8360ABA2B2A2C7300152188 /* DanaGeneralSetPumpTimeUtcWithTimezone.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaGeneralSetPumpTimeUtcWithTimezone.swift; sourceTree = "<group>"; };
+		B8360ABC2B2A2CA700152188 /* DanaGeneralSetUserOption.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaGeneralSetUserOption.swift; sourceTree = "<group>"; };
+		B8360ABE2B2A2D6C00152188 /* DanaHistoryAlarm.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaHistoryAlarm.swift; sourceTree = "<group>"; };
+		B8360AC02B2A2DA500152188 /* DanaHistoryAll.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaHistoryAll.swift; sourceTree = "<group>"; };
+		B8360AC22B2A2DCC00152188 /* DanaHistoryBasal.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaHistoryBasal.swift; sourceTree = "<group>"; };
+		B8360AC42B2A2DF100152188 /* DanaHistoryBase.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaHistoryBase.swift; sourceTree = "<group>"; };
+		B8360AC62B2A306F00152188 /* DanaHistoryBloodGlucose.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaHistoryBloodGlucose.swift; sourceTree = "<group>"; };
+		B8360AC82B2A311200152188 /* DanaHistoryBolus.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaHistoryBolus.swift; sourceTree = "<group>"; };
+		B8360ACA2B2A341B00152188 /* DanaHistoryCarbohydrates.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaHistoryCarbohydrates.swift; sourceTree = "<group>"; };
+		B8360ACC2B2A343200152188 /* DanaHistoryDaily.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaHistoryDaily.swift; sourceTree = "<group>"; };
+		B8360ACE2B2A344900152188 /* DanaHistoryPrime.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaHistoryPrime.swift; sourceTree = "<group>"; };
+		B8360AD02B2A346C00152188 /* DanaHistoryRefill.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaHistoryRefill.swift; sourceTree = "<group>"; };
+		B8360AD22B2A348100152188 /* DanaHistorySuspend.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaHistorySuspend.swift; sourceTree = "<group>"; };
+		B8360AD42B2A349400152188 /* DanaHistoryTemporary.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaHistoryTemporary.swift; sourceTree = "<group>"; };
+		B8360AD62B2A34E300152188 /* DanaLoopHistoryEvents.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaLoopHistoryEvents.swift; sourceTree = "<group>"; };
+		B8360AD82B2A354500152188 /* DanaLoopSetEventHistory.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaLoopSetEventHistory.swift; sourceTree = "<group>"; };
+		B8360ADA2B2A39DF00152188 /* DanaLoopSetTemporaryBasal.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaLoopSetTemporaryBasal.swift; sourceTree = "<group>"; };
+		B8360ADC2B2A3A1600152188 /* DanaNotifyDeliveryComplete.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaNotifyDeliveryComplete.swift; sourceTree = "<group>"; };
+		B8360ADE2B2A3C3B00152188 /* DanaNotifyAlarm.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = DanaNotifyAlarm.swift; sourceTree = "<group>"; };
+		B8360ADF2B2A3C3B00152188 /* DanaNotifyMissedBolus.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = DanaNotifyMissedBolus.swift; sourceTree = "<group>"; };
+		B8360AE02B2A3C3C00152188 /* DanaNotifyDeliveryRateDisplay.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = DanaNotifyDeliveryRateDisplay.swift; sourceTree = "<group>"; };
+		B8360AE52B2A3D9B00152188 /* GeneratePacketTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = GeneratePacketTests.swift; sourceTree = "<group>"; };
+		B8360AE82B2B954700152188 /* BluetoothManager.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = BluetoothManager.swift; sourceTree = "<group>"; };
+		B8360AEA2B2B95B000152188 /* EncryptionManager.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = EncryptionManager.swift; sourceTree = "<group>"; };
+		B83815C72B322B0800627125 /* DanaKitDebugViewModel.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaKitDebugViewModel.swift; sourceTree = "<group>"; };
+		B83815C92B34C8CA00627125 /* PeripheralManager.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = PeripheralManager.swift; sourceTree = "<group>"; };
+		B85335D72B55D3A900DB470A /* NumberFormatter.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = NumberFormatter.swift; sourceTree = "<group>"; };
+		B85335D92B58599300DB470A /* ReservoirView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ReservoirView.swift; sourceTree = "<group>"; };
+		B85335DB2B58658A00DB470A /* DanaKitSettingsPumpSpeed.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaKitSettingsPumpSpeed.swift; sourceTree = "<group>"; };
+		B85418A72B20F46200C3B4D0 /* Lookup.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Lookup.swift; sourceTree = "<group>"; };
+		B85418A92B20F52200C3B4D0 /* Common.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Common.swift; sourceTree = "<group>"; };
+		B85418AB2B20F6B700C3B4D0 /* CommonTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = CommonTests.swift; sourceTree = "<group>"; };
+		B85418AD2B20F6F800C3B4D0 /* Constants.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Constants.swift; sourceTree = "<group>"; };
+		B85418AF2B20F77900C3B4D0 /* Encrypt.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Encrypt.swift; sourceTree = "<group>"; };
+		B85418B22B20F92C00C3B4D0 /* DanaPacketType.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaPacketType.swift; sourceTree = "<group>"; };
+		B85418B42B20FBAD00C3B4D0 /* EncryptTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = EncryptTests.swift; sourceTree = "<group>"; };
+		B85418B62B21001000C3B4D0 /* Decryption.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Decryption.swift; sourceTree = "<group>"; };
+		B85418B82B21032600C3B4D0 /* DecryptionTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DecryptionTests.swift; sourceTree = "<group>"; };
+		B857E7F12B1FABF000BDFFC4 /* LocalizedString.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = LocalizedString.swift; sourceTree = "<group>"; };
+		B86326A62B683538005D8ECD /* DanaKitUserSettingsViewModel.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaKitUserSettingsViewModel.swift; sourceTree = "<group>"; };
+		B86326A82B68354D005D8ECD /* DanaKitUserSettingsView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaKitUserSettingsView.swift; sourceTree = "<group>"; };
+		B86326AB2B683E25005D8ECD /* PickerView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = PickerView.swift; sourceTree = "<group>"; };
+		B864F79F2B49E29700C503A2 /* DanaKitPumpSpeed.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaKitPumpSpeed.swift; sourceTree = "<group>"; };
+		B864F7A12B49EF3800C503A2 /* DanaKitSetupCompleteView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaKitSetupCompleteView.swift; sourceTree = "<group>"; };
+		B87115742B4DD0AC004B4A98 /* DanaKitPumpManagerError.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaKitPumpManagerError.swift; sourceTree = "<group>"; };
+		B87730962BB865B100D2C653 /* ActivityViewController.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ActivityViewController.swift; sourceTree = "<group>"; };
+		B87D571B2B20EEAF00FD82E9 /* Crc.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Crc.swift; sourceTree = "<group>"; };
+		B87D571E2B20EFE700FD82E9 /* CrcTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = CrcTests.swift; sourceTree = "<group>"; };
+		B87E6BA82B6053CD001B7FAD /* DanaKitDoseProgressReporter.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaKitDoseProgressReporter.swift; sourceTree = "<group>"; };
+		B87E6BAA2B605F5F001B7FAD /* UnfinalizedDose.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = UnfinalizedDose.swift; sourceTree = "<group>"; };
+		B88516862B2F74D60063402A /* DanaPacketParser.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaPacketParser.swift; sourceTree = "<group>"; };
+		B88516892B305D6E0063402A /* DanaKitPumpManager+UI.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "DanaKitPumpManager+UI.swift"; sourceTree = "<group>"; };
+		B885168B2B305E740063402A /* DanaKitUI.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = DanaKitUI.xcassets; sourceTree = "<group>"; };
+		B88516902B30638D0063402A /* DanaKitReservoirView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaKitReservoirView.swift; sourceTree = "<group>"; };
+		B88516922B30C6DA0063402A /* DanaKitReservoirView.xib */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = file.xib; path = DanaKitReservoirView.xib; sourceTree = "<group>"; };
+		B88516942B30C7170063402A /* NibLoadable.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = NibLoadable.swift; sourceTree = "<group>"; };
+		B88516962B30CA860063402A /* DanaKitHUDProvider.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaKitHUDProvider.swift; sourceTree = "<group>"; };
+		B88516982B30D6EC0063402A /* DanaUICoordinator.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaUICoordinator.swift; sourceTree = "<group>"; };
+		B885169A2B30D8140063402A /* DanaKitDebugView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaKitDebugView.swift; sourceTree = "<group>"; };
+		B8A0163E2B433E000054AECA /* InsulinTypeConfirmation.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = InsulinTypeConfirmation.swift; sourceTree = "<group>"; };
+		B8F4DCA32B94C06100AB00E6 /* Image.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = Image.swift; sourceTree = "<group>"; };
+		B8F4DCA52B94C0D800AB00E6 /* DanaIExplainationView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaIExplainationView.swift; sourceTree = "<group>"; };
+		B8F4DCA72B94C0E700AB00E6 /* DanaRSv3Explaination.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaRSv3Explaination.swift; sourceTree = "<group>"; };
+		B8F4DCA92B94C0F900AB00E6 /* DanaRSv1Explaination.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaRSv1Explaination.swift; sourceTree = "<group>"; };
+		B8F4DCAB2B94C10800AB00E6 /* DanaRSv1Password.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DanaRSv1Password.swift; sourceTree = "<group>"; };
+		B8F4DCAD2B94CF8100AB00E6 /* ContinueButton.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ContinueButton.swift; sourceTree = "<group>"; };
+		B8F4DCB12B97290800AB00E6 /* InsulinTypeView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = InsulinTypeView.swift; sourceTree = "<group>"; };
+		B8F4DCB32B9729E800AB00E6 /* BasalProfileView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = BasalProfileView.swift; sourceTree = "<group>"; };
+		B8F4DCB52B972AB400AB00E6 /* BasalProfileViewModel.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = BasalProfileViewModel.swift; sourceTree = "<group>"; };
+		B8F4E1A72B83D28A000F4AE1 /* BackgroundTask.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = BackgroundTask.swift; sourceTree = "<group>"; };
+		B8F4E1A92B83D4F1000F4AE1 /* blank.wav */ = {isa = PBXFileReference; lastKnownFileType = audio.wav; path = blank.wav; sourceTree = "<group>"; };
+		B8FB5F142B5D705D001C88BA /* DoseEntry.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = DoseEntry.swift; sourceTree = "<group>"; };
+		B8FB5F162B5D91A6001C88BA /* NewPumpEvent.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = NewPumpEvent.swift; sourceTree = "<group>"; };
+		B8FDA0DD2B77D037007004A5 /* PumpManagerAlert.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = PumpManagerAlert.swift; sourceTree = "<group>"; };
+		B8FF96192B4305A300C14280 /* NavigationLink.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = NavigationLink.swift; sourceTree = "<group>"; };
+		C10D6D6D27A2395700F53D58 /* DanaKitPlugin.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = DanaKitPlugin.swift; sourceTree = "<group>"; };
+		C13F70D42AE58C76002A292B /* nb */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = nb; path = Localization/nb.lproj/Localizable.strings; sourceTree = "<group>"; };
+		C17C23AA2AE58C87003AD249 /* nl */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = nl; path = Localization/nl.lproj/Localizable.strings; sourceTree = "<group>"; };
+		C17E22892AE58C5500CFDE99 /* it */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = it; path = Localization/it.lproj/Localizable.strings; sourceTree = "<group>"; };
+		C187C197279086A8006E3557 /* DanaKitPlugin.loopplugin */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = DanaKitPlugin.loopplugin; sourceTree = BUILT_PRODUCTS_DIR; };
+		C187C199279086A8006E3557 /* DanaKitPlugin.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = DanaKitPlugin.h; sourceTree = "<group>"; };
+		C187C1A2279087A4006E3557 /* OSLog.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = OSLog.swift; sourceTree = "<group>"; };
+		C187C1A427908B1C006E3557 /* Info.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
+		C18DAD612AE58BDD00FAB288 /* de */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = de; path = Localization/de.lproj/Localizable.strings; sourceTree = "<group>"; };
+		C1C001C027A2349D00533D35 /* DanaKit.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = DanaKit.swift; sourceTree = "<group>"; };
+		C1FC36162AE58CCE00AC033A /* ru */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = ru; path = Localization/ru.lproj/Localizable.strings; sourceTree = "<group>"; };
+		C1FD685F2AE58C9A003DDFFD /* pl */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = pl; path = Localization/pl.lproj/Localizable.strings; sourceTree = "<group>"; };
+/* End PBXFileReference section */
+
+/* Begin PBXFrameworksBuildPhase section */
+		84752E7F26ED0FFE009FD801 /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				847530F626ED65DD009FD801 /* LoopKit.framework in Frameworks */,
+				847530F826ED65DD009FD801 /* LoopKitUI.framework in Frameworks */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+		84752E8826ED0FFE009FD801 /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+		C187C194279086A8006E3557 /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				C1D27A1527908DC600C41EBA /* DanaKit.framework in Frameworks */,
+				B87730982BB8683D00D2C653 /* DanaKit.framework in Frameworks */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXFrameworksBuildPhase section */
+
+/* Begin PBXGroup section */
+		84752E7826ED0FFE009FD801 = {
+			isa = PBXGroup;
+			children = (
+				C18DAD602AE58BDD00FAB288 /* Localizable.strings */,
+				A91B2DEB276E1E5E001B0E95 /* README.md */,
+				84752EE926ED1402009FD801 /* Common */,
+				84752E8426ED0FFE009FD801 /* DanaKit */,
+				B88516882B305D3F0063402A /* DanaKitUI */,
+				84752E8F26ED0FFE009FD801 /* DanaKitTests */,
+				C187C198279086A8006E3557 /* DanaKitPlugin */,
+				84752E8326ED0FFE009FD801 /* Products */,
+				84752E9C26ED10A0009FD801 /* Frameworks */,
+			);
+			sourceTree = "<group>";
+		};
+		84752E8326ED0FFE009FD801 /* Products */ = {
+			isa = PBXGroup;
+			children = (
+				84752E8226ED0FFE009FD801 /* DanaKit.framework */,
+				84752E8B26ED0FFE009FD801 /* DanaKitTests.xctest */,
+				C187C197279086A8006E3557 /* DanaKitPlugin.loopplugin */,
+			);
+			name = Products;
+			sourceTree = "<group>";
+		};
+		84752E8426ED0FFE009FD801 /* DanaKit */ = {
+			isa = PBXGroup;
+			children = (
+				B85418B12B20F90200C3B4D0 /* Packets */,
+				B87D571A2B20EEA300FD82E9 /* Encryption */,
+				84752EAD26ED11A4009FD801 /* PumpManager */,
+				84752E8526ED0FFE009FD801 /* DanaKit.h */,
+				84752E8626ED0FFE009FD801 /* Info.plist */,
+			);
+			path = DanaKit;
+			sourceTree = "<group>";
+		};
+		84752E8F26ED0FFE009FD801 /* DanaKitTests */ = {
+			isa = PBXGroup;
+			children = (
+				B87D571D2B20EFCF00FD82E9 /* Encryption */,
+				84752E9226ED0FFE009FD801 /* Info.plist */,
+				B85418AD2B20F6F800C3B4D0 /* Constants.swift */,
+				B8360AE52B2A3D9B00152188 /* GeneratePacketTests.swift */,
+			);
+			path = DanaKitTests;
+			sourceTree = "<group>";
+		};
+		84752E9C26ED10A0009FD801 /* Frameworks */ = {
+			isa = PBXGroup;
+			children = (
+				847530F426ED65DD009FD801 /* LoopKit.framework */,
+				847530F526ED65DD009FD801 /* LoopKitUI.framework */,
+			);
+			name = Frameworks;
+			sourceTree = "<group>";
+		};
+		84752EAD26ED11A4009FD801 /* PumpManager */ = {
+			isa = PBXGroup;
+			children = (
+				C1C001C027A2349D00533D35 /* DanaKit.swift */,
+				1029AE4627094D0E00B7F5B6 /* DanaKitPumpManager.swift */,
+				1029AE4727094D0E00B7F5B6 /* DanaKitPumpManagerState.swift */,
+				B8360AE82B2B954700152188 /* BluetoothManager.swift */,
+				B83815C92B34C8CA00627125 /* PeripheralManager.swift */,
+				B87115742B4DD0AC004B4A98 /* DanaKitPumpManagerError.swift */,
+				B87E6BA82B6053CD001B7FAD /* DanaKitDoseProgressReporter.swift */,
+				B8FDA0DD2B77D037007004A5 /* PumpManagerAlert.swift */,
+			);
+			path = PumpManager;
+			sourceTree = "<group>";
+		};
+		84752EE926ED1402009FD801 /* Common */ = {
+			isa = PBXGroup;
+			children = (
+				B62557422BF65396006C4517 /* Bundle.swift */,
+				B857E7F12B1FABF000BDFFC4 /* LocalizedString.swift */,
+				B8179E592B20F2A10049EEE7 /* OSLog.swift */,
+				B81C52232B30E95E00FB801D /* IdentifiableClass.swift */,
+				B8360A8A2B2641C200152188 /* Data.swift */,
+				B88516942B30C7170063402A /* NibLoadable.swift */,
+				B8FF96192B4305A300C14280 /* NavigationLink.swift */,
+				B85335D72B55D3A900DB470A /* NumberFormatter.swift */,
+				B8FB5F142B5D705D001C88BA /* DoseEntry.swift */,
+				B8FB5F162B5D91A6001C88BA /* NewPumpEvent.swift */,
+				B87E6BAA2B605F5F001B7FAD /* UnfinalizedDose.swift */,
+				B81E9D042B66906000AB6AA1 /* PumpAlarmType.swift */,
+				B80C73D52B7D534300821A38 /* TimeInterval.swift */,
+				B8F4E1A72B83D28A000F4AE1 /* BackgroundTask.swift */,
+			);
+			path = Common;
+			sourceTree = "<group>";
+		};
+		B85418B12B20F90200C3B4D0 /* Packets */ = {
+			isa = PBXGroup;
+			children = (
+				B85418B22B20F92C00C3B4D0 /* DanaPacketType.swift */,
+				B8360A6F2B26011200152188 /* DanaPacketBase.swift */,
+				B8360A712B2601D600152188 /* DanaBasalCancelTemporary.swift */,
+				B8360A732B26037100152188 /* DanaBasalGetProfileNumber.swift */,
+				B8360A752B263BE700152188 /* DanaBasalGetRate.swift */,
+				B8360A772B263C8900152188 /* DanaBasalSetProfileNumber.swift */,
+				B8360A792B263CD400152188 /* DanaBasalSetProfileRate.swift */,
+				B8360A7B2B263E0F00152188 /* DanaBasalSetSuspendOff.swift */,
+				B8360A7D2B263E5500152188 /* DanaBasalSetSuspendOn.swift */,
+				B8360A7F2B263EA200152188 /* DanaBasalSetTemporary.swift */,
+				B8360A812B263ED700152188 /* DanaBolusCancelExtended.swift */,
+				B8360A832B263F1700152188 /* DanaBolusGet24CIRCFArray.swift */,
+				B8360A852B26402700152188 /* DanaBolusGetCalculationInformation.swift */,
+				B8360A872B26415700152188 /* DanaBolusGetCIRCFArray.swift */,
+				B8360A8C2B2642FE00152188 /* DanaBolusGetOption.swift */,
+				B8360A8E2B26435900152188 /* DanaBolusGetStepInformation.swift */,
+				B8360A902B2643C900152188 /* DanaBolusSet24CIRCFArray.swift */,
+				B8360A922B2644A800152188 /* DanaBolusSetExtended.swift */,
+				B8360A942B2644D300152188 /* DanaBolusSetOption.swift */,
+				B8360A962B26452B00152188 /* DanaBolusStart.swift */,
+				B8360A982B26456600152188 /* DanaBolusStop.swift */,
+				B8360A9C2B2646A100152188 /* DanaGeneralAvgBolus.swift */,
+				B8360A9E2B2A26C700152188 /* DanaGeneralClearUserTimeChangeFlag.swift */,
+				B8360AA02B2A26EB00152188 /* DanaGeneralGetInitialScreenInformation.swift */,
+				B8360AA22B2A275400152188 /* DanaGeneralGetPumpCheck.swift */,
+				B8360AA42B2A281700152188 /* DanaGeneralGetPumpDecRatio.swift */,
+				B8360AA62B2A289A00152188 /* DanaGeneralGetPumpTime.swift */,
+				B8360AA82B2A28CE00152188 /* DanaGeneralGetPumpTimeUtcWithTimezone.swift */,
+				B8360AAA2B2A290900152188 /* DanaGeneralGetShippingInformation.swift */,
+				B8360AAC2B2A294400152188 /* DanaGeneralGetShippingVersion.swift */,
+				B8360AAE2B2A298200152188 /* DanaGeneralGetUserOption.swift */,
+				B8360AB02B2A2A1900152188 /* DanaGeneralGetUserTimeChangeFlag.swift */,
+				B8360AB22B2A2A6A00152188 /* DanaGeneralKeepConnection.swift */,
+				B8360AB42B2A2A9800152188 /* DanaGeneralSaveHistory.swift */,
+				B8360AB62B2A2BA200152188 /* DanaGeneralSetHistoryUploadMode.swift */,
+				B8360AB82B2A2C3C00152188 /* DanaGeneralSetPumpTime.swift */,
+				B8360ABA2B2A2C7300152188 /* DanaGeneralSetPumpTimeUtcWithTimezone.swift */,
+				B8360ABC2B2A2CA700152188 /* DanaGeneralSetUserOption.swift */,
+				B8360ABE2B2A2D6C00152188 /* DanaHistoryAlarm.swift */,
+				B8360AC02B2A2DA500152188 /* DanaHistoryAll.swift */,
+				B8360AC22B2A2DCC00152188 /* DanaHistoryBasal.swift */,
+				B8360AC42B2A2DF100152188 /* DanaHistoryBase.swift */,
+				B8360AC62B2A306F00152188 /* DanaHistoryBloodGlucose.swift */,
+				B8360AC82B2A311200152188 /* DanaHistoryBolus.swift */,
+				B8360ACA2B2A341B00152188 /* DanaHistoryCarbohydrates.swift */,
+				B8360ACC2B2A343200152188 /* DanaHistoryDaily.swift */,
+				B8360ACE2B2A344900152188 /* DanaHistoryPrime.swift */,
+				B8360AD02B2A346C00152188 /* DanaHistoryRefill.swift */,
+				B8360AD22B2A348100152188 /* DanaHistorySuspend.swift */,
+				B8360AD42B2A349400152188 /* DanaHistoryTemporary.swift */,
+				B8360AD62B2A34E300152188 /* DanaLoopHistoryEvents.swift */,
+				B8360AD82B2A354500152188 /* DanaLoopSetEventHistory.swift */,
+				B8360ADA2B2A39DF00152188 /* DanaLoopSetTemporaryBasal.swift */,
+				B8360ADC2B2A3A1600152188 /* DanaNotifyDeliveryComplete.swift */,
+				B8360ADE2B2A3C3B00152188 /* DanaNotifyAlarm.swift */,
+				B8360AE02B2A3C3C00152188 /* DanaNotifyDeliveryRateDisplay.swift */,
+				B8360ADF2B2A3C3B00152188 /* DanaNotifyMissedBolus.swift */,
+				B88516862B2F74D60063402A /* DanaPacketParser.swift */,
+			);
+			path = Packets;
+			sourceTree = "<group>";
+		};
+		B87D571A2B20EEA300FD82E9 /* Encryption */ = {
+			isa = PBXGroup;
+			children = (
+				B87D571B2B20EEAF00FD82E9 /* Crc.swift */,
+				B85418A72B20F46200C3B4D0 /* Lookup.swift */,
+				B85418A92B20F52200C3B4D0 /* Common.swift */,
+				B85418AF2B20F77900C3B4D0 /* Encrypt.swift */,
+				B85418B62B21001000C3B4D0 /* Decryption.swift */,
+				B8360AEA2B2B95B000152188 /* EncryptionManager.swift */,
+			);
+			path = Encryption;
+			sourceTree = "<group>";
+		};
+		B87D571D2B20EFCF00FD82E9 /* Encryption */ = {
+			isa = PBXGroup;
+			children = (
+				B87D571E2B20EFE700FD82E9 /* CrcTests.swift */,
+				B85418AB2B20F6B700C3B4D0 /* CommonTests.swift */,
+				B85418B42B20FBAD00C3B4D0 /* EncryptTests.swift */,
+				B85418B82B21032600C3B4D0 /* DecryptionTests.swift */,
+			);
+			path = Encryption;
+			sourceTree = "<group>";
+		};
+		B88516882B305D3F0063402A /* DanaKitUI */ = {
+			isa = PBXGroup;
+			children = (
+				B885168F2B3062FE0063402A /* ViewModels */,
+				B885168E2B3062F00063402A /* ViewController */,
+				B885168D2B3060560063402A /* Views */,
+				B88516892B305D6E0063402A /* DanaKitPumpManager+UI.swift */,
+				B885168B2B305E740063402A /* DanaKitUI.xcassets */,
+				B8F4E1A92B83D4F1000F4AE1 /* blank.wav */,
+				B88516962B30CA860063402A /* DanaKitHUDProvider.swift */,
+			);
+			path = DanaKitUI;
+			sourceTree = "<group>";
+		};
+		B885168D2B3060560063402A /* Views */ = {
+			isa = PBXGroup;
+			children = (
+				B8F4DCA22B94C02500AB00E6 /* Settings */,
+				B8F4DCA12B94C01C00AB00E6 /* Onboarding */,
+				B88516902B30638D0063402A /* DanaKitReservoirView.swift */,
+				B88516922B30C6DA0063402A /* DanaKitReservoirView.xib */,
+				B80EC4AD2B45EFDD005E2A1A /* LoadingModal.swift */,
+				B85335D92B58599300DB470A /* ReservoirView.swift */,
+				B8F4DCA32B94C06100AB00E6 /* Image.swift */,
+				B8F4DCAD2B94CF8100AB00E6 /* ContinueButton.swift */,
+			);
+			path = Views;
+			sourceTree = "<group>";
+		};
+		B885168E2B3062F00063402A /* ViewController */ = {
+			isa = PBXGroup;
+			children = (
+				B88516982B30D6EC0063402A /* DanaUICoordinator.swift */,
+				B87730962BB865B100D2C653 /* ActivityViewController.swift */,
+			);
+			path = ViewController;
+			sourceTree = "<group>";
+		};
+		B885168F2B3062FE0063402A /* ViewModels */ = {
+			isa = PBXGroup;
+			children = (
+				B83815C72B322B0800627125 /* DanaKitDebugViewModel.swift */,
+				B82FA9462B3DF85F004F2AFE /* DanaKitScanViewModel.swift */,
+				B80EC4B12B45F681005E2A1A /* DanaKitSettingsViewModel.swift */,
+				B86326A62B683538005D8ECD /* DanaKitUserSettingsViewModel.swift */,
+				B8F4DCB52B972AB400AB00E6 /* BasalProfileViewModel.swift */,
+			);
+			path = ViewModels;
+			sourceTree = "<group>";
+		};
+		B8F4DCA12B94C01C00AB00E6 /* Onboarding */ = {
+			isa = PBXGroup;
+			children = (
+				B885169A2B30D8140063402A /* DanaKitDebugView.swift */,
+				B8313D262B3B162900A0F64D /* DanaKitSetupView.swift */,
+				B82FA9442B3DF3AD004F2AFE /* DanaKitScanView.swift */,
+				B8A0163E2B433E000054AECA /* InsulinTypeConfirmation.swift */,
+				B864F79F2B49E29700C503A2 /* DanaKitPumpSpeed.swift */,
+				B864F7A12B49EF3800C503A2 /* DanaKitSetupCompleteView.swift */,
+				B8F4DCA52B94C0D800AB00E6 /* DanaIExplainationView.swift */,
+				B8F4DCA72B94C0E700AB00E6 /* DanaRSv3Explaination.swift */,
+				B8F4DCA92B94C0F900AB00E6 /* DanaRSv1Explaination.swift */,
+				B8F4DCAB2B94C10800AB00E6 /* DanaRSv1Password.swift */,
+			);
+			path = Onboarding;
+			sourceTree = "<group>";
+		};
+		B8F4DCA22B94C02500AB00E6 /* Settings */ = {
+			isa = PBXGroup;
+			children = (
+				B80EC4AF2B45F66E005E2A1A /* DanaKitSettingsView.swift */,
+				B85335DB2B58658A00DB470A /* DanaKitSettingsPumpSpeed.swift */,
+				B86326A82B68354D005D8ECD /* DanaKitUserSettingsView.swift */,
+				B86326AB2B683E25005D8ECD /* PickerView.swift */,
+				B8F4DCB12B97290800AB00E6 /* InsulinTypeView.swift */,
+				B8F4DCB32B9729E800AB00E6 /* BasalProfileView.swift */,
+			);
+			path = Settings;
+			sourceTree = "<group>";
+		};
+		C187C198279086A8006E3557 /* DanaKitPlugin */ = {
+			isa = PBXGroup;
+			children = (
+				C10D6D6D27A2395700F53D58 /* DanaKitPlugin.swift */,
+				C187C1A427908B1C006E3557 /* Info.plist */,
+				C187C1A127908795006E3557 /* Extensions */,
+				C187C199279086A8006E3557 /* DanaKitPlugin.h */,
+			);
+			path = DanaKitPlugin;
+			sourceTree = "<group>";
+		};
+		C187C1A127908795006E3557 /* Extensions */ = {
+			isa = PBXGroup;
+			children = (
+				C187C1A2279087A4006E3557 /* OSLog.swift */,
+			);
+			path = Extensions;
+			sourceTree = "<group>";
+		};
+/* End PBXGroup section */
+
+/* Begin PBXHeadersBuildPhase section */
+		84752E7D26ED0FFE009FD801 /* Headers */ = {
+			isa = PBXHeadersBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				84752E9326ED0FFE009FD801 /* DanaKit.h in Headers */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+		C187C192279086A8006E3557 /* Headers */ = {
+			isa = PBXHeadersBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				C187C19A279086A8006E3557 /* DanaKitPlugin.h in Headers */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXHeadersBuildPhase section */
+
+/* Begin PBXNativeTarget section */
+		84752E8126ED0FFE009FD801 /* DanaKit */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = 84752E9626ED0FFE009FD801 /* Build configuration list for PBXNativeTarget "DanaKit" */;
+			buildPhases = (
+				84752E7D26ED0FFE009FD801 /* Headers */,
+				84752E7E26ED0FFE009FD801 /* Sources */,
+				84752E7F26ED0FFE009FD801 /* Frameworks */,
+				84752E8026ED0FFE009FD801 /* Resources */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+			);
+			name = DanaKit;
+			packageProductDependencies = (
+			);
+			productName = DanaKit;
+			productReference = 84752E8226ED0FFE009FD801 /* DanaKit.framework */;
+			productType = "com.apple.product-type.framework";
+		};
+		84762E9F26ED0FFE009FD801 /* DanaKitTests */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = 84762E9926ED0FFE009FD801 /* Build configuration list for PBXNativeTarget "DanaKitTests" */;
+			buildPhases = (
+				84752E8726ED0FFE009FD801 /* Sources */,
+				84752E8826ED0FFE009FD801 /* Frameworks */,
+				84752E8926ED0FFE009FD801 /* Resources */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+				84752E8E26ED0FFE009FD801 /* PBXTargetDependency */,
+			);
+			name = DanaKitTests;
+			productName = DanaKitTests;
+			productReference = 84752E8B26ED0FFE009FD801 /* DanaKitTests.xctest */;
+			productType = "com.apple.product-type.bundle.unit-test";
+		};
+		C187C166279086A8006E3557 /* DanaKitPlugin */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = C187C19B279086A8006E3557 /* Build configuration list for PBXNativeTarget "DanaKitPlugin" */;
+			buildPhases = (
+				C187C192279086A8006E3557 /* Headers */,
+				C187C193279086A8006E3557 /* Sources */,
+				C187C194279086A8006E3557 /* Frameworks */,
+				C187C195279086A8006E3557 /* Resources */,
+				C1D27A1627908DCF00C41EBA /* CopyFiles */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+				C187C1A0279086FF006E3557 /* PBXTargetDependency */,
+				B877309A2BB8683D00D2C653 /* PBXTargetDependency */,
+			);
+			name = DanaKitPlugin;
+			productName = DanaKitPlugin;
+			productReference = C187C197279086A8006E3557 /* DanaKitPlugin.loopplugin */;
+			productType = "com.apple.product-type.framework";
+		};
+/* End PBXNativeTarget section */
+
+/* Begin PBXProject section */
+		84752E7926ED0FFE009FD801 /* Project object */ = {
+			isa = PBXProject;
+			attributes = {
+				BuildIndependentTargetsInParallel = YES;
+				LastSwiftUpdateCheck = 1430;
+				LastUpgradeCheck = 1430;
+				ORGANIZATIONNAME = "Randall Knutson";
+				TargetAttributes = {
+					84752E8126ED0FFE009FD801 = {
+						CreatedOnToolsVersion = 12.5.1;
+					};
+					84762E9F26ED0FFE009FD801 = {
+						CreatedOnToolsVersion = 12.5.1;
+						LastSwiftMigration = 1500;
+					};
+					C187C166279086A8006E3557 = {
+						CreatedOnToolsVersion = 13.2.1;
+					};
+				};
+			};
+			buildConfigurationList = 84752E7C26ED0FFE009FD801 /* Build configuration list for PBXProject "DanaKit" */;
+			compatibilityVersion = "Xcode 13.0";
+			developmentRegion = en;
+			hasScannedForEncodings = 0;
+			knownRegions = (
+				en,
+				Base,
+				de,
+				"zh-Hans",
+				ja,
+				nb,
+				es,
+				da,
+				it,
+				sv,
+				pl,
+				"pt-BR",
+				vi,
+				ru,
+				fr,
+				fi,
+				nl,
+				ro,
+				he,
+				tr,
+				ar,
+				cs,
+				hi,
+				sk,
+			);
+			mainGroup = 84752E7826ED0FFE009FD801;
+			packageReferences = (
+				8475306C26ED15DE009FD801 /* XCRemoteSwiftPackageReference "CryptoSwift" */,
+				2742C7032AD875B100E67833 /* XCRemoteSwiftPackageReference "SlideButton" */,
+			);
+			productRefGroup = 84752E8326ED0FFE009FD801 /* Products */;
+			projectDirPath = "";
+			projectRoot = "";
+			targets = (
+				84752E8126ED0FFE009FD801 /* DanaKit */,
+				84762E9F26ED0FFE009FD801 /* DanaKitTests */,
+				C187C166279086A8006E3557 /* DanaKitPlugin */,
+			);
+		};
+/* End PBXProject section */
+
+/* Begin PBXResourcesBuildPhase section */
+		84752E8026ED0FFE009FD801 /* Resources */ = {
+			isa = PBXResourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				A91B2DEC276E1E5E001B0E95 /* README.md in Resources */,
+				B8F4E1AA2B83D4F1000F4AE1 /* blank.wav in Resources */,
+				B88516932B30C6DA0063402A /* DanaKitReservoirView.xib in Resources */,
+				B871156F2B4C8419004B4A98 /* DanaKitUI.xcassets in Resources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+		84752E8926ED0FFE009FD801 /* Resources */ = {
+			isa = PBXResourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+		C187C195279086A8006E3557 /* Resources */ = {
+			isa = PBXResourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXResourcesBuildPhase section */
+
+/* Begin PBXSourcesBuildPhase section */
+		84752E7E26ED0FFE009FD801 /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				B8360AD52B2A349400152188 /* DanaHistoryTemporary.swift in Sources */,
+				B82FA9472B3DF85F004F2AFE /* DanaKitScanViewModel.swift in Sources */,
+				B8360AE32B2A3C3C00152188 /* DanaNotifyDeliveryRateDisplay.swift in Sources */,
+				B87730972BB865B100D2C653 /* ActivityViewController.swift in Sources */,
+				B87115752B4DD0AC004B4A98 /* DanaKitPumpManagerError.swift in Sources */,
+				B85418AA2B20F52200C3B4D0 /* Common.swift in Sources */,
+				B8360AB32B2A2A6A00152188 /* DanaGeneralKeepConnection.swift in Sources */,
+				B85335DC2B58658A00DB470A /* DanaKitSettingsPumpSpeed.swift in Sources */,
+				B8360A952B2644D300152188 /* DanaBolusSetOption.swift in Sources */,
+				B885168A2B305D6E0063402A /* DanaKitPumpManager+UI.swift in Sources */,
+				B8F4DCAA2B94C0F900AB00E6 /* DanaRSv1Explaination.swift in Sources */,
+				B8360AD12B2A346C00152188 /* DanaHistoryRefill.swift in Sources */,
+				B8A0163F2B433E000054AECA /* InsulinTypeConfirmation.swift in Sources */,
+				B8360AB92B2A2C3C00152188 /* DanaGeneralSetPumpTime.swift in Sources */,
+				B8FF961A2B4305A300C14280 /* NavigationLink.swift in Sources */,
+				B8F4DCB62B972AB400AB00E6 /* BasalProfileViewModel.swift in Sources */,
+				B8360A932B2644A800152188 /* DanaBolusSetExtended.swift in Sources */,
+				B8360AD72B2A34E300152188 /* DanaLoopHistoryEvents.swift in Sources */,
+				B82FA9452B3DF3AD004F2AFE /* DanaKitScanView.swift in Sources */,
+				B8360ABD2B2A2CA700152188 /* DanaGeneralSetUserOption.swift in Sources */,
+				B8360A7E2B263E5500152188 /* DanaBasalSetSuspendOn.swift in Sources */,
+				B864F7A02B49E29700C503A2 /* DanaKitPumpSpeed.swift in Sources */,
+				B81E9D052B66906000AB6AA1 /* PumpAlarmType.swift in Sources */,
+				B8360AA92B2A28CE00152188 /* DanaGeneralGetPumpTimeUtcWithTimezone.swift in Sources */,
+				B8360A912B2643C900152188 /* DanaBolusSet24CIRCFArray.swift in Sources */,
+				B80EC4B22B45F681005E2A1A /* DanaKitSettingsViewModel.swift in Sources */,
+				B80EC4AE2B45EFDD005E2A1A /* LoadingModal.swift in Sources */,
+				B81C52242B30E95E00FB801D /* IdentifiableClass.swift in Sources */,
+				B8360ABB2B2A2C7300152188 /* DanaGeneralSetPumpTimeUtcWithTimezone.swift in Sources */,
+				B8360ACB2B2A341B00152188 /* DanaHistoryCarbohydrates.swift in Sources */,
+				B8360A972B26452B00152188 /* DanaBolusStart.swift in Sources */,
+				B8360AA32B2A275400152188 /* DanaGeneralGetPumpCheck.swift in Sources */,
+				B85418B32B20F92C00C3B4D0 /* DanaPacketType.swift in Sources */,
+				B8360AA72B2A289A00152188 /* DanaGeneralGetPumpTime.swift in Sources */,
+				B88516872B2F74D60063402A /* DanaPacketParser.swift in Sources */,
+				B8360AC32B2A2DCC00152188 /* DanaHistoryBasal.swift in Sources */,
+				B8313D272B3B162900A0F64D /* DanaKitSetupView.swift in Sources */,
+				B8F4DCAC2B94C10800AB00E6 /* DanaRSv1Password.swift in Sources */,
+				B8360AAD2B2A294400152188 /* DanaGeneralGetShippingVersion.swift in Sources */,
+				B8F4DCA82B94C0E700AB00E6 /* DanaRSv3Explaination.swift in Sources */,
+				B85418B72B21001000C3B4D0 /* Decryption.swift in Sources */,
+				B87E6BAB2B605F5F001B7FAD /* UnfinalizedDose.swift in Sources */,
+				B83815CA2B34C8CA00627125 /* PeripheralManager.swift in Sources */,
+				B8360A862B26402700152188 /* DanaBolusGetCalculationInformation.swift in Sources */,
+				B8360AC72B2A306F00152188 /* DanaHistoryBloodGlucose.swift in Sources */,
+				B8360A842B263F1700152188 /* DanaBolusGet24CIRCFArray.swift in Sources */,
+				B8360AD92B2A354500152188 /* DanaLoopSetEventHistory.swift in Sources */,
+				B8360A8B2B2641C200152188 /* Data.swift in Sources */,
+				B8360ADB2B2A39DF00152188 /* DanaLoopSetTemporaryBasal.swift in Sources */,
+				B8360AB72B2A2BA200152188 /* DanaGeneralSetHistoryUploadMode.swift in Sources */,
+				B8F4DCAE2B94CF8100AB00E6 /* ContinueButton.swift in Sources */,
+				B8360ACD2B2A343200152188 /* DanaHistoryDaily.swift in Sources */,
+				B88516992B30D6EC0063402A /* DanaUICoordinator.swift in Sources */,
+				B8360A882B26415700152188 /* DanaBolusGetCIRCFArray.swift in Sources */,
+				B86326A72B683538005D8ECD /* DanaKitUserSettingsViewModel.swift in Sources */,
+				B87E6BA92B6053CD001B7FAD /* DanaKitDoseProgressReporter.swift in Sources */,
+				B8360A9F2B2A26C700152188 /* DanaGeneralClearUserTimeChangeFlag.swift in Sources */,
+				B8360A802B263EA200152188 /* DanaBasalSetTemporary.swift in Sources */,
+				B8360A992B26456600152188 /* DanaBolusStop.swift in Sources */,
+				B8360AE92B2B954700152188 /* BluetoothManager.swift in Sources */,
+				B86326A92B68354D005D8ECD /* DanaKitUserSettingsView.swift in Sources */,
+				B8360AA52B2A281700152188 /* DanaGeneralGetPumpDecRatio.swift in Sources */,
+				B8360AB12B2A2A1900152188 /* DanaGeneralGetUserTimeChangeFlag.swift in Sources */,
+				B8360AC12B2A2DA600152188 /* DanaHistoryAll.swift in Sources */,
+				B8360AE22B2A3C3C00152188 /* DanaNotifyMissedBolus.swift in Sources */,
+				B62557432BF65396006C4517 /* Bundle.swift in Sources */,
+				B8F4DCB22B97290800AB00E6 /* InsulinTypeView.swift in Sources */,
+				B8360ADD2B2A3A1600152188 /* DanaNotifyDeliveryComplete.swift in Sources */,
+				B8360A7C2B263E0F00152188 /* DanaBasalSetSuspendOff.swift in Sources */,
+				B8360A762B263BE700152188 /* DanaBasalGetRate.swift in Sources */,
+				B8360A8D2B2642FE00152188 /* DanaBolusGetOption.swift in Sources */,
+				B8360ACF2B2A344900152188 /* DanaHistoryPrime.swift in Sources */,
+				B8360A742B26037100152188 /* DanaBasalGetProfileNumber.swift in Sources */,
+				B85418A82B20F46200C3B4D0 /* Lookup.swift in Sources */,
+				B8360AB52B2A2A9800152188 /* DanaGeneralSaveHistory.swift in Sources */,
+				B87D571C2B20EEAF00FD82E9 /* Crc.swift in Sources */,
+				B8360A782B263C8900152188 /* DanaBasalSetProfileNumber.swift in Sources */,
+				B88516972B30CA860063402A /* DanaKitHUDProvider.swift in Sources */,
+				B8F4DCB42B9729E800AB00E6 /* BasalProfileView.swift in Sources */,
+				B88516952B30C7170063402A /* NibLoadable.swift in Sources */,
+				B88516912B30638D0063402A /* DanaKitReservoirView.swift in Sources */,
+				B8360A722B2601D600152188 /* DanaBasalCancelTemporary.swift in Sources */,
+				B8F4E1A82B83D28A000F4AE1 /* BackgroundTask.swift in Sources */,
+				B8F4DCA62B94C0D800AB00E6 /* DanaIExplainationView.swift in Sources */,
+				B85418B02B20F77900C3B4D0 /* Encrypt.swift in Sources */,
+				B8360A7A2B263CD400152188 /* DanaBasalSetProfileRate.swift in Sources */,
+				B8FDA0DE2B77D037007004A5 /* PumpManagerAlert.swift in Sources */,
+				B8FB5F172B5D91A6001C88BA /* NewPumpEvent.swift in Sources */,
+				B8FB5F152B5D705D001C88BA /* DoseEntry.swift in Sources */,
+				B85335D82B55D3A900DB470A /* NumberFormatter.swift in Sources */,
+				B8360A822B263ED700152188 /* DanaBolusCancelExtended.swift in Sources */,
+				B8360AA12B2A26EB00152188 /* DanaGeneralGetInitialScreenInformation.swift in Sources */,
+				B86326AC2B683E25005D8ECD /* PickerView.swift in Sources */,
+				B864F7A22B49EF3800C503A2 /* DanaKitSetupCompleteView.swift in Sources */,
+				B8360A9D2B2646A100152188 /* DanaGeneralAvgBolus.swift in Sources */,
+				B8F4DCA42B94C06100AB00E6 /* Image.swift in Sources */,
+				B885169B2B30D8140063402A /* DanaKitDebugView.swift in Sources */,
+				B80EC4B02B45F66E005E2A1A /* DanaKitSettingsView.swift in Sources */,
+				B8360AD32B2A348100152188 /* DanaHistorySuspend.swift in Sources */,
+				B8360AAF2B2A298200152188 /* DanaGeneralGetUserOption.swift in Sources */,
+				B8360A702B26011200152188 /* DanaPacketBase.swift in Sources */,
+				B8360AEB2B2B95B000152188 /* EncryptionManager.swift in Sources */,
+				B80C73D62B7D534300821A38 /* TimeInterval.swift in Sources */,
+				1029AE4927094D0E00B7F5B6 /* DanaKitPumpManagerState.swift in Sources */,
+				B857E7F22B1FABF000BDFFC4 /* LocalizedString.swift in Sources */,
+				B8179E5A2B20F2A10049EEE7 /* OSLog.swift in Sources */,
+				B8360AC92B2A311200152188 /* DanaHistoryBolus.swift in Sources */,
+				B8360AAB2B2A290900152188 /* DanaGeneralGetShippingInformation.swift in Sources */,
+				B8360AE12B2A3C3C00152188 /* DanaNotifyAlarm.swift in Sources */,
+				B8360ABF2B2A2D6C00152188 /* DanaHistoryAlarm.swift in Sources */,
+				C1C001C127A2349D00533D35 /* DanaKit.swift in Sources */,
+				B83815C82B322B0800627125 /* DanaKitDebugViewModel.swift in Sources */,
+				B8360AC52B2A2DF100152188 /* DanaHistoryBase.swift in Sources */,
+				1029AE4827094D0E00B7F5B6 /* DanaKitPumpManager.swift in Sources */,
+				B85335DA2B58599400DB470A /* ReservoirView.swift in Sources */,
+				B8360A8F2B26435900152188 /* DanaBolusGetStepInformation.swift in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+		84752E8726ED0FFE009FD801 /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				B85418B92B21032600C3B4D0 /* DecryptionTests.swift in Sources */,
+				B85418AC2B20F6B700C3B4D0 /* CommonTests.swift in Sources */,
+				B8360AE62B2A3D9B00152188 /* GeneratePacketTests.swift in Sources */,
+				B85418B52B20FBAD00C3B4D0 /* EncryptTests.swift in Sources */,
+				B87D571F2B20EFE700FD82E9 /* CrcTests.swift in Sources */,
+				B85418AE2B20F6F800C3B4D0 /* Constants.swift in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+		C187C193279086A8006E3557 /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				C187C1A3279087A4006E3557 /* OSLog.swift in Sources */,
+				C10D6D6E27A2395700F53D58 /* DanaKitPlugin.swift in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXSourcesBuildPhase section */
+
+/* Begin PBXTargetDependency section */
+		84752E8E26ED0FFE009FD801 /* PBXTargetDependency */ = {
+			isa = PBXTargetDependency;
+			target = 84752E8126ED0FFE009FD801 /* DanaKit */;
+			targetProxy = 84752E8D26ED0FFE009FD801 /* PBXContainerItemProxy */;
+		};
+		B877309A2BB8683D00D2C653 /* PBXTargetDependency */ = {
+			isa = PBXTargetDependency;
+			target = 84752E8126ED0FFE009FD801 /* DanaKit */;
+			targetProxy = B87730992BB8683D00D2C653 /* PBXContainerItemProxy */;
+		};
+		C187C1A0279086FF006E3557 /* PBXTargetDependency */ = {
+			isa = PBXTargetDependency;
+			target = 84752E8126ED0FFE009FD801 /* DanaKit */;
+			targetProxy = C187C19F279086FF006E3557 /* PBXContainerItemProxy */;
+		};
+/* End PBXTargetDependency section */
+
+/* Begin PBXVariantGroup section */
+		C18DAD602AE58BDD00FAB288 /* Localizable.strings */ = {
+			isa = PBXVariantGroup;
+			children = (
+				C18DAD612AE58BDD00FAB288 /* de */,
+				C17E22892AE58C5500CFDE99 /* it */,
+				C13F70D42AE58C76002A292B /* nb */,
+				C17C23AA2AE58C87003AD249 /* nl */,
+				C1FD685F2AE58C9A003DDFFD /* pl */,
+				C1FC36162AE58CCE00AC033A /* ru */,
+				B8313D282B3B168800A0F64D /* en */,
+				B82FA9342B3CAEFC004F2AFE /* ar */,
+				B82FA9352B3CAEFD004F2AFE /* zh-Hans */,
+				B82FA9362B3CAEFE004F2AFE /* cs */,
+				B82FA9372B3CAEFF004F2AFE /* da */,
+				B82FA9382B3CAF00004F2AFE /* fi */,
+				B82FA9392B3CAF00004F2AFE /* fr */,
+				B82FA93A2B3CAF01004F2AFE /* he */,
+				B82FA93B2B3CAF06004F2AFE /* hi */,
+				B82FA93C2B3CAF06004F2AFE /* ja */,
+				B82FA93D2B3CAF07004F2AFE /* pt-BR */,
+				B82FA93E2B3CAF08004F2AFE /* ro */,
+				B82FA93F2B3CAF0A004F2AFE /* sk */,
+				B82FA9402B3CAF0A004F2AFE /* es */,
+				B82FA9412B3CAF0B004F2AFE /* sv */,
+				B82FA9422B3CAF0C004F2AFE /* tr */,
+				B82FA9432B3CAF0C004F2AFE /* vi */,
+			);
+			name = Localizable.strings;
+			sourceTree = "<group>";
+		};
+/* End PBXVariantGroup section */
+
+/* Begin XCBuildConfiguration section */
+		84752E9426ED0FFE009FD801 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				CURRENT_PROJECT_VERSION = 1;
+				DEBUG_INFORMATION_FORMAT = dwarf;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_TESTABILITY = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_OPTIMIZATION_LEVEL = 0;
+				GCC_PREPROCESSOR_DEFINITIONS = (
+					"DEBUG=1",
+					"$(inherited)",
+				);
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				IPHONEOS_DEPLOYMENT_TARGET = 15.1;
+				LOCALIZED_STRING_MACRO_NAMES = (
+					NSLocalizedString,
+					CFCopyLocalizedString,
+					LocalizedString,
+					FrameworkLocalText,
+				);
+				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = iphoneos;
+				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
+				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
+				VERSIONING_SYSTEM = "apple-generic";
+				VERSION_INFO_PREFIX = "";
+			};
+			name = Debug;
+		};
+		84752E9526ED0FFE009FD801 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				CURRENT_PROJECT_VERSION = 1;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				IPHONEOS_DEPLOYMENT_TARGET = 15.1;
+				LOCALIZED_STRING_MACRO_NAMES = (
+					NSLocalizedString,
+					CFCopyLocalizedString,
+					LocalizedString,
+					FrameworkLocalText,
+				);
+				MTL_ENABLE_DEBUG_INFO = NO;
+				MTL_FAST_MATH = YES;
+				SDKROOT = iphoneos;
+				SWIFT_COMPILATION_MODE = wholemodule;
+				SWIFT_OPTIMIZATION_LEVEL = "-O";
+				VALIDATE_PRODUCT = YES;
+				VERSIONING_SYSTEM = "apple-generic";
+				VERSION_INFO_PREFIX = "";
+			};
+			name = Release;
+		};
+		84752E9726ED0FFE009FD801 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_IDENTITY = "";
+				CODE_SIGN_STYLE = Automatic;
+				DEFINES_MODULE = YES;
+				DYLIB_COMPATIBILITY_VERSION = 1;
+				DYLIB_CURRENT_VERSION = 1;
+				DYLIB_INSTALL_NAME_BASE = "@rpath";
+				ENABLE_MODULE_VERIFIER = YES;
+				FRAMEWORK_SEARCH_PATHS = "";
+				INFOPLIST_FILE = DanaKit/Info.plist;
+				INSTALL_PATH = "$(LOCAL_LIBRARY_DIR)/Frameworks";
+				LD_RUNPATH_SEARCH_PATHS = (
+					"$(inherited)",
+					"@executable_path/Frameworks",
+					"@loader_path/Frameworks",
+				);
+				LOCALIZED_STRING_MACRO_NAMES = (
+					NSLocalizedString,
+					CFCopyLocalizedString,
+					LocalizedString,
+					FrameworkLocalText,
+				);
+				MODULE_VERIFIER_SUPPORTED_LANGUAGES = "objective-c objective-c++";
+				MODULE_VERIFIER_SUPPORTED_LANGUAGE_STANDARDS = "gnu11 gnu++14";
+				PRODUCT_BUNDLE_IDENTIFIER = com.randallknutson.DanaKit;
+				PRODUCT_NAME = "$(TARGET_NAME:c99extidentifier)";
+				SKIP_INSTALL = YES;
+				SUPPORTED_PLATFORMS = "iphoneos iphonesimulator";
+				SUPPORTS_MACCATALYST = NO;
+				SUPPORTS_MAC_DESIGNED_FOR_IPHONE_IPAD = NO;
+				SWIFT_EMIT_LOC_STRINGS = YES;
+				SWIFT_INSTALL_OBJC_HEADER = NO;
+				SWIFT_VERSION = 5.0;
+				TARGETED_DEVICE_FAMILY = "1,2";
+				WRAPPER_EXTENSION = framework;
+			};
+			name = Debug;
+		};
+		84752E9826ED0FFE009FD801 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_IDENTITY = "";
+				CODE_SIGN_STYLE = Automatic;
+				DEFINES_MODULE = YES;
+				DYLIB_COMPATIBILITY_VERSION = 1;
+				DYLIB_CURRENT_VERSION = 1;
+				DYLIB_INSTALL_NAME_BASE = "@rpath";
+				ENABLE_MODULE_VERIFIER = YES;
+				FRAMEWORK_SEARCH_PATHS = "";
+				INFOPLIST_FILE = DanaKit/Info.plist;
+				INSTALL_PATH = "$(LOCAL_LIBRARY_DIR)/Frameworks";
+				LD_RUNPATH_SEARCH_PATHS = (
+					"$(inherited)",
+					"@executable_path/Frameworks",
+					"@loader_path/Frameworks",
+				);
+				LOCALIZED_STRING_MACRO_NAMES = (
+					NSLocalizedString,
+					CFCopyLocalizedString,
+					LocalizedString,
+					FrameworkLocalText,
+				);
+				MODULE_VERIFIER_SUPPORTED_LANGUAGES = "objective-c objective-c++";
+				MODULE_VERIFIER_SUPPORTED_LANGUAGE_STANDARDS = "gnu11 gnu++14";
+				PRODUCT_BUNDLE_IDENTIFIER = com.randallknutson.DanaKit;
+				PRODUCT_NAME = "$(TARGET_NAME:c99extidentifier)";
+				SKIP_INSTALL = YES;
+				SUPPORTED_PLATFORMS = "iphoneos iphonesimulator";
+				SUPPORTS_MACCATALYST = NO;
+				SUPPORTS_MAC_DESIGNED_FOR_IPHONE_IPAD = NO;
+				SWIFT_EMIT_LOC_STRINGS = YES;
+				SWIFT_INSTALL_OBJC_HEADER = NO;
+				SWIFT_VERSION = 5.0;
+				TARGETED_DEVICE_FAMILY = "1,2";
+				WRAPPER_EXTENSION = framework;
+			};
+			name = Release;
+		};
+		84762E9A26ED0FFE009FD801 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES;
+				CLANG_ENABLE_MODULES = YES;
+				CODE_SIGN_STYLE = Automatic;
+				FRAMEWORK_SEARCH_PATHS = "";
+				INFOPLIST_FILE = DanaKitTests/Info.plist;
+				LD_RUNPATH_SEARCH_PATHS = (
+					"$(inherited)",
+					"@executable_path/Frameworks",
+					"@loader_path/Frameworks",
+				);
+				PRODUCT_BUNDLE_IDENTIFIER = com.randallknutson.DanaKitTests;
+				PRODUCT_NAME = "$(TARGET_NAME)";
+				SUPPORTED_PLATFORMS = "iphoneos iphonesimulator";
+				SUPPORTS_MACCATALYST = NO;
+				SUPPORTS_MAC_DESIGNED_FOR_IPHONE_IPAD = NO;
+				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
+				SWIFT_VERSION = 5.0;
+				TARGETED_DEVICE_FAMILY = "1,2";
+			};
+			name = Debug;
+		};
+		84762E9B26ED0FFE009FD801 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES;
+				CLANG_ENABLE_MODULES = YES;
+				CODE_SIGN_STYLE = Automatic;
+				FRAMEWORK_SEARCH_PATHS = "";
+				INFOPLIST_FILE = DanaKitTests/Info.plist;
+				LD_RUNPATH_SEARCH_PATHS = (
+					"$(inherited)",
+					"@executable_path/Frameworks",
+					"@loader_path/Frameworks",
+				);
+				PRODUCT_BUNDLE_IDENTIFIER = com.randallknutson.DanaKitTests;
+				PRODUCT_NAME = "$(TARGET_NAME)";
+				SUPPORTED_PLATFORMS = "iphoneos iphonesimulator";
+				SUPPORTS_MACCATALYST = NO;
+				SUPPORTS_MAC_DESIGNED_FOR_IPHONE_IPAD = NO;
+				SWIFT_VERSION = 5.0;
+				TARGETED_DEVICE_FAMILY = "1,2";
+			};
+			name = Release;
+		};
+		C187C19C279086A8006E3557 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++17";
+				CODE_SIGN_IDENTITY = "";
+				CODE_SIGN_STYLE = Automatic;
+				CURRENT_PROJECT_VERSION = 1;
+				DEFINES_MODULE = NO;
+				DEVELOPMENT_TEAM = "";
+				DYLIB_COMPATIBILITY_VERSION = 1;
+				DYLIB_CURRENT_VERSION = 1;
+				DYLIB_INSTALL_NAME_BASE = "@rpath";
+				GENERATE_INFOPLIST_FILE = NO;
+				INFOPLIST_FILE = DanaKitPlugin/Info.plist;
+				INFOPLIST_KEY_NSHumanReadableCopyright = "Copyright © 2022 LoopKit Authors. All rights reserved.";
+				INSTALL_PATH = "$(LOCAL_LIBRARY_DIR)/Frameworks";
+				IPHONEOS_DEPLOYMENT_TARGET = 15.2;
+				LD_DYLIB_INSTALL_NAME = "";
+				LD_RUNPATH_SEARCH_PATHS = (
+					"$(inherited)",
+					"@executable_path/Frameworks",
+					"@loader_path/Frameworks",
+				);
+				MARKETING_VERSION = 1.0;
+				PRODUCT_BUNDLE_IDENTIFIER = com.randallknutson.DanaKitPlugin;
+				PRODUCT_NAME = "$(TARGET_NAME:c99extidentifier)";
+				SKIP_INSTALL = YES;
+				SUPPORTED_PLATFORMS = "iphoneos iphonesimulator";
+				SUPPORTS_MACCATALYST = NO;
+				SUPPORTS_MAC_DESIGNED_FOR_IPHONE_IPAD = NO;
+				SWIFT_EMIT_LOC_STRINGS = YES;
+				SWIFT_VERSION = 5.0;
+				TARGETED_DEVICE_FAMILY = 1;
+				WRAPPER_EXTENSION = loopplugin;
+			};
+			name = Debug;
+		};
+		C187C19D279086A8006E3557 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++17";
+				CODE_SIGN_IDENTITY = "";
+				CODE_SIGN_STYLE = Automatic;
+				CURRENT_PROJECT_VERSION = 1;
+				DEFINES_MODULE = NO;
+				DEVELOPMENT_TEAM = "";
+				DYLIB_COMPATIBILITY_VERSION = 1;
+				DYLIB_CURRENT_VERSION = 1;
+				DYLIB_INSTALL_NAME_BASE = "@rpath";
+				GENERATE_INFOPLIST_FILE = NO;
+				INFOPLIST_FILE = DanaKitPlugin/Info.plist;
+				INFOPLIST_KEY_NSHumanReadableCopyright = "Copyright © 2022 LoopKit Authors. All rights reserved.";
+				INSTALL_PATH = "$(LOCAL_LIBRARY_DIR)/Frameworks";
+				IPHONEOS_DEPLOYMENT_TARGET = 15.2;
+				LD_DYLIB_INSTALL_NAME = "";
+				LD_RUNPATH_SEARCH_PATHS = (
+					"$(inherited)",
+					"@executable_path/Frameworks",
+					"@loader_path/Frameworks",
+				);
+				MARKETING_VERSION = 1.0;
+				PRODUCT_BUNDLE_IDENTIFIER = com.randallknutson.DanaKitPlugin;
+				PRODUCT_NAME = "$(TARGET_NAME:c99extidentifier)";
+				SKIP_INSTALL = YES;
+				SUPPORTED_PLATFORMS = "iphoneos iphonesimulator";
+				SUPPORTS_MACCATALYST = NO;
+				SUPPORTS_MAC_DESIGNED_FOR_IPHONE_IPAD = NO;
+				SWIFT_EMIT_LOC_STRINGS = YES;
+				SWIFT_VERSION = 5.0;
+				TARGETED_DEVICE_FAMILY = 1;
+				WRAPPER_EXTENSION = loopplugin;
+			};
+			name = Release;
+		};
+/* End XCBuildConfiguration section */
+
+/* Begin XCConfigurationList section */
+		84752E7C26ED0FFE009FD801 /* Build configuration list for PBXProject "DanaKit" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				84752E9426ED0FFE009FD801 /* Debug */,
+				84752E9526ED0FFE009FD801 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		84752E9626ED0FFE009FD801 /* Build configuration list for PBXNativeTarget "DanaKit" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				84752E9726ED0FFE009FD801 /* Debug */,
+				84752E9826ED0FFE009FD801 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		84762E9926ED0FFE009FD801 /* Build configuration list for PBXNativeTarget "DanaKitTests" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				84762E9A26ED0FFE009FD801 /* Debug */,
+				84762E9B26ED0FFE009FD801 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		C187C19B279086A8006E3557 /* Build configuration list for PBXNativeTarget "DanaKitPlugin" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				C187C19C279086A8006E3557 /* Debug */,
+				C187C19D279086A8006E3557 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+/* End XCConfigurationList section */
+
+/* Begin XCRemoteSwiftPackageReference section */
+		2742C7032AD875B100E67833 /* XCRemoteSwiftPackageReference "SlideButton" */ = {
+			isa = XCRemoteSwiftPackageReference;
+			repositoryURL = "https://github.com/no-comment/SlideButton";
+			requirement = {
+				branch = main;
+				kind = branch;
+			};
+		};
+		8475306C26ED15DE009FD801 /* XCRemoteSwiftPackageReference "CryptoSwift" */ = {
+			isa = XCRemoteSwiftPackageReference;
+			repositoryURL = "https://github.com/krzyzanowskim/CryptoSwift";
+			requirement = {
+				kind = upToNextMajorVersion;
+				minimumVersion = 1.4.1;
+			};
+		};
+/* End XCRemoteSwiftPackageReference section */
+	};
+	rootObject = 84752E7926ED0FFE009FD801 /* Project object */;
+}
diff --git a/DanaKit/DanaKit.xcodeproj/project.xcworkspace/contents.xcworkspacedata b/DanaKit/DanaKit.xcodeproj/project.xcworkspace/contents.xcworkspacedata
new file mode 100644
index 0000000..919434a
--- /dev/null
+++ b/DanaKit/DanaKit.xcodeproj/project.xcworkspace/contents.xcworkspacedata
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "self:">
+   </FileRef>
+</Workspace>
diff --git a/DanaKit/DanaKit.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/DanaKit/DanaKit.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
index 0000000..18d9810
--- /dev/null
+++ b/DanaKit/DanaKit.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
diff --git a/DanaKit/DanaKit.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved b/DanaKit/DanaKit.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
new file mode 100644
index 0000000..9d8f0c5
--- /dev/null
+++ b/DanaKit/DanaKit.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
@@ -0,0 +1,23 @@
+{
+  "pins" : [
+    {
+      "identity" : "cryptoswift",
+      "kind" : "remoteSourceControl",
+      "location" : "https://github.com/krzyzanowskim/CryptoSwift",
+      "state" : {
+        "revision" : "db51c407d3be4a051484a141bf0bff36c43d3b1e",
+        "version" : "1.8.0"
+      }
+    },
+    {
+      "identity" : "slidebutton",
+      "kind" : "remoteSourceControl",
+      "location" : "https://github.com/no-comment/SlideButton",
+      "state" : {
+        "branch" : "main",
+        "revision" : "82e907608fbd42cc23232bdb0c1720c288dbca2f"
+      }
+    }
+  ],
+  "version" : 2
+}
diff --git a/DanaKit/DanaKit.xcodeproj/xcshareddata/xcschemes/DanaKitParser.xcscheme b/DanaKit/DanaKit.xcodeproj/xcshareddata/xcschemes/DanaKitParser.xcscheme
new file mode 100644
index 0000000..bcba3b7
--- /dev/null
+++ b/DanaKit/DanaKit.xcodeproj/xcshareddata/xcschemes/DanaKitParser.xcscheme
@@ -0,0 +1,78 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "1430"
+   version = "1.7">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "D8C72BD82A50D7D700268D82"
+               BuildableName = "DanaKitParser"
+               BlueprintName = "DanaKitParser"
+               ReferencedContainer = "container:DanaKit.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      shouldAutocreateTestPlan = "YES">
+   </TestAction>
+   <LaunchAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      debugServiceExtension = "internal"
+      allowLocationSimulation = "YES"
+      viewDebuggingEnabled = "No">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "D8C72BD82A50D7D700268D82"
+            BuildableName = "DanaKitParser"
+            BlueprintName = "DanaKitParser"
+            ReferencedContainer = "container:DanaKit.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </LaunchAction>
+   <ProfileAction
+      buildConfiguration = "Release"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "D8C72BD82A50D7D700268D82"
+            BuildableName = "DanaKitParser"
+            BlueprintName = "DanaKitParser"
+            ReferencedContainer = "container:DanaKit.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff --git a/DanaKit/DanaKit.xcodeproj/xcshareddata/xcschemes/DanaKitTests.xcscheme b/DanaKit/DanaKit.xcodeproj/xcshareddata/xcschemes/DanaKitTests.xcscheme
new file mode 100644
index 0000000..9794527
--- /dev/null
+++ b/DanaKit/DanaKit.xcodeproj/xcshareddata/xcschemes/DanaKitTests.xcscheme
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "1430"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "NO"
+            buildForArchiving = "NO"
+            buildForAnalyzing = "NO">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "84762E9F26ED0FFE009FD801"
+               BuildableName = "DanaKitTests.xctest"
+               BlueprintName = "DanaKitTests"
+               ReferencedContainer = "container:DanaKit.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES">
+      <Testables>
+         <TestableReference
+            skipped = "NO">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "84762E9F26ED0FFE009FD801"
+               BuildableName = "DanaKitTests.xctest"
+               BlueprintName = "DanaKitTests"
+               ReferencedContainer = "container:DanaKit.xcodeproj">
+            </BuildableReference>
+         </TestableReference>
+      </Testables>
+   </TestAction>
+   <LaunchAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      debugServiceExtension = "internal"
+      allowLocationSimulation = "YES">
+   </LaunchAction>
+   <ProfileAction
+      buildConfiguration = "Release"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      debugDocumentVersioning = "YES">
+      <MacroExpansion>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "84762E9F26ED0FFE009FD801"
+            BuildableName = "DanaKitTests.xctest"
+            BlueprintName = "DanaKitTests"
+            ReferencedContainer = "container:DanaKit.xcodeproj">
+         </BuildableReference>
+      </MacroExpansion>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff --git a/DanaKit/DanaKit/DanaKit.h b/DanaKit/DanaKit/DanaKit.h
new file mode 100644
index 0000000..b5791ab
--- /dev/null
+++ b/DanaKit/DanaKit/DanaKit.h
@@ -0,0 +1,19 @@
+//
+//  DanaKit.h
+//  DanaKit
+//
+//  Created by Randall Knutson on 9/11/21.
+//  Copyright © 2021 LoopKit Authors. All rights reserved.
+//
+
+#import <Foundation/Foundation.h>
+
+//! Project version number for DanaKit.
+FOUNDATION_EXPORT double DanaKitVersionNumber;
+
+//! Project version string for DanaKit.
+FOUNDATION_EXPORT const unsigned char DanaKitVersionString[];
+
+// In this header, you should import all the public headers of your framework using statements like #import <DanaKit/PublicHeader.h>
+
+
diff --git a/DanaKit/DanaKit/Encryption/Common.swift b/DanaKit/DanaKit/Encryption/Common.swift
new file mode 100644
index 0000000..b5919d0
--- /dev/null
+++ b/DanaKit/DanaKit/Encryption/Common.swift
@@ -0,0 +1,146 @@
+//
+//  Common.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 06/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+// exec_get_enc_packet_passkey(char*, Int, char*)
+func encodePacketPassKey(buffer: inout Data, passkeySecret: Data) -> Data {
+    for i in 0..<(buffer.count - 5) {
+        buffer[i + 3] ^= passkeySecret[(i + 1) % 2]
+    }
+
+    return buffer
+}
+
+// exec_get_enc_passkey_sn(byte, char*)
+func encodePacketPassKeySerialNumber(value: UInt8, deviceName: String) -> UInt8 {
+    var tmp: UInt8 = 0
+    for i in 0..<min(10, deviceName.count) {
+        let charCode = UInt8(deviceName.utf8CString[i])
+        tmp = tmp &+ charCode
+    }
+
+    return value ^ tmp
+}
+
+// exec_get_enc_packet_password
+func encodePacketPassword(buffer: inout Data, passwordSecret: Data) -> Data {
+    let tmp = passwordSecret[0] &+ passwordSecret[1]
+    for i in 3..<(buffer.count - 2) {
+        buffer[i] ^= tmp
+    }
+
+    return buffer
+}
+
+// exec_get_enc_packet_sn(char*, Int, char*)
+func encodePacketSerialNumber(buffer: inout Data, deviceName: String) -> Data {
+    let tmp: Data = Data([
+        UInt8(deviceName.utf8CString[0]) &+ UInt8(deviceName.utf8CString[1]) &+ UInt8(deviceName.utf8CString[2]),
+        UInt8(deviceName.utf8CString[3]) &+ UInt8(deviceName.utf8CString[4]) &+ UInt8(deviceName.utf8CString[5]) &+ UInt8(deviceName.utf8CString[6]) &+ UInt8(deviceName.utf8CString[7]),
+        UInt8(deviceName.utf8CString[8]) &+ UInt8(deviceName.utf8CString[9])
+    ])
+
+    for i in 0..<(buffer.count - 5) {
+        buffer[i + 3] ^= tmp[i % 3]
+    }
+
+    return buffer
+}
+
+// exec_get_enc_packet_time(char*, Int, char*)
+func encodePacketTime(buffer: inout Data, timeSecret: Data) -> Data {
+    let tmp = timeSecret.reduce(0, +)
+    for i in 3..<(buffer.count - 2) {
+        buffer[i] ^= tmp
+    }
+
+    return buffer
+}
+
+// exec_get_enc_pairingkey(int, int)
+func encodePairingKey(buffer: inout Data, pairingKey: Data, globalRandomSyncKey: UInt8) -> (globalRandomSyncKey: UInt8, buffer: Data) {
+    var newRandomSyncKey = globalRandomSyncKey
+
+    for i in 0..<buffer.count {
+        buffer[i] ^= pairingKey[0]
+        buffer[i] &-= newRandomSyncKey
+        buffer[i] = ((buffer[i] >> 4) & 0xF) | ((buffer[i] & 0xF) << 4)
+
+        buffer[i] &+= pairingKey[1]
+        buffer[i] ^= pairingKey[2]
+        buffer[i] = ((buffer[i] >> 4) & 0xF) | ((buffer[i] & 0xF) << 4)
+
+        buffer[i] &-= pairingKey[3]
+        buffer[i] ^= pairingKey[4]
+        buffer[i] = ((buffer[i] >> 4) & 0xF) | ((buffer[i] & 0xF) << 4)
+
+        buffer[i] ^= pairingKey[5]
+        buffer[i] ^= newRandomSyncKey
+
+        newRandomSyncKey = buffer[i]
+    }
+
+    // set global random sync key to newRandomSyncKey
+    return (globalRandomSyncKey: newRandomSyncKey, buffer: buffer)
+}
+
+// exec_get_desc_pairingkey(char*, int)
+func getDescPairingKey(buffer: inout Data, pairingKey: Data, globalRandomSyncKey: UInt8) -> (globalRandomSyncKey: UInt8, buffer: Data) {
+    // This is the reverse of encodePairingKey
+    var newRandomSyncKey = globalRandomSyncKey
+
+    for i in 0..<buffer.count {
+        let tmp = buffer[i]
+
+        buffer[i] ^= newRandomSyncKey
+        buffer[i] ^= pairingKey[5]
+
+        buffer[i] = ((buffer[i] >> 4) & 0xF) | ((buffer[i] & 0xF) << 4)
+        buffer[i] ^= pairingKey[4]
+        buffer[i] &-= pairingKey[3]
+
+        buffer[i] = ((buffer[i] >> 4) & 0xF) | ((buffer[i] & 0xF) << 4)
+        buffer[i] ^= pairingKey[2]
+        buffer[i] &+= pairingKey[1]
+        buffer[i] ^= pairingKey[0]
+
+        buffer[i] = ((buffer[i] >> 4) & 0xF) | ((buffer[i] & 0xF) << 4)
+        buffer[i] &-= newRandomSyncKey
+
+        // set global random sync key to newRandomSyncKey
+        newRandomSyncKey = tmp
+    }
+
+    return (globalRandomSyncKey: newRandomSyncKey, buffer: buffer)
+}
+
+func encryptionRandomSyncKey(randomSyncKey: UInt8, randomPairingKey: Data) -> UInt8 {
+    var tmp: UInt8 = 0
+
+    tmp = ((randomSyncKey >> 4) | ((randomSyncKey & 0xF) << 4)) &+ randomPairingKey[0]
+    tmp = ((tmp >> 4) | ((tmp & 0xF) << 4)) ^ randomPairingKey[1]
+
+    return ((tmp >> 4) | ((tmp & 0xF) << 4)) &- randomPairingKey[2]
+}
+
+func decryptionRandomSyncKey(randomSyncKey: UInt8, randomPairingKey: Data) -> UInt8 {
+    var tmp: UInt8 = 0
+
+    tmp = (((randomSyncKey &+ randomPairingKey[2]) >> 4) | ((randomSyncKey &+ randomPairingKey[2]) & 0xF) << 4) ^ randomPairingKey[1]
+    tmp = ((tmp >> 4) | ((tmp & 0xF) << 4)) &- randomPairingKey[0]
+
+    return (tmp >> 4) | ((tmp & 0xF) << 4)
+}
+
+func initialRandomSyncKey(pairingKey: Data) -> UInt8 {
+    var tmp: UInt8 = 0
+
+    tmp = (((pairingKey[0] &+ pairingKey[1]) >> 4) | (((pairingKey[0] &+ pairingKey[1]) & 0xF) << 4) ^ pairingKey[2]) &- pairingKey[3]
+    tmp = ((tmp >> 4) | ((tmp & 0xF) << 4)) ^ pairingKey[4]
+
+    return ((tmp >> 4) | ((tmp & 0xF) << 4)) ^ pairingKey[5]
+}
diff --git a/DanaKit/DanaKit/Encryption/Crc.swift b/DanaKit/DanaKit/Encryption/Crc.swift
new file mode 100644
index 0000000..66d2151
--- /dev/null
+++ b/DanaKit/DanaKit/Encryption/Crc.swift
@@ -0,0 +1,44 @@
+//
+//  Crc.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 06/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import Foundation
+
+func generateCrc(buffer: Data, enhancedEncryption: UInt8, isEncryptionCommand: Bool) -> UInt16 {
+    var crc: UInt16 = 0
+
+    for byte in buffer {
+        var result = ((crc >> 8) | (crc << 8)) ^ UInt16(byte)
+        result ^= (result & 0xff) >> 4
+        result ^= (result << 12)
+
+        if enhancedEncryption == 0 {
+            let tmp = (result & 0xff) << 3 | ((result & 0xff) >> 2) << 5
+            result ^= tmp
+        } else if enhancedEncryption == 1 {
+            var tmp: UInt16 = 0
+            if isEncryptionCommand {
+                tmp = (result & 0xff) << 3 | ((result & 0xff) >> 2) << 5
+            } else {
+                tmp = (result & 0xff) << 5 | ((result & 0xff) >> 4) << 2
+            }
+            result ^= tmp
+        } else if enhancedEncryption == 2 {
+            var tmp: UInt16 = 0
+            if isEncryptionCommand {
+                tmp = (result & 0xff) << 3 | ((result & 0xff) >> 2) << 5
+            } else {
+                tmp = (result & 0xff) << 4 | ((result & 0xff) >> 3) << 2
+            }
+            result ^= tmp
+        }
+
+        crc = result
+    }
+
+    return crc
+}
diff --git a/DanaKit/DanaKit/Encryption/Decryption.swift b/DanaKit/DanaKit/Encryption/Decryption.swift
new file mode 100644
index 0000000..6eeec81
--- /dev/null
+++ b/DanaKit/DanaKit/Encryption/Decryption.swift
@@ -0,0 +1,162 @@
+//
+//  Decryption.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 06/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct DecryptParam {
+    var data: Data
+    var deviceName: String
+    var enhancedEncryption: UInt8
+    var isEncryptionMode: Bool
+    var pairingKeyLength: Int
+    var randomPairingKeyLength: Int
+    var ble5KeyLength: Int
+    var timeSecret: Data
+    var passwordSecret: Data
+    var passKeySecret: Data
+    var passKeySecretBackup: Data
+}
+
+struct DecryptReturn {
+    var data: Data
+    var isEncryptionMode: Bool
+    var timeSecret: Data
+    var passwordSecret: Data
+    var passKeySecret: Data
+    var passKeySecretBackup: Data
+}
+
+func decrypt(_ options: inout DecryptParam) throws -> DecryptReturn {
+    options.data = encodePacketSerialNumber(buffer: &options.data, deviceName: options.deviceName)
+
+    if !options.isEncryptionMode && options.enhancedEncryption == 0 {
+        options.data = encodePacketTime(buffer: &options.data, timeSecret: options.timeSecret)
+        options.data = encodePacketPassword(buffer: &options.data, passwordSecret: options.passwordSecret)
+        options.data = encodePacketPassKey(buffer: &options.data, passkeySecret: options.passKeySecret)
+    }
+
+    guard options.data[2] == options.data.count - 7 else {
+        throw NSError(domain: "Package length does not match the length attr.", code: 0, userInfo: nil)
+    }
+
+    var content = Data(options.data[3...(options.data.count - 5)])
+    let crc = generateCrc(buffer: content, enhancedEncryption: options.enhancedEncryption, isEncryptionCommand: options.isEncryptionMode)
+
+    guard (UInt16(crc) >> 8) == options.data[options.data.count - 4] && (UInt16(crc) & 0xff) == options.data[options.data.count - 3] else {
+        throw NSError(domain: "Crc checksum failed...", code: 0, userInfo: nil)
+    }
+
+    if content[0] == 0x2 && content[1] == 0xd0 && content[2] == 0x0 {
+        // Response for DANAR_PACKET__OPCODE_ENCRYPTION__CHECK_PASSKEY
+        options.passKeySecret = options.passKeySecretBackup
+    }
+
+    if content[0] == 0x2 && content[1] == 0xd2 {
+        // Response for ??
+        options.passKeySecret = Data([content[2], content[3]])
+        options.passKeySecretBackup = Data([content[2], content[3]])
+
+        content[2] = encodePacketPassKeySerialNumber(value: content[2], deviceName: options.deviceName)
+        content[3] = encodePacketPassKeySerialNumber(value: content[3], deviceName: options.deviceName)
+    }
+
+    if content[0] == 0x2 && content[1] == 0x1 {
+        // Response for DANAR_PACKET__OPCODE_ENCRYPTION__TIME_INFORMATION
+        if options.enhancedEncryption == 1 {
+            options.isEncryptionMode = options.pairingKeyLength == 0 && options.randomPairingKeyLength == 0
+        } else if options.enhancedEncryption == 2 {
+            options.isEncryptionMode = options.ble5KeyLength == 0
+        } else {
+            // The initial message
+            if options.data.count != 0x11 {
+                throw NSError(domain: "Invalid length for TIME_INFORMATION", code: 0, userInfo: nil)
+            }
+
+            options.isEncryptionMode = false
+            options.timeSecret = Data(content[2...7])
+
+            options.passwordSecret = Data(content[8...9])
+            options.passwordSecret[0] ^= 0x87
+            options.passwordSecret[1] ^= 0x0d
+        }
+    }
+
+    return DecryptReturn(
+        data: content,
+        isEncryptionMode: options.isEncryptionMode,
+        timeSecret: options.timeSecret,
+        passwordSecret: options.passwordSecret,
+        passKeySecret: options.passKeySecret,
+        passKeySecretBackup: options.passKeySecretBackup
+      )
+}
+
+struct DecryptSecondLevelParams {
+    var buffer: Data
+    var enhancedEncryption: UInt8
+    var pairingKey: Data
+    var randomPairingKey: Data
+    var randomSyncKey: UInt8
+    var bleRandomKeys: (UInt8, UInt8, UInt8)
+}
+
+func decryptSecondLevel(_ params: inout DecryptSecondLevelParams) -> (randomSyncKey: UInt8, buffer: Data) {
+    if params.enhancedEncryption == 1 {
+        for i in 0..<params.buffer.count {
+            let copyRandomSyncKey = params.buffer[i]
+
+            params.buffer[i] &+= secondLvlEncryptionLookup[Int(params.randomPairingKey[2])]
+            params.buffer[i] &-= secondLvlEncryptionLookup[Int(params.randomPairingKey[1])]
+            params.buffer[i] ^= secondLvlEncryptionLookup[Int(params.randomPairingKey[0])]
+            params.buffer[i] = ((params.buffer[i] >> 4) & 0xf) | (((params.buffer[i] & 0xf) << 4) & 0xff)
+
+            params.buffer[i] &+= secondLvlEncryptionLookup[Int(params.pairingKey[5])]
+            params.buffer[i] &-= secondLvlEncryptionLookup[Int(params.pairingKey[4])]
+            params.buffer[i] ^= secondLvlEncryptionLookup[Int(params.pairingKey[3])]
+            params.buffer[i] = ((params.buffer[i] >> 4) & 0xf) | (((params.buffer[i] & 0xf) << 4) & 0xff)
+
+            params.buffer[i] &+= secondLvlEncryptionLookup[Int(params.pairingKey[2])]
+            params.buffer[i] &-= secondLvlEncryptionLookup[Int(params.pairingKey[1])]
+            params.buffer[i] ^= secondLvlEncryptionLookup[Int(params.pairingKey[0])]
+            params.buffer[i] ^= params.randomSyncKey
+            params.buffer[i] ^= params.pairingKey[5]
+
+            params.buffer[i] = ((params.buffer[i] >> 4) & 0xf) | (((params.buffer[i] & 0xf) << 4) & 0xff)
+            params.buffer[i] ^= params.pairingKey[4]
+            params.buffer[i] &+= params.pairingKey[3]
+
+            params.buffer[i] = ((params.buffer[i] >> 4) & 0xf) | (((params.buffer[i] & 0xf) << 4) & 0xff)
+            params.buffer[i] ^= params.pairingKey[2]
+            params.buffer[i] &-= params.pairingKey[1]
+
+            params.buffer[i] = ((params.buffer[i] >> 4) & 0xf) | (((params.buffer[i] & 0xf) << 4) & 0xff)
+            params.buffer[i] &+= params.randomSyncKey
+            params.buffer[i] ^= params.pairingKey[0]
+
+            params.randomSyncKey = copyRandomSyncKey
+        }
+
+        if params.buffer[0] == 0x7a && params.buffer[1] == 0x7a {
+            params.buffer[0] = 0xa5
+            params.buffer[1] = 0xa5
+        }
+
+        if params.buffer[params.buffer.count - 2] == 0x2e && params.buffer[params.buffer.count - 1] == 0x2e {
+            params.buffer[params.buffer.count - 2] = 0x5a
+            params.buffer[params.buffer.count - 1] = 0x5a
+        }
+    } else if params.enhancedEncryption == 2 {
+        for i in 0..<params.buffer.count {
+            params.buffer[i] ^= params.bleRandomKeys.2
+            params.buffer[i] &+= params.bleRandomKeys.1
+
+            params.buffer[i] = ((params.buffer[i] >> 4) & 0xf) | (((params.buffer[i] & 0xf) << 4) & 0xff)
+            params.buffer[i] &-= params.bleRandomKeys.0
+        }
+    }
+
+    return (params.randomSyncKey, params.buffer)
+}
diff --git a/DanaKit/DanaKit/Encryption/Encrypt.swift b/DanaKit/DanaKit/Encryption/Encrypt.swift
new file mode 100644
index 0000000..f4f3807
--- /dev/null
+++ b/DanaKit/DanaKit/Encryption/Encrypt.swift
@@ -0,0 +1,272 @@
+//
+//  Encrypt.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 06/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let timeInformationEnhancedEncryption2Lookup: [UInt8] = [
+    0,
+    0x17 ^ 0x1a,
+    0xd1 ^ 0xc0,
+    0xaf ^ 0xa9
+]
+
+struct EncryptParams {
+    var operationCode: UInt8
+    var data: Data?
+    var deviceName: String
+    var enhancedEncryption: UInt8
+    var timeSecret: Data
+    var passwordSecret: Data
+    var passKeySecret: Data
+}
+
+func encrypt(_ options: EncryptParams) -> (data: Data, isEncryptionMode: Bool) {
+    switch options.operationCode {
+    // DANAR_PACKET__OPCODE_ENCRYPTION__PUMP_CHECK
+    case 0x00:
+        return encodePumpCheckCommand(deviceName: options.deviceName, enhancedEncryption: options.enhancedEncryption)
+
+    // DANAR_PACKET__OPCODE_ENCRYPTION__TIME_INFORMATION
+    case 0x01:
+        return encodeTimeInformation(data: options.data, deviceName: options.deviceName, enhancedEncryption: options.enhancedEncryption)
+
+    // DANAR_PACKET__OPCODE_ENCRYPTION__CHECK_PASSKEY
+    case 0xd0:
+        return encodeCheckPassKeyCommand(data: options.data, deviceName: options.deviceName, enhancedEncryption: options.enhancedEncryption)
+
+    // DANAR_PACKET__OPCODE_ENCRYPTION__PASSKEY_REQUEST
+    case 0xd1:
+        return encodeRequestCommand(operationCode: options.operationCode, deviceName: options.deviceName, enhancedEncryption: options.enhancedEncryption)
+        
+        // DANAR_PACKET__OPCODE_ENCRYPTION__GET_PUMP_CHECK
+    case 0xf3:
+        return encodeRequestCommand(operationCode: options.operationCode, deviceName: options.deviceName, enhancedEncryption: options.enhancedEncryption)
+        
+        // DANAR_PACKET__OPCODE_ENCRYPTION__GET_EASYMENU_CHECK
+    case 0xf4:
+        return encodeRequestCommand(operationCode: options.operationCode, deviceName: options.deviceName, enhancedEncryption: options.enhancedEncryption)
+
+    default:
+        return encodeDefault(options: options)
+    }
+}
+
+struct EncryptSecondLevelParams {
+    var buffer: Data
+    var enhancedEncryption: UInt8
+    var pairingKey: Data
+    var randomPairingKey: Data
+    var randomSyncKey: UInt8
+    var bleRandomKeys: (UInt8, UInt8, UInt8)
+}
+
+func encryptSecondLevel(_ params: inout EncryptSecondLevelParams) -> (randomSyncKey: UInt8, buffer: Data) {
+    var updatedRandomSyncKey = params.randomSyncKey
+
+    if params.enhancedEncryption == 1 {
+        if params.buffer[0] == 0xa5 && params.buffer[1] == 0xa5 {
+            params.buffer[0] = 0x7a
+            params.buffer[1] = 0x7a
+        }
+
+        if params.buffer[params.buffer.count - 2] == 0x5a && params.buffer[params.buffer.count - 1] == 0x5a {
+            params.buffer[params.buffer.count - 2] = 0x2e
+            params.buffer[params.buffer.count - 1] = 0x2e
+        }
+
+        for i in 0..<params.buffer.count {
+            params.buffer[i] ^= params.pairingKey[0]
+            params.buffer[i] &-= updatedRandomSyncKey
+            params.buffer[i] = ((params.buffer[i] >> 4) & 0xf) | ((params.buffer[i] & 0xf) << 4)
+
+            params.buffer[i] &+= params.pairingKey[1]
+            params.buffer[i] ^= params.pairingKey[2]
+            params.buffer[i] = ((params.buffer[i] >> 4) & 0xf) | ((params.buffer[i] & 0xf) << 4)
+
+            params.buffer[i] &-= params.pairingKey[3]
+            params.buffer[i] ^= params.pairingKey[4]
+            params.buffer[i] = ((params.buffer[i] >> 4) & 0x0f) | ((params.buffer[i] & 0x0f) << 4)
+
+            params.buffer[i] ^= params.pairingKey[5]
+            params.buffer[i] ^= updatedRandomSyncKey
+            
+            params.buffer[i] ^= secondLvlEncryptionLookup[Int(params.pairingKey[0])]
+            params.buffer[i] &+= secondLvlEncryptionLookup[Int(params.pairingKey[1])]
+            params.buffer[i] &-= secondLvlEncryptionLookup[Int(params.pairingKey[2])]
+            params.buffer[i] = ((params.buffer[i] >> 4) & 0x0f) | ((params.buffer[i] & 0x0f) << 4)
+
+            params.buffer[i] ^= secondLvlEncryptionLookup[Int(params.pairingKey[3])]
+            params.buffer[i] &+= secondLvlEncryptionLookup[Int(params.pairingKey[4])]
+            params.buffer[i] &-= secondLvlEncryptionLookup[Int(params.pairingKey[5])]
+            params.buffer[i] = ((params.buffer[i] >> 4) & 0x0f) | ((params.buffer[i] & 0x0f) << 4)
+            
+            params.buffer[i] ^= secondLvlEncryptionLookup[Int(params.randomPairingKey[0])]
+            params.buffer[i] &+= secondLvlEncryptionLookup[Int(params.randomPairingKey[1])]
+            params.buffer[i] &-= secondLvlEncryptionLookup[Int(params.randomPairingKey[2])]
+
+            updatedRandomSyncKey = params.buffer[i]
+        }
+    } else if params.enhancedEncryption == 2 {
+        if params.buffer[0] == 0xa5 && params.buffer[1] == 0xa5 {
+            params.buffer[0] = 0xaa
+            params.buffer[1] = 0xaa
+        }
+
+        if params.buffer[params.buffer.count - 2] == 0x5a && params.buffer[params.buffer.count - 1] == 0x5a {
+            params.buffer[params.buffer.count - 2] = 0xee
+            params.buffer[params.buffer.count - 1] = 0xee
+        }
+
+        for i in 0..<params.buffer.count {
+            params.buffer[i] &+= params.bleRandomKeys.0
+            params.buffer[i] = ((params.buffer[i] >> 4) & 0x0f) | (((params.buffer[i] & 0x0f) << 4) & 0xf0)
+
+            params.buffer[i] &-= params.bleRandomKeys.1
+            params.buffer[i] ^= params.bleRandomKeys.2
+        }
+    }
+
+    return (updatedRandomSyncKey, params.buffer)
+}
+
+func encodePumpCheckCommand(deviceName: String, enhancedEncryption: UInt8) -> (data: Data, isEncryptionMode: Bool) {
+    var buffer = Data(count: 19)
+    buffer[0] = 0xa5 // header 1
+    buffer[1] = 0xa5 // header 2
+    buffer[2] = 0x0c // length
+    buffer[3] = DanaPacketType.TYPE_ENCRYPTION_REQUEST
+    buffer[4] = 0x00 // pump_check command
+
+    // Device name
+    for i in 0..<10 {
+        buffer[5 + i] = UInt8(deviceName.utf8CString[i])
+    }
+
+    let crc = generateCrc(buffer: buffer[3..<15], enhancedEncryption: enhancedEncryption, isEncryptionCommand: true)
+    buffer[15] = UInt8((crc >> 8) & 0xff) // crc 1
+    buffer[16] = UInt8(crc & 0xff) // crc 2
+
+    buffer[17] = 0x5a // footer 1
+    buffer[18] = 0x5a // footer 2
+
+    let encodedData = encodePacketSerialNumber(buffer: &buffer, deviceName: deviceName)
+    
+    return (data: encodedData, isEncryptionMode: true)
+}
+
+func encodeRequestCommand(operationCode: UInt8, deviceName: String, enhancedEncryption: UInt8) -> (data: Data, isEncryptionMode: Bool) {
+    var buffer = Data(count: 9)
+    buffer[0] = 0xa5 // header 1
+    buffer[1] = 0xa5 // header 2
+    buffer[2] = 0x02 // length
+    buffer[3] = DanaPacketType.TYPE_ENCRYPTION_REQUEST
+    buffer[4] = operationCode
+
+    let crc = generateCrc(buffer: buffer.subdata(in: 3..<5), enhancedEncryption: enhancedEncryption, isEncryptionCommand: true)
+    buffer[5] = UInt8((crc >> 8) & 0xff) // crc 1
+    buffer[6] = UInt8(crc & 0xff) // crc 2
+    buffer[7] = 0x5a // footer 1
+    buffer[8] = 0x5a // footer 2
+
+    let encodedData = encodePacketSerialNumber(buffer: &buffer, deviceName: deviceName)
+    
+    return (data: encodedData, isEncryptionMode: true)
+}
+
+func encodeTimeInformation(data: Data?, deviceName: String, enhancedEncryption: UInt8) -> (data: Data, isEncryptionMode: Bool) {
+    let lengthOfData = data?.count ?? 0
+    var buffer = Data(count: 9 + lengthOfData)
+    buffer[0] = 0xa5 // header 1
+    buffer[1] = 0xa5 // header 2
+    buffer[2] = UInt8(0x02 + lengthOfData) // length
+    buffer[3] = DanaPacketType.TYPE_ENCRYPTION_REQUEST
+    buffer[4] = 0x01 // time information command
+
+    if let data = data, data.count > 0 {
+        // TODO: Need to find a cleaner way to solve the constant issue
+        /* Original code:
+         if (enhancedEncryption === 2) {
+               data[1] = 0x17 ^ 0x1a;
+               data[2] = 0xd1 ^ 0xc0;
+               data[3] = 0xaf ^ 0xa9;
+             }
+         */
+        
+        for i in 0..<data.count {
+            if enhancedEncryption == 2 && i > 0 && i < 4 {
+                buffer[5 + i] = timeInformationEnhancedEncryption2Lookup[i]
+            } else {
+                buffer[5 + i] = data[i]
+            }
+        }
+    }
+
+    let crc = generateCrc(buffer: buffer.subdata(in: 3..<(5 + lengthOfData)), enhancedEncryption: enhancedEncryption, isEncryptionCommand: true)
+    buffer[5 + lengthOfData] = UInt8((crc >> 8) & 0xff) // crc 1
+    buffer[6 + lengthOfData] = UInt8(crc & 0xff) // crc 2
+    buffer[7 + lengthOfData] = 0x5a // footer 1
+    buffer[8 + lengthOfData] = 0x5a // footer 2
+
+    let encodedData = encodePacketSerialNumber(buffer: &buffer, deviceName: deviceName)
+    
+    return (data: encodedData, isEncryptionMode: true)
+}
+
+func encodeCheckPassKeyCommand(data: Data?, deviceName: String, enhancedEncryption: UInt8) -> (data: Data, isEncryptionMode: Bool) {
+    let lengthOfData = data?.count ?? 0
+    var buffer = Data(count: 9 + lengthOfData)
+    buffer[0] = 0xa5 // header 1
+    buffer[1] = 0xa5 // header 2
+    buffer[2] = UInt8(0x02 + lengthOfData) // length
+    buffer[3] = DanaPacketType.TYPE_ENCRYPTION_REQUEST
+    buffer[4] = 0xd0 // check passkey command
+
+    if let data = data, data.count > 0 {
+        for i in 0..<data.count {
+            buffer[5 + i] = encodePacketPassKeySerialNumber(value: data[i], deviceName: deviceName)
+        }
+    }
+
+    let crc = generateCrc(buffer: buffer.subdata(in: 3..<(5 + lengthOfData)), enhancedEncryption: enhancedEncryption, isEncryptionCommand: true)
+    buffer[5 + lengthOfData] = UInt8((crc >> 8) & 0xff) // crc 1
+    buffer[6 + lengthOfData] = UInt8(crc & 0xff) // crc 2
+    buffer[7 + lengthOfData] = 0x5a // footer 1
+    buffer[8 + lengthOfData] = 0x5a // footer 2
+
+    let encodedData = encodePacketSerialNumber(buffer: &buffer, deviceName: deviceName)
+    return (data: encodedData, isEncryptionMode: true)
+}
+
+func encodeDefault(options: EncryptParams) -> (data: Data, isEncryptionMode: Bool) {
+    let lengthOfData = options.data?.count ?? 0
+    var buffer = Data(count: 9 + lengthOfData)
+    buffer[0] = 0xa5 // header 1
+    buffer[1] = 0xa5 // header 2
+    buffer[2] = UInt8(0x02 + lengthOfData) // length
+    buffer[3] = DanaPacketType.TYPE_COMMAND
+    buffer[4] = options.operationCode // operation code
+
+    if let data = options.data, lengthOfData > 0 {
+        for i in 0..<lengthOfData {
+            buffer[5 + i] = data[i]
+        }
+    }
+
+    let crc = generateCrc(buffer: buffer.subdata(in: 3..<(5 + lengthOfData)), enhancedEncryption: options.enhancedEncryption, isEncryptionCommand: false)
+    buffer[5 + lengthOfData] = UInt8((crc >> 8) & 0xff) // crc 1
+    buffer[6 + lengthOfData] = UInt8(crc & 0xff) // crc 2
+    buffer[7 + lengthOfData] = 0x5a // footer 1
+    buffer[8 + lengthOfData] = 0x5a // footer 2
+
+    var encrypted1 = encodePacketSerialNumber(buffer: &buffer, deviceName: options.deviceName)
+    if options.enhancedEncryption == 0 {
+        encrypted1 = encodePacketTime(buffer: &encrypted1, timeSecret: options.timeSecret)
+        encrypted1 = encodePacketPassword(buffer: &encrypted1, passwordSecret: options.passwordSecret)
+        encrypted1 = encodePacketPassKey(buffer: &encrypted1, passkeySecret: options.passKeySecret)
+    }
+
+    return (data: encrypted1, isEncryptionMode: false)
+}
diff --git a/DanaKit/DanaKit/Encryption/EncryptionManager.swift b/DanaKit/DanaKit/Encryption/EncryptionManager.swift
new file mode 100644
index 0000000..8538cb5
--- /dev/null
+++ b/DanaKit/DanaKit/Encryption/EncryptionManager.swift
@@ -0,0 +1,111 @@
+//
+//  EncryptionManager.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 14/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+class DanaRSEncryption {
+    private static var enhancedEncryption: UInt8 = 0
+    private static var isEncryptionMode: Bool = true
+    
+    // Length 2
+    private static var passwordSecret: Data = Data()
+    
+    // Length: 6
+    private static var timeSecret: Data = Data()
+    
+    // Length: 2
+    private static var passKeySecret: Data = Data()
+    private static var passKeySecretBackup: Data = Data()
+    
+    // Length: 6
+    private static var pairingKey: Data = Data()
+    
+    // Length: 3
+    private static var randomPairingKey: Data = Data()
+    private static var randomSyncKey: UInt8 = 0
+    
+    // Length: 6
+    private static var ble5Key: Data = Data()
+    private static var ble5RandomKeys: (UInt8, UInt8, UInt8) = (0, 0, 0)
+    
+    // Encoding functions -> Encryption in JNI lib
+    static func encodePacket(operationCode: UInt8, buffer: Data?, deviceName: String) -> Data {
+        let params = EncryptParams(operationCode: operationCode, data: buffer, deviceName: deviceName, enhancedEncryption: self.enhancedEncryption, timeSecret: self.timeSecret, passwordSecret: self.passwordSecret, passKeySecret: self.passKeySecret)
+        let result = encrypt(params)
+        
+        self.isEncryptionMode = result.isEncryptionMode
+        return result.data
+    }
+    
+    static func encodeSecondLevel(data: Data) -> Data {
+        var params = EncryptSecondLevelParams(buffer: data, enhancedEncryption: self.enhancedEncryption, pairingKey: self.pairingKey, randomPairingKey: self.randomPairingKey, randomSyncKey: self.randomSyncKey, bleRandomKeys: self.ble5RandomKeys)
+        let result = encryptSecondLevel(&params)
+        
+        self.randomSyncKey = result.randomSyncKey
+        return result.buffer
+    }
+    
+    // Decoding function -> Decrypting in JNI lib
+    static func decodePacket(buffer: Data, deviceName: String) -> Data {
+        var params = DecryptParam(data: buffer, deviceName: deviceName, enhancedEncryption: self.enhancedEncryption, isEncryptionMode: self.isEncryptionMode, pairingKeyLength: self.pairingKey.count, randomPairingKeyLength: self.randomPairingKey.count, ble5KeyLength: self.ble5Key.count, timeSecret: self.timeSecret, passwordSecret: self.passwordSecret, passKeySecret: self.passKeySecret, passKeySecretBackup: self.passKeySecretBackup)
+        
+        do {
+            let decryptionResult = try decrypt(&params)
+            
+            self.isEncryptionMode = decryptionResult.isEncryptionMode
+            self.timeSecret = decryptionResult.timeSecret
+            self.passwordSecret = decryptionResult.passwordSecret
+            self.passKeySecret = decryptionResult.passKeySecret
+            self.passKeySecretBackup = decryptionResult.passKeySecretBackup
+            
+            return decryptionResult.data
+        } catch {
+            return Data([])
+        }
+    }
+    
+    static func decodeSecondLevel(data: Data) -> Data {
+        var params = DecryptSecondLevelParams(buffer: data, enhancedEncryption: self.enhancedEncryption, pairingKey: self.pairingKey, randomPairingKey: self.randomPairingKey, randomSyncKey: self.randomSyncKey, bleRandomKeys: self.ble5RandomKeys)
+        let result = decryptSecondLevel(&params)
+        
+        self.randomSyncKey = result.randomSyncKey
+        return result.buffer
+    }
+    
+    // Setter functions
+    static func setEnhancedEncryption(_ enhancedEncryption: UInt8) {
+        self.enhancedEncryption = enhancedEncryption
+    }
+    
+    static func setPairingKeys(pairingKey: Data, randomPairingKey: Data, randomSyncKey: UInt8?) {
+        self.pairingKey = pairingKey
+        self.randomPairingKey = randomPairingKey
+        
+        if randomSyncKey == nil || randomSyncKey == 0 {
+            self.randomSyncKey = initialRandomSyncKey(pairingKey: pairingKey)
+        } else {
+            self.randomSyncKey = decryptionRandomSyncKey(randomSyncKey: randomSyncKey!, randomPairingKey: randomPairingKey)
+        }
+    }
+    
+    static func getPairingKeys() -> (Data, Data) {
+        return (self.pairingKey, self.randomPairingKey)
+    }
+    
+    static func setBle5Key(ble5Key: Data) {
+        self.ble5Key = ble5Key
+        
+        let i1 = Int((ble5Key[0] - 0x30) * 10) &+ Int(ble5Key[1] - 0x30)
+        let i2 = Int((ble5Key[2] - 0x30) * 10) &+ Int(ble5Key[3] - 0x30)
+        let i3 = Int((ble5Key[4] - 0x30) * 10) &+ Int(ble5Key[5] - 0x30)
+        
+        self.ble5RandomKeys = (
+            secondLvlEncryptionLookupShort[Int(i1)],
+            secondLvlEncryptionLookupShort[Int(i2)],
+            secondLvlEncryptionLookupShort[Int(i3)]
+        )
+    }
+}
diff --git a/DanaKit/DanaKit/Encryption/Lookup.swift b/DanaKit/DanaKit/Encryption/Lookup.swift
new file mode 100644
index 0000000..295c237
--- /dev/null
+++ b/DanaKit/DanaKit/Encryption/Lookup.swift
@@ -0,0 +1,36 @@
+//
+//  Loopup.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 06/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+/**
+ * Second level encryption lookup table. Used in:
+ * `info_nightscout_androidaps_danars_encryption_BleEncryption_encryptSecondLevelPacketJni` &
+ * `info_nightscout_androidaps_danars_encryption_BleEncryption_decryptSecondLevelPacketJni`
+ */
+let secondLvlEncryptionLookup: [UInt8] = [
+  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4,
+  0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3,
+  0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3,
+  0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
+  0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c,
+  0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14,
+  0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5,
+  0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
+  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e,
+  0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
+];
+
+/**
+ * A shorter second level encryption lookup table. Used in:
+ * `info_nightscout_androidaps_danars_encryption_BleEncryption_setBle5KeyJni`
+ */
+let secondLvlEncryptionLookupShort: [UInt8] = [
+  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15,
+  0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x47, 0xf1, 0x1a, 0x71,
+  0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3,
+  0x2f, 0x84, 0x53, 0xd1, 0xa0, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xb0, 0x54, 0xbb, 0x16,
+];
diff --git a/DanaKit/DanaKit/Info.plist b/DanaKit/DanaKit/Info.plist
new file mode 100644
index 0000000..9bcb244
--- /dev/null
+++ b/DanaKit/DanaKit/Info.plist
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>CFBundleDevelopmentRegion</key>
+	<string>$(DEVELOPMENT_LANGUAGE)</string>
+	<key>CFBundleExecutable</key>
+	<string>$(EXECUTABLE_NAME)</string>
+	<key>CFBundleIdentifier</key>
+	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
+	<key>CFBundleInfoDictionaryVersion</key>
+	<string>6.0</string>
+	<key>CFBundleName</key>
+	<string>$(PRODUCT_NAME)</string>
+	<key>CFBundlePackageType</key>
+	<string>$(PRODUCT_BUNDLE_PACKAGE_TYPE)</string>
+	<key>CFBundleShortVersionString</key>
+	<string>1.0</string>
+	<key>CFBundleVersion</key>
+	<string>$(CURRENT_PROJECT_VERSION)</string>
+</dict>
+</plist>
diff --git a/DanaKit/DanaKit/Packets/DanaBasalCancelTemporary.swift b/DanaKit/DanaKit/Packets/DanaBasalCancelTemporary.swift
new file mode 100644
index 0000000..2bcc8f2
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaBasalCancelTemporary.swift
@@ -0,0 +1,17 @@
+//
+//  DanaPacketBasalCancelTemporary.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let CommandBasalCancelTemporary: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BASAL__CANCEL_TEMPORARY_BASAL & 0xff)
+
+func generatePacketBasalCancelTemporary() -> DanaGeneratePacket {
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_BASAL__CANCEL_TEMPORARY_BASAL, data: nil)
+}
+
+func parsePacketBasalCancelTemporary(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(success: data[DataStart] == 0, rawData: data, data: nil)
+}
diff --git a/DanaKit/DanaKit/Packets/DanaBasalGetProfileNumber.swift b/DanaKit/DanaKit/Packets/DanaBasalGetProfileNumber.swift
new file mode 100644
index 0000000..fa25fc2
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaBasalGetProfileNumber.swift
@@ -0,0 +1,21 @@
+//
+//  DanaPacketBasalGetProfileNumber.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketBasalGetProfileNumber {
+    let activeProfile: UInt8
+}
+
+let CommandBasalGetProfileNumber: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BASAL__GET_PROFILE_BASAL_RATE & 0xff)
+
+func generatePacketBasalGetProfileNumber() -> DanaGeneratePacket {
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_BASAL__GET_PROFILE_BASAL_RATE, data: nil)
+}
+
+func parsePacketBasalGetProfileNumber(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketBasalGetProfileNumber> {
+    return DanaParsePacket(success: true, rawData: data, data: PacketBasalGetProfileNumber(activeProfile: data[DataStart]))
+}
diff --git a/DanaKit/DanaKit/Packets/DanaBasalGetRate.swift b/DanaKit/DanaKit/Packets/DanaBasalGetRate.swift
new file mode 100644
index 0000000..56c822a
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaBasalGetRate.swift
@@ -0,0 +1,33 @@
+//
+//  DanaBasalGetRate.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketBasalGetRate {
+    let maxBasal: Double
+    let basalStep: Double
+    let basalProfile: [Double]
+}
+
+let CommandBasalGetRate: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BASAL__GET_BASAL_RATE & 0xff)
+
+func generatePacketBasalGetRate() -> DanaGeneratePacket {
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_BASAL__GET_BASAL_RATE, data: nil)
+}
+
+func parsePacketBasalGetRate(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketBasalGetRate> {
+    let maxBasal = Double(data.uint16(at: DataStart)) / 100.0
+    let basalStep = Double(data[DataStart + 2]) / 100.0
+
+    var basalProfile: [Double] = []
+    for i in 0..<24 {
+        let index = DataStart + 3 + i * 2
+        let basalValue = Double(data.uint16(at: index)) / 100.0
+        basalProfile.append(basalValue)
+    }
+
+    return DanaParsePacket(success: basalStep == 0.01, rawData: data, data: PacketBasalGetRate(maxBasal: maxBasal, basalStep: basalStep, basalProfile: basalProfile))
+}
diff --git a/DanaKit/DanaKit/Packets/DanaBasalSetProfileNumber.swift b/DanaKit/DanaKit/Packets/DanaBasalSetProfileNumber.swift
new file mode 100644
index 0000000..8cbaa22
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaBasalSetProfileNumber.swift
@@ -0,0 +1,22 @@
+//
+//  DanaBasalSetProfileNumber.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketBasalSetProfileNumber {
+    let profileNumber: UInt8
+}
+
+let CommandBasalSetProfileNumber: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BASAL__SET_PROFILE_NUMBER & 0xff)
+func generatePacketBasalSetProfileNumber(options: PacketBasalSetProfileNumber) -> DanaGeneratePacket {
+    let data = Data([options.profileNumber & 0xff])
+
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_BASAL__SET_PROFILE_NUMBER, data: data)
+}
+
+func parsePacketBasalSetProfileNumber(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(success: data[DataStart] == 0, rawData: data, data: nil)
+}
diff --git a/DanaKit/DanaKit/Packets/DanaBasalSetProfileRate.swift b/DanaKit/DanaKit/Packets/DanaBasalSetProfileRate.swift
new file mode 100644
index 0000000..98b1d38
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaBasalSetProfileRate.swift
@@ -0,0 +1,36 @@
+//
+//  DanaBasalSetProfileRate.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketBasalSetProfileRate {
+    var profileNumber: UInt8
+    var profileBasalRate: [Double]
+}
+
+let CommandBasalSetProfileRate: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BASAL__SET_PROFILE_BASAL_RATE & 0xff)
+
+func generatePacketBasalSetProfileRate(options: PacketBasalSetProfileRate) throws -> DanaGeneratePacket {
+    guard options.profileBasalRate.count == 24 else {
+        throw NSError(domain: "INVALID_LENGTH", code: 1, userInfo: [NSLocalizedDescriptionKey: "Invalid basal rate. Expected length = 24"])
+    }
+
+    var dataArray = [UInt8](repeating: 0, count: 49)
+    dataArray[0] = options.profileNumber
+
+    for i in 0..<24 {
+        let rate = UInt16(options.profileBasalRate[i] * 100)
+        dataArray[1 + i * 2] = UInt8(rate & 0xff)
+        dataArray[2 + i * 2] = UInt8((rate >> 8) & 0xff)
+    }
+
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_BASAL__SET_PROFILE_BASAL_RATE, data: Data(dataArray))
+}
+
+
+func parsePacketBasalSetProfileRate(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(success: data[DataStart] == 0, rawData: data, data: nil)
+}
diff --git a/DanaKit/DanaKit/Packets/DanaBasalSetSuspendOff.swift b/DanaKit/DanaKit/Packets/DanaBasalSetSuspendOff.swift
new file mode 100644
index 0000000..cc88eae
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaBasalSetSuspendOff.swift
@@ -0,0 +1,17 @@
+//
+//  DanaBasalSetSuspendOff.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let CommandBasalSetSuspendOff: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BASAL__SET_SUSPEND_OFF & 0xff)
+
+func generatePacketBasalSetSuspendOff() -> DanaGeneratePacket {
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_BASAL__SET_SUSPEND_OFF, data: nil)
+}
+
+func parsePacketBasalSetSuspendOff(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(success: data[DataStart] == 0, rawData: data, data: nil)
+}
diff --git a/DanaKit/DanaKit/Packets/DanaBasalSetSuspendOn.swift b/DanaKit/DanaKit/Packets/DanaBasalSetSuspendOn.swift
new file mode 100644
index 0000000..9cb8418
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaBasalSetSuspendOn.swift
@@ -0,0 +1,17 @@
+//
+//  BasalSetSuspendOn.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let CommandBasalSetSuspendOn: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BASAL__SET_SUSPEND_ON & 0xff)
+
+func generatePacketBasalSetSuspendOn() -> DanaGeneratePacket {
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_BASAL__SET_SUSPEND_ON, data: nil)
+}
+
+func parsePacketBasalSetSuspendOn(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(success: data[DataStart] == 0, rawData: data, data: nil)
+}
diff --git a/DanaKit/DanaKit/Packets/DanaBasalSetTemporary.swift b/DanaKit/DanaKit/Packets/DanaBasalSetTemporary.swift
new file mode 100644
index 0000000..6b8a384
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaBasalSetTemporary.swift
@@ -0,0 +1,27 @@
+//
+//  DanaBasalSetTemporary.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketBasalSetTemporary {
+    /// Ratio is in percentage
+    var temporaryBasalRatio: UInt8
+    
+    /// Only whole hours are accepted
+    var temporaryBasalDuration: UInt8
+}
+
+let CommandBasalSetTemporary: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BASAL__SET_TEMPORARY_BASAL & 0xff)
+
+func generatePacketBasalSetTemporary(options: PacketBasalSetTemporary) -> DanaGeneratePacket {
+    let data = Data([options.temporaryBasalRatio, options.temporaryBasalDuration])
+
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_BASAL__SET_TEMPORARY_BASAL, data: data)
+}
+
+func parsePacketBasalSetTemporary(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(success: data[DataStart] == 0, rawData: data, data: nil)
+}
diff --git a/DanaKit/DanaKit/Packets/DanaBolusCancelExtended.swift b/DanaKit/DanaKit/Packets/DanaBolusCancelExtended.swift
new file mode 100644
index 0000000..f90ee9d
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaBolusCancelExtended.swift
@@ -0,0 +1,17 @@
+//
+//  DanaBolusCancelExtended.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let CommandBolusCancelExtended: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BOLUS__SET_EXTENDED_BOLUS_CANCEL & 0xff)
+
+func generatePacketBolusCancelExtended() -> DanaGeneratePacket {
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_BOLUS__SET_EXTENDED_BOLUS_CANCEL, data: nil)
+}
+
+func parsePacketBolusCancelExtended(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(success: data[DataStart] == 0, rawData: data, data: nil)
+}
diff --git a/DanaKit/DanaKit/Packets/DanaBolusGet24CIRCFArray.swift b/DanaKit/DanaKit/Packets/DanaBolusGet24CIRCFArray.swift
new file mode 100644
index 0000000..5b50c85
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaBolusGet24CIRCFArray.swift
@@ -0,0 +1,36 @@
+//
+//  DanaBolusGet24CIRCFArray.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketBolusGet24CIRCFArray {
+    var unit: UInt8 // Change to the appropriate data type in Swift
+
+    /** Length: 24, value per hour. insulin to carbohydrate ratio */
+    var ic: [UInt16]
+
+    /** Length: 24, value per hour. insulin sensitivity factor */
+    var isf: [UInt16]
+}
+
+let CommandBolusGet24CIRCFArray: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BOLUS__GET_24_CIR_CF_ARRAY & 0xff)
+
+func generatePacketBolusGet24CIRCFArray() -> DanaGeneratePacket {
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_BOLUS__GET_24_CIR_CF_ARRAY, data: nil)
+}
+
+func parsePacketBolusGet24CIRCFArray(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketBolusGet24CIRCFArray> {
+    var isf: [UInt16] = []
+    var ic: [UInt16] = []
+    let unit = data[DataStart]
+
+    for i in 0..<24 {
+        ic.append(data.uint16(at: DataStart + 1 + 2 * i))
+        isf.append(data.uint16(at: DataStart + 49 + 2 * i) / (unit == 0 ? 1 : 100))
+    }
+
+    return DanaParsePacket(success: unit == 0 || unit == 1, rawData: data, data: PacketBolusGet24CIRCFArray(unit: unit, ic: ic, isf: isf))
+}
diff --git a/DanaKit/DanaKit/Packets/DanaBolusGetCIRCFArray.swift b/DanaKit/DanaKit/Packets/DanaBolusGetCIRCFArray.swift
new file mode 100644
index 0000000..1d12ef5
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaBolusGetCIRCFArray.swift
@@ -0,0 +1,76 @@
+//
+//  DanaBolusGetCIRCFArray.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketBolusGetCIRCFArray {
+    var language: UInt8
+    var unit: UInt8
+
+    // CIR
+    var morningCIR: UInt16
+    var cir02: UInt16
+    var afternoonCIR: UInt16
+    var cir04: UInt16
+    var eveningCIR: UInt16
+    var cir06: UInt16
+    var nightCIR: UInt16
+
+    // CF
+    var morningCF: Float
+    var cf02: Float
+    var afternoonCF: Float
+    var cf04: Float
+    var eveningCF: Float
+    var cf06: Float
+    var nightCF: Float
+}
+
+let CommandBolusGetCIRCFArray: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BOLUS__GET_CIR_CF_ARRAY & 0xff)
+
+func generatePacketBolusGetCIRCFArray() -> DanaGeneratePacket {
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_BOLUS__GET_CIR_CF_ARRAY, data: nil)
+}
+
+func parsePacketBolusGetCIRCFArray(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketBolusGetCIRCFArray> {
+    let language = data[DataStart]
+    let unit = data[DataStart + 1]
+    let morningCIR = data.uint16(at: DataStart + 2)
+    let cir02 = data.uint16(at: DataStart + 4)
+    let afternoonCIR = data.uint16(at: DataStart + 6)
+    let cir04 = data.uint16(at: DataStart + 8)
+    let eveningCIR = data.uint16(at: DataStart + 10)
+    let cir06 = data.uint16(at: DataStart + 12)
+    let nightCIR = data.uint16(at: DataStart + 14)
+
+    let divisionFactor = unit == 1 ? 100 : 1
+    let morningCF = Float(data.uint16(at: DataStart + 16)) / Float(divisionFactor)
+    let cf02 = Float(data.uint16(at: DataStart + 18)) / Float(divisionFactor)
+    let afternoonCF = Float(data.uint16(at: DataStart + 20)) / Float(divisionFactor)
+    let cf04 = Float(data.uint16(at: DataStart + 22)) / Float(divisionFactor)
+    let eveningCF = Float(data.uint16(at: DataStart + 24)) / Float(divisionFactor)
+    let cf06 = Float(data.uint16(at: DataStart + 26)) / Float(divisionFactor)
+    let nightCF = Float(data.uint16(at: DataStart + 28)) / Float(divisionFactor)
+
+    return DanaParsePacket(success: unit == 0 || unit == 1, rawData: data, data: PacketBolusGetCIRCFArray(
+        language: language,
+        unit: unit,
+        morningCIR: morningCIR,
+        cir02: cir02,
+        afternoonCIR: afternoonCIR,
+        cir04: cir04,
+        eveningCIR: eveningCIR,
+        cir06: cir06,
+        nightCIR: nightCIR,
+        morningCF: morningCF,
+        cf02: cf02,
+        afternoonCF: afternoonCF,
+        cf04: cf04,
+        eveningCF: eveningCF,
+        cf06: cf06,
+        nightCF: nightCF
+    ))
+}
diff --git a/DanaKit/DanaKit/Packets/DanaBolusGetCalculationInformation.swift b/DanaKit/DanaKit/Packets/DanaBolusGetCalculationInformation.swift
new file mode 100644
index 0000000..3ccdedc
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaBolusGetCalculationInformation.swift
@@ -0,0 +1,42 @@
+//
+//  DanaBolusGetCalculationInformation.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketBolusGetCalculationInformation {
+    var currentBg: UInt16
+    var carbohydrate: UInt16
+    var currentTarget: UInt16
+    var currentCIR: UInt16
+    var currentCF: UInt16
+
+    /** 0 = mg/dl, 1 = mmol/L */
+    var units: UInt8
+}
+
+let CommandBolusGetCalculationInformation: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BOLUS__GET_CALCULATION_INFORMATION & 0xff)
+
+func generatePacketBolusGetCalculationInformation() -> DanaGeneratePacket {
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_BOLUS__GET_CALCULATION_INFORMATION, data: nil)
+}
+
+func parsePacketBolusGetCalculationInformation(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketBolusGetCalculationInformation> {
+    let currentBg = data.uint16(at: DataStart + 1)
+    let carbohydrate = data.uint16(at: DataStart + 3)
+    let currentTarget = data.uint16(at: DataStart + 5)
+    let currentCIR = data.uint16(at: DataStart + 7)
+    let currentCF = data.uint16(at: DataStart + 9)
+    let units = data[DataStart + 11]
+
+    return DanaParsePacket(success: data[DataStart] == 0, rawData: data, data: PacketBolusGetCalculationInformation(
+        currentBg: units == 1 ? currentBg / 100 : currentBg,
+        carbohydrate: carbohydrate,
+        currentTarget: units == 1 ? currentTarget / 100 : currentTarget,
+        currentCIR: currentCIR,
+        currentCF: units == 1 ? currentCF / 100 : currentCF,
+        units: units
+    ))
+}
diff --git a/DanaKit/DanaKit/Packets/DanaBolusGetOption.swift b/DanaKit/DanaKit/Packets/DanaBolusGetOption.swift
new file mode 100644
index 0000000..48ee898
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaBolusGetOption.swift
@@ -0,0 +1,61 @@
+//
+//  DanaBolusGetOption.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketBolusGetOption {
+    var isExtendedBolusEnabled: Bool
+    var bolusCalculationOption: UInt8
+    var missedBolusConfig: UInt8
+    var missedBolus01StartHour: UInt8
+    var missedBolus01StartMinute: UInt8
+    var missedBolus01EndHour: UInt8
+    var missedBolus01EndMinute: UInt8
+    var missedBolus02StartHour: UInt8
+    var missedBolus02StartMinute: UInt8
+    var missedBolus02EndHour: UInt8
+    var missedBolus02EndMinute: UInt8
+    var missedBolus03StartHour: UInt8
+    var missedBolus03StartMinute: UInt8
+    var missedBolus03EndHour: UInt8
+    var missedBolus03EndMinute: UInt8
+    var missedBolus04StartHour: UInt8
+    var missedBolus04StartMinute: UInt8
+    var missedBolus04EndHour: UInt8
+    var missedBolus04EndMinute: UInt8
+}
+
+let CommandBolusGetOption: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BOLUS__GET_BOLUS_OPTION & 0xff)
+
+func generatePacketBolusGetOption() -> DanaGeneratePacket {
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_BOLUS__GET_BOLUS_OPTION, data: nil)
+}
+
+func parsePacketBolusGetOption(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketBolusGetOption> {
+    let isExtendedBolusEnabled = data[DataStart] == 1
+
+    return DanaParsePacket(success: isExtendedBolusEnabled, rawData: data, data: PacketBolusGetOption(
+        isExtendedBolusEnabled: isExtendedBolusEnabled,
+        bolusCalculationOption: data[DataStart + 1],
+        missedBolusConfig: data[DataStart + 2],
+        missedBolus01StartHour: data[DataStart + 3],
+        missedBolus01StartMinute: data[DataStart + 4],
+        missedBolus01EndHour: data[DataStart + 5],
+        missedBolus01EndMinute: data[DataStart + 6],
+        missedBolus02StartHour: data[DataStart + 7],
+        missedBolus02StartMinute: data[DataStart + 8],
+        missedBolus02EndHour: data[DataStart + 9],
+        missedBolus02EndMinute: data[DataStart + 10],
+        missedBolus03StartHour: data[DataStart + 11],
+        missedBolus03StartMinute: data[DataStart + 12],
+        missedBolus03EndHour: data[DataStart + 13],
+        missedBolus03EndMinute: data[DataStart + 14],
+        missedBolus04StartHour: data[DataStart + 15],
+        missedBolus04StartMinute: data[DataStart + 16],
+        missedBolus04EndHour: data[DataStart + 17],
+        missedBolus04EndMinute: data[DataStart + 18]
+    ))
+}
diff --git a/DanaKit/DanaKit/Packets/DanaBolusGetStepInformation.swift b/DanaKit/DanaKit/Packets/DanaBolusGetStepInformation.swift
new file mode 100644
index 0000000..1b5b8b4
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaBolusGetStepInformation.swift
@@ -0,0 +1,35 @@
+//
+//  DanaBolusGetStepInformation.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketBolusGetStepInformation {
+    var bolusType: UInt8
+    var initialBolusAmount: Double
+    var lastBolusTime: Date
+    var lastBolusAmount: Double
+    var maxBolus: Double
+    var bolusStep: UInt8
+}
+
+let CommandBolusGetStepInformation: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BOLUS__GET_STEP_BOLUS_INFORMATION & 0xff)
+
+func generatePacketBolusGetStepInformation() -> DanaGeneratePacket {
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_BOLUS__GET_STEP_BOLUS_INFORMATION, data: nil)
+}
+
+func parsePacketBolusGetStepInformation(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketBolusGetStepInformation> {
+    let lastBolusTime = Calendar.current.date(bySettingHour: Int(data[DataStart + 4]), minute: Int(data[DataStart + 5]), second: 0, of: Date()) ?? Date()
+
+    return DanaParsePacket(success: data[DataStart] == 0, rawData: data, data: PacketBolusGetStepInformation(
+        bolusType: data[DataStart + 1],
+        initialBolusAmount: Double(data.uint16(at: DataStart + 2)) / 100,
+        lastBolusTime: lastBolusTime,
+        lastBolusAmount: Double(data.uint16(at: DataStart + 6)) / 100,
+        maxBolus: Double(data.uint16(at: DataStart + 8)) / 100,
+        bolusStep: data[DataStart + 10]
+    ))
+}
diff --git a/DanaKit/DanaKit/Packets/DanaBolusSet24CIRCFArray.swift b/DanaKit/DanaKit/Packets/DanaBolusSet24CIRCFArray.swift
new file mode 100644
index 0000000..a1d9d80
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaBolusSet24CIRCFArray.swift
@@ -0,0 +1,45 @@
+//
+//  DanaBolusSet24CIRCFArray.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketBolusSet24CIRCFArray {
+    /** 0 => mg/dl, 1 => mmol/L */
+    var unit: UInt8
+    var ic: [Double]
+    var isf: [UInt16]
+}
+
+let CommandBolusSet24CIRCFArray: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BOLUS__SET_24_CIR_CF_ARRAY & 0xff)
+
+func generatePacketBolusSet24CIRCFArray(options: PacketBolusSet24CIRCFArray) throws -> DanaGeneratePacket {
+    guard options.isf.count == 24 && options.ic.count == 24 else {
+        throw NSError(domain: "INVALID_LENGTH", code: 1, userInfo: [NSLocalizedDescriptionKey: "Invalid length isf or ic"])
+    }
+
+    var adjustedISF = options.isf
+    if options.unit == 1 {
+        adjustedISF = options.isf.map { $0 * 100 }
+    }
+
+    var data = Data(count: 96)
+    for i in 0..<24 {
+        let roundedIC = UInt16(Double(options.ic[i]).rounded())
+        let roundedISF = UInt16(Double(adjustedISF[i]).rounded())
+        
+        data[i * 2] = UInt8(roundedIC & 0xff)
+        data[i * 2 + 1] = UInt8((roundedIC >> 8) & 0xff)
+        
+        data[i * 2 + 48] = UInt8(roundedISF & 0xff)
+        data[i * 2 + 49] = UInt8((roundedISF >> 8) & 0xff)
+    }
+
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_BOLUS__SET_24_CIR_CF_ARRAY, data: data)
+}
+
+func parsePacketBolusSet24CIRCFArray(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(success: data[DataStart] == 0, rawData: data, data: nil)
+}
diff --git a/DanaKit/DanaKit/Packets/DanaBolusSetExtended.swift b/DanaKit/DanaKit/Packets/DanaBolusSetExtended.swift
new file mode 100644
index 0000000..a93e9d1
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaBolusSetExtended.swift
@@ -0,0 +1,27 @@
+//
+//  DanaBolusSetExtended.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketBolusSetExtended {
+    var extendedAmount: UInt16
+    var extendedDurationInHalfHours: UInt8
+}
+
+let CommandBolusSetExtended: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BOLUS__SET_EXTENDED_BOLUS & 0xff)
+
+func generatePacketBolusSetExtended(options: PacketBolusSetExtended) -> DanaGeneratePacket {
+    var data = Data(count: 3)
+    data[0] = UInt8(options.extendedAmount & 0xff)
+    data[1] = UInt8((options.extendedAmount >> 8) & 0xff)
+    data[2] = options.extendedDurationInHalfHours
+
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_BOLUS__SET_EXTENDED_BOLUS, data: data)
+}
+
+func parsePacketBolusSetExtended(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(success: data[DataStart] == 0, rawData: data, data: nil)
+}
diff --git a/DanaKit/DanaKit/Packets/DanaBolusSetOption.swift b/DanaKit/DanaKit/Packets/DanaBolusSetOption.swift
new file mode 100644
index 0000000..bf623cc
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaBolusSetOption.swift
@@ -0,0 +1,60 @@
+//
+//  DanaBolusSetOption.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketBolusSetOption {
+    var extendedBolusOptionOnOff: UInt8
+    var bolusCalculationOption: UInt8
+    var missedBolusConfig: UInt8
+    var missedBolus01StartHour: UInt8
+    var missedBolus01StartMin: UInt8
+    var missedBolus01EndHour: UInt8
+    var missedBolus01EndMin: UInt8
+    var missedBolus02StartHour: UInt8
+    var missedBolus02StartMin: UInt8
+    var missedBolus02EndHour: UInt8
+    var missedBolus02EndMin: UInt8
+    var missedBolus03StartHour: UInt8
+    var missedBolus03StartMin: UInt8
+    var missedBolus03EndHour: UInt8
+    var missedBolus03EndMin: UInt8
+    var missedBolus04StartHour: UInt8
+    var missedBolus04StartMin: UInt8
+    var missedBolus04EndHour: UInt8
+    var missedBolus04EndMin: UInt8
+}
+
+let CommandBolusSetOption: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BOLUS__SET_BOLUS_OPTION & 0xff)
+
+func generatePacketBolusSetOption(options: PacketBolusSetOption) -> DanaGeneratePacket {
+    var data = Data(count: 19)
+    data[0] = options.extendedBolusOptionOnOff
+    data[1] = options.bolusCalculationOption
+    data[2] = options.missedBolusConfig
+    data[3] = options.missedBolus01StartHour
+    data[4] = options.missedBolus01StartMin
+    data[5] = options.missedBolus01EndHour
+    data[6] = options.missedBolus01EndMin
+    data[7] = options.missedBolus02StartHour
+    data[8] = options.missedBolus02StartMin
+    data[9] = options.missedBolus02EndHour
+    data[10] = options.missedBolus02EndMin
+    data[11] = options.missedBolus03StartHour
+    data[12] = options.missedBolus03StartMin
+    data[13] = options.missedBolus03EndHour
+    data[14] = options.missedBolus03EndMin
+    data[15] = options.missedBolus04StartHour
+    data[16] = options.missedBolus04StartMin
+    data[17] = options.missedBolus04EndHour
+    data[18] = options.missedBolus04EndMin
+
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_BOLUS__SET_BOLUS_OPTION, data: data)
+}
+
+func parsePacketBolusSetOption(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(success: data[DataStart] == 0, rawData: data, data: nil)
+}
diff --git a/DanaKit/DanaKit/Packets/DanaBolusStart.swift b/DanaKit/DanaKit/Packets/DanaBolusStart.swift
new file mode 100644
index 0000000..f3d44a4
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaBolusStart.swift
@@ -0,0 +1,77 @@
+//
+//  DanaBolusStart.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+public enum BolusSpeed: UInt8 {
+    case speed12 = 0
+    case speed30 = 1
+    case speed60 = 2
+    
+    static func all() -> [Int] {
+        return [Int(BolusSpeed.speed12.rawValue), Int(BolusSpeed.speed30.rawValue), Int(BolusSpeed.speed60.rawValue)]
+    }
+    
+    func format() -> String {
+        switch(self) {
+        case .speed12:
+            return LocalizedString("12 sec/E", comment: "Dana bolus speed 12u per min")
+        case .speed30:
+            return LocalizedString("30 sec/E", comment: "Dana bolus speed 30u per min")
+        case .speed60:
+            return LocalizedString("60 sec/E", comment: "Dana bolus speed 60u per min")
+        }
+    }
+}
+
+struct PacketBolusStart {
+    var amount: Double
+    var speed: BolusSpeed
+}
+
+let CommandBolusStart: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BOLUS__SET_STEP_BOLUS_START & 0xff)
+
+func generatePacketBolusStart(options: PacketBolusStart) -> DanaGeneratePacket {
+    let bolusRate = UInt16(options.amount * 100)
+    var data = Data(count: 3)
+    data[0] = UInt8(bolusRate & 0xff)
+    data[1] = UInt8((bolusRate >> 8) & 0xff)
+    data[2] = options.speed.rawValue
+
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_BOLUS__SET_STEP_BOLUS_START, data: data)
+}
+
+func parsePacketBolusStart(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(success: data[DataStart] == 0, rawData: data, data: nil)
+}
+
+/**
+ * Error codes:
+ * 0x01 => Pump suspended
+ * 0x04 => Bolus timeout active
+ * 0x10 => Max bolus violation
+ * 0x20 => Command error (Unknown what this error means)
+ * 0x40 => Speed error (Can only happen during development)
+ * 0x80 => Insulin limit violation
+ */
+func transformBolusError(code: UInt8) -> DanaKitPumpManagerError {
+    switch(code) {
+    case 0x01:
+        return DanaKitPumpManagerError.pumpSuspended
+    case 0x04:
+        return DanaKitPumpManagerError.bolusTimeoutActive
+    case 0x10:
+        return DanaKitPumpManagerError.bolusMaxViolation
+    case 0x20:
+        return DanaKitPumpManagerError.unknown("bolusCommandError")
+    case 0x40:
+        return DanaKitPumpManagerError.unknown("Invalid bolus speed error")
+    case 0x80:
+        return DanaKitPumpManagerError.bolusInsulinLimitViolation
+    default:
+        return DanaKitPumpManagerError.unknown("Unknown error: \(code)")
+    }
+}
diff --git a/DanaKit/DanaKit/Packets/DanaBolusStop.swift b/DanaKit/DanaKit/Packets/DanaBolusStop.swift
new file mode 100644
index 0000000..a4eecac
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaBolusStop.swift
@@ -0,0 +1,17 @@
+//
+//  DanaBolusStop.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let CommandBolusStop: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BOLUS__SET_STEP_BOLUS_STOP & 0xff)
+
+func generatePacketBolusStop() -> DanaGeneratePacket {
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_BOLUS__SET_STEP_BOLUS_STOP, data: nil)
+}
+
+func parsePacketBolusStop(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(success: data[DataStart] == 0, rawData: data, data: nil)
+}
diff --git a/DanaKit/DanaKit/Packets/DanaGeneralAvgBolus.swift b/DanaKit/DanaKit/Packets/DanaGeneralAvgBolus.swift
new file mode 100644
index 0000000..488c50f
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaGeneralAvgBolus.swift
@@ -0,0 +1,47 @@
+//
+//  DabaGeneralAvgBolus.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketGeneralAvgBolus {
+    var bolusAvg03days: Double
+    var bolusAvg07days: Double
+    var bolusAvg14days: Double
+    var bolusAvg21days: Double
+    var bolusAvg28days: Double
+}
+
+let CommandGeneralAvgBolus: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_REVIEW__BOLUS_AVG & 0xff)
+
+func generatePacketGeneralAvgBolus() -> DanaGeneratePacket {
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_REVIEW__BOLUS_AVG, data: nil)
+}
+
+func parsePacketGeneralAvgBolus(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketGeneralAvgBolus> {
+    let checkValue = (Double(1 & (0x000000ff << 8)) + Double(1 & 0x000000ff)) / 100
+
+    let bolusAvg03days = Double(data.uint16(at: DataStart)) / 100
+    let bolusAvg07days = Double(data.uint16(at: DataStart)) / 100
+    let bolusAvg14days = Double(data.uint16(at: DataStart)) / 100
+    let bolusAvg21days = Double(data.uint16(at: DataStart)) / 100
+    let bolusAvg28days = Double(data.uint16(at: DataStart)) / 100
+
+    return DanaParsePacket(success:
+        bolusAvg03days != checkValue &&
+        bolusAvg07days != checkValue &&
+        bolusAvg14days != checkValue &&
+        bolusAvg21days != checkValue &&
+        bolusAvg28days != checkValue,
+        rawData: data,
+        data: PacketGeneralAvgBolus(
+            bolusAvg03days: bolusAvg03days,
+            bolusAvg07days: bolusAvg07days,
+            bolusAvg14days: bolusAvg14days,
+            bolusAvg21days: bolusAvg21days,
+            bolusAvg28days: bolusAvg28days
+        )
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaGeneralClearUserTimeChangeFlag.swift b/DanaKit/DanaKit/Packets/DanaGeneralClearUserTimeChangeFlag.swift
new file mode 100644
index 0000000..5d4d714
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaGeneralClearUserTimeChangeFlag.swift
@@ -0,0 +1,17 @@
+//
+//  DanaGeneralClearUserTimeChangeFlag.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let CommandGeneralClearUserTimeChangeFlag: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_REVIEW__SET_USER_TIME_CHANGE_FLAG_CLEAR & 0xff)
+
+func generatePacketGeneralClearUserTimeChangeFlag() -> DanaGeneratePacket {
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_REVIEW__SET_USER_TIME_CHANGE_FLAG_CLEAR, data: nil)
+}
+
+func parsePacketGeneralClearUserTimeChangeFlag(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(success: data[DataStart] == 0, rawData: data, data: nil)
+}
diff --git a/DanaKit/DanaKit/Packets/DanaGeneralGetInitialScreenInformation.swift b/DanaKit/DanaKit/Packets/DanaGeneralGetInitialScreenInformation.swift
new file mode 100644
index 0000000..cb39336
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaGeneralGetInitialScreenInformation.swift
@@ -0,0 +1,67 @@
+//
+//  DanaGeneralGetInitialScreenInformation.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketGeneralGetInitialScreenInformation {
+    let isPumpSuspended: Bool
+    let isTempBasalInProgress: Bool
+    let isExtendedInProgress: Bool
+    let isDualBolusInProgress: Bool
+    let dailyTotalUnits: Double
+    let maxDailyTotalUnits: Double
+    let reservoirRemainingUnits: Double
+    let currentBasal: Double
+    let tempBasalPercent: Double
+    let batteryRemaining: Double
+    let extendedBolusAbsoluteRemaining: Double
+    let insulinOnBoard: Double
+    let errorState: Int?
+}
+
+let CommandGeneralGetInitialScreenInformation: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_REVIEW__INITIAL_SCREEN_INFORMATION & 0xff)
+
+func generatePacketGeneralGetInitialScreenInformation() -> DanaGeneratePacket {
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_REVIEW__INITIAL_SCREEN_INFORMATION, data: nil)
+}
+
+func parsePacketGeneralGetInitialScreenInformation(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketGeneralGetInitialScreenInformation> {
+    if data.count < 17 {
+        return DanaParsePacket(success: false, rawData: data, data: PacketGeneralGetInitialScreenInformation(
+            isPumpSuspended: false,
+            isTempBasalInProgress: false,
+            isExtendedInProgress: false,
+            isDualBolusInProgress: false,
+            dailyTotalUnits: -1,
+            maxDailyTotalUnits: -1,
+            reservoirRemainingUnits: -1,
+            currentBasal: -1,
+            tempBasalPercent: -1,
+            batteryRemaining: -1,
+            extendedBolusAbsoluteRemaining: -1,
+            insulinOnBoard: -1,
+            errorState: nil
+        ))
+    }
+
+    let statusPump = data[DataStart]
+
+    return DanaParsePacket(success: true, rawData: data, data: PacketGeneralGetInitialScreenInformation(
+        isPumpSuspended: (statusPump & 0x01) == 0x01,
+        isTempBasalInProgress: (statusPump & 0x10) == 0x10,
+        isExtendedInProgress: (statusPump & 0x04) == 0x04,
+        isDualBolusInProgress: (statusPump & 0x08) == 0x08,
+        dailyTotalUnits: Double(data.uint16(at: DataStart + 1)) / 100,
+        maxDailyTotalUnits: Double(data.uint16(at: DataStart + 3)) / 100,
+        reservoirRemainingUnits: Double(data.uint16(at: DataStart + 5)) / 100,
+        currentBasal: Double(data.uint16(at: DataStart + 7)) / 100,
+        tempBasalPercent: Double(data[DataStart + 9]),
+        batteryRemaining: Double(data[DataStart + 10]),
+        extendedBolusAbsoluteRemaining: Double(data.uint16(at: DataStart + 11)) / 100,
+        insulinOnBoard: Double(data.uint16(at: DataStart + 13)) / 100,
+        errorState: data.count > 17 ? Int(data[DataStart + 15]) : nil
+    ))
+}
diff --git a/DanaKit/DanaKit/Packets/DanaGeneralGetPumpCheck.swift b/DanaKit/DanaKit/Packets/DanaGeneralGetPumpCheck.swift
new file mode 100644
index 0000000..af2df89
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaGeneralGetPumpCheck.swift
@@ -0,0 +1,31 @@
+//
+//  DanaGeneralGetPumpCheck.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketGeneralGetPumpCheck {
+    let hwModel: UInt8
+    let protocolCode: UInt8
+    let productCode: UInt8
+}
+
+let CommandGeneralGetPumpCheck: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_REVIEW__GET_PUMP_CHECK & 0xff)
+
+func generatePacketGeneralGetPumpCheck() -> DanaGeneratePacket {
+    return DanaGeneratePacket(opCode: DanaPacketType.OPCODE_REVIEW__GET_PUMP_CHECK, data: nil)
+}
+
+func parsePacketGeneralGetPumpCheck(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketGeneralGetPumpCheck> {
+    return DanaParsePacket(
+        success: data[4] < 4, // Unsupported hardware...
+        rawData: data,
+        data: PacketGeneralGetPumpCheck(
+            hwModel: data[DataStart],
+            protocolCode: data[DataStart + 1],
+            productCode: data[DataStart + 2]
+        )
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaGeneralGetPumpDecRatio.swift b/DanaKit/DanaKit/Packets/DanaGeneralGetPumpDecRatio.swift
new file mode 100644
index 0000000..5995209
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaGeneralGetPumpDecRatio.swift
@@ -0,0 +1,30 @@
+//
+//  DanaGeneralGetPumpDecRatio.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketGeneralGetPumpDecRatio {
+    var decRatio: UInt8
+}
+
+let CommandGeneralGetPumpDecRatio: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_REVIEW__GET_PUMP_DEC_RATIO & 0xff)
+
+func generatePacketGeneralGetPumpDecRatio() -> DanaGeneratePacket {
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_REVIEW__GET_PUMP_DEC_RATIO,
+        data: nil
+    )
+}
+
+func parsePacketGeneralGetPumpDecRatio(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketGeneralGetPumpDecRatio> {
+    return DanaParsePacket(
+        success: true,
+        rawData: data,
+        data: PacketGeneralGetPumpDecRatio(
+            decRatio: data[DataStart] * 5
+        )
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaGeneralGetPumpTime.swift b/DanaKit/DanaKit/Packets/DanaGeneralGetPumpTime.swift
new file mode 100644
index 0000000..8506e32
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaGeneralGetPumpTime.swift
@@ -0,0 +1,42 @@
+//
+//  DanaGeneralGetPumpTime.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketGeneralGetPumpTime {
+    var time: Date
+}
+
+let CommandGeneralGetPumpTime: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_OPTION__GET_PUMP_TIME & 0xff)
+
+func generatePacketGeneralGetPumpTime() -> DanaGeneratePacket {
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_OPTION__GET_PUMP_TIME,
+        data: nil
+    )
+}
+
+func parsePacketGeneralGetPumpTime(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketGeneralGetPumpTime> {
+    let time = DateComponents(
+        year: 2000 + Int(data[DataStart]),
+        month: Int(data[DataStart + 1]),
+        day: Int(data[DataStart + 2]),
+        hour: Int(data[DataStart + 3]),
+        minute: Int(data[DataStart + 4]),
+        second: Int(data[DataStart + 5])
+    )
+
+    guard let parsedTime = Calendar.current.date(from: time) else {
+        // Handle error, if needed
+        return DanaParsePacket(success: false, rawData: data, data: nil)
+    }
+
+    return DanaParsePacket(
+        success: true,
+        rawData: data,
+        data: PacketGeneralGetPumpTime(time: parsedTime)
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaGeneralGetPumpTimeUtcWithTimezone.swift b/DanaKit/DanaKit/Packets/DanaGeneralGetPumpTimeUtcWithTimezone.swift
new file mode 100644
index 0000000..df61a0f
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaGeneralGetPumpTimeUtcWithTimezone.swift
@@ -0,0 +1,44 @@
+//
+//  DanaGeneralGetPumpTimeUtcWithTimezone.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketGeneralGetPumpTimeUtcWithTimezone {
+    var time: Date
+}
+
+let CommandGeneralGetPumpTimeUtcWithTimezone: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_OPTION__GET_PUMP_UTC_AND_TIME_ZONE & 0xff)
+
+func generatePacketGeneralGetPumpTimeUtcWithTimezone() -> DanaGeneratePacket {
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_OPTION__GET_PUMP_UTC_AND_TIME_ZONE,
+        data: nil
+    )
+}
+
+func parsePacketGeneralGetPumpTimeUtcWithTimezone(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketGeneralGetPumpTimeUtcWithTimezone> {
+    let timezoneOffsetInHours = Int(Int8(bitPattern: data[DataStart + 6]))
+    
+    let time = DateComponents(
+        year: 2000 + Int(data[DataStart]),
+        month: Int(data[DataStart + 1]),
+        day: Int(data[DataStart + 2]),
+        hour: Int(data[DataStart + 3]) + timezoneOffsetInHours,
+        minute: Int(data[DataStart + 4]),
+        second: Int(data[DataStart + 5])
+    )
+
+    guard let parsedTime = Calendar.current.date(from: time) else {
+        // Handle error, if needed
+        return DanaParsePacket(success: false, rawData: data, data: nil)
+    }
+
+    return DanaParsePacket(
+        success: true,
+        rawData: data,
+        data: PacketGeneralGetPumpTimeUtcWithTimezone(time: parsedTime)
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaGeneralGetShippingInformation.swift b/DanaKit/DanaKit/Packets/DanaGeneralGetShippingInformation.swift
new file mode 100644
index 0000000..57c0023
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaGeneralGetShippingInformation.swift
@@ -0,0 +1,67 @@
+//
+//  DanaGeneralGetShippingInformation.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketGeneralGetShippingInformation {
+    var serialNumber: String
+    var shippingCountry: String
+    var shippingDate: Date
+}
+
+let CommandGeneralGetShippingInformation: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_REVIEW__GET_SHIPPING_INFORMATION & 0xff)
+
+func generatePacketGeneralGetShippingInformation() -> DanaGeneratePacket {
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_REVIEW__GET_SHIPPING_INFORMATION,
+        data: nil
+    )
+}
+
+func parsePacketGeneralGetShippingInformation(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketGeneralGetShippingInformation> {
+    guard data.count >= 18 else {
+        return DanaParsePacket(
+            success: false,
+            rawData: data,
+            data: PacketGeneralGetShippingInformation(
+                serialNumber: "",
+                shippingCountry: "",
+                shippingDate: Date()
+            )
+        )
+    }
+
+    let serialNumberData = data.subdata(in: DataStart..<DataStart + 10)
+    let shippingCountryData = data.subdata(in: DataStart + 10..<DataStart + 13)
+
+    let serialNumber = String(data: serialNumberData, encoding: .utf8) ?? ""
+    let shippingCountry = String(data: shippingCountryData, encoding: .utf8) ?? ""
+
+    let shippingDate = DateComponents(
+        calendar: .current,
+        year: 2000 + Int(data[DataStart + 13]),
+        month: Int(data[DataStart + 14]) - 1,
+        day: Int(data[DataStart + 15]),
+        hour: 0,
+        minute: 0,
+        second: 0
+    )
+
+    guard let parsedDate = Calendar.current.date(from: shippingDate) else {
+        // Handle error, if needed
+        return DanaParsePacket(success: false, rawData: data, data: nil)
+    }
+
+    return DanaParsePacket(
+        success: true,
+        rawData: data,
+        data: PacketGeneralGetShippingInformation(
+            serialNumber: serialNumber,
+            shippingCountry: shippingCountry,
+            shippingDate: parsedDate
+        )
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaGeneralGetShippingVersion.swift b/DanaKit/DanaKit/Packets/DanaGeneralGetShippingVersion.swift
new file mode 100644
index 0000000..610475a
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaGeneralGetShippingVersion.swift
@@ -0,0 +1,30 @@
+//
+//  DanaGeneralGetShippingVersion.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketGeneralGetShippingVersion {
+    var bleModel: String
+}
+
+let CommandGeneralGetShippingVersion: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_GENERAL__GET_SHIPPING_VERSION & 0xff)
+
+func generatePacketGeneralGetShippingVersion() -> DanaGeneratePacket {
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_GENERAL__GET_SHIPPING_VERSION,
+        data: nil
+    )
+}
+
+func parsePacketGeneralGetShippingVersion(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketGeneralGetShippingVersion> {
+    return DanaParsePacket(
+        success: true,
+        rawData: data,
+        data: PacketGeneralGetShippingVersion(
+            bleModel: String(data: data.subdata(in: DataStart..<data.count), encoding: .utf8) ?? ""
+        )
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaGeneralGetUserOption.swift b/DanaKit/DanaKit/Packets/DanaGeneralGetUserOption.swift
new file mode 100644
index 0000000..14c34f6
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaGeneralGetUserOption.swift
@@ -0,0 +1,75 @@
+//
+//  DanaGeneralGetUserOption.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+public enum BeepAlarmType: UInt8 {
+    case sound = 1
+    case vibration = 2
+    case both = 3
+    
+    static func all() -> [Int] {
+        [1, 2, 3]
+    }
+}
+
+public struct PacketGeneralGetUserOption {
+    var isTimeDisplay24H: Bool
+    var isButtonScrollOnOff: Bool
+    var beepAndAlarm: BeepAlarmType
+    var lcdOnTimeInSec: UInt8
+    var backlightOnTimInSec: UInt8
+    var selectedLanguage: UInt8
+    var units: UInt8
+    var shutdownHour: UInt8
+    var lowReservoirRate: UInt8
+    var cannulaVolume: UInt16
+    var refillAmount: UInt16
+
+    var selectableLanguage1: UInt8
+    var selectableLanguage2: UInt8
+    var selectableLanguage3: UInt8
+    var selectableLanguage4: UInt8
+    var selectableLanguage5: UInt8
+
+    /** Only on hw v7+ */
+    var targetBg: UInt16?
+}
+
+let CommandGeneralGetUserOption: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_OPTION__GET_USER_OPTION & 0xff)
+
+func generatePacketGeneralGetUserOption() -> DanaGeneratePacket {
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_OPTION__GET_USER_OPTION,
+        data: nil
+    )
+}
+
+func parsePacketGeneralGetUserOption(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketGeneralGetUserOption> {
+    return DanaParsePacket(
+        success: data[DataStart + 3] >= 5,
+        rawData: data,
+        data: PacketGeneralGetUserOption(
+            isTimeDisplay24H: data[DataStart] == 0,
+            isButtonScrollOnOff: data[DataStart + 1] == 1,
+            beepAndAlarm: BeepAlarmType(rawValue: data[DataStart + 2]) ?? .sound,
+            lcdOnTimeInSec: data[DataStart + 3],
+            backlightOnTimInSec: data[DataStart + 4],
+            selectedLanguage: data[DataStart + 5],
+            units: data[DataStart + 6],
+            shutdownHour: data[DataStart + 7],
+            lowReservoirRate: data[DataStart + 8],
+            cannulaVolume: data.uint16(at: DataStart + 9),
+            refillAmount: data.uint16(at: DataStart + 11),
+            selectableLanguage1: data[DataStart + 13],
+            selectableLanguage2: data[DataStart + 14],
+            selectableLanguage3: data[DataStart + 15],
+            selectableLanguage4: data[DataStart + 16],
+            selectableLanguage5: data[DataStart + 17],
+            targetBg: data.count >= 22 ? data.uint16(at: DataStart + 18) : nil
+        )
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaGeneralGetUserTimeChangeFlag.swift b/DanaKit/DanaKit/Packets/DanaGeneralGetUserTimeChangeFlag.swift
new file mode 100644
index 0000000..0019d5b
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaGeneralGetUserTimeChangeFlag.swift
@@ -0,0 +1,36 @@
+//
+//  DanaGeneralGetUserTimeChangeFlag.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketGeneralGetUserTimeChangeFlag {
+    var userTimeChangeFlag: UInt8
+}
+
+let CommandGeneralGetUserTimeChangeFlag: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_REVIEW__GET_USER_TIME_CHANGE_FLAG & 0xff)
+
+func generatePacketGeneralGetUserTimeChangeFlag() -> DanaGeneratePacket {
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_REVIEW__GET_USER_TIME_CHANGE_FLAG,
+        data: nil
+    )
+}
+
+func parsePacketGeneralGetUserTimeChangeFlag(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketGeneralGetUserTimeChangeFlag> {
+    guard data.count >= 3 else {
+        return DanaParsePacket(
+            success: false,
+            rawData: data,
+            data: PacketGeneralGetUserTimeChangeFlag(userTimeChangeFlag: 0)
+        )
+    }
+
+    return DanaParsePacket(
+        success: true,
+        rawData: data,
+        data: PacketGeneralGetUserTimeChangeFlag(userTimeChangeFlag: data[DataStart])
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaGeneralKeepConnection.swift b/DanaKit/DanaKit/Packets/DanaGeneralKeepConnection.swift
new file mode 100644
index 0000000..2939fec
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaGeneralKeepConnection.swift
@@ -0,0 +1,24 @@
+//
+//  DanaGeneralKeepConnection.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let CommandGeneralKeepConnection: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_ETC__KEEP_CONNECTION & 0xff)
+
+func generatePacketGeneralKeepConnection() -> DanaGeneratePacket {
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_ETC__KEEP_CONNECTION,
+        data: nil
+    )
+}
+
+func parsePacketGeneralKeepConnection(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(
+        success: data[DataStart] == 0,
+        rawData: data,
+        data: nil
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaGeneralSaveHistory.swift b/DanaKit/DanaKit/Packets/DanaGeneralSaveHistory.swift
new file mode 100644
index 0000000..a97cabd
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaGeneralSaveHistory.swift
@@ -0,0 +1,39 @@
+//
+//  DanaGeneralSaveHistory.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketGeneralSaveHistory {
+    var historyType: UInt8
+    var historyDate: Date
+    var historyCode: UInt8
+    var historyValue: UInt16
+}
+
+let CommandGeneralSaveHistory: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_ETC__SET_HISTORY_SAVE & 0xff)
+
+func generatePacketGeneralSaveHistory(options: PacketGeneralSaveHistory) -> DanaGeneratePacket {
+    var data = Data(count: 10)
+    data[0] = options.historyType
+    data.addDate(at: 1, date: options.historyDate)
+
+    data[7] = options.historyCode
+    data[8] = UInt8(options.historyValue & 0xff)
+    data[9] = UInt8((options.historyValue >> 8) & 0xff)
+
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_ETC__SET_HISTORY_SAVE,
+        data: data
+    )
+}
+
+func parsePacketGeneralSaveHistory(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(
+        success: data[DataStart] == 0,
+        rawData: data,
+        data: nil
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaGeneralSetHistoryUploadMode.swift b/DanaKit/DanaKit/Packets/DanaGeneralSetHistoryUploadMode.swift
new file mode 100644
index 0000000..5cc4973
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaGeneralSetHistoryUploadMode.swift
@@ -0,0 +1,35 @@
+//
+//  DanaGeneralSetHistoryUploadMode.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketGeneralSetHistoryUploadMode {
+    /**
+       * 1 -> Turn on history upload mode, 0 -> turn off history upload mode.
+       *
+       * Need to do this before and after fetching the history from pump
+       */
+    var mode: UInt8
+}
+
+let CommandGeneralSetHistoryUploadMode: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_REVIEW__SET_HISTORY_UPLOAD_MODE & 0xff)
+
+func generatePacketGeneralSetHistoryUploadMode(options: PacketGeneralSetHistoryUploadMode) -> DanaGeneratePacket {
+    let data = Data([options.mode])
+
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_REVIEW__SET_HISTORY_UPLOAD_MODE,
+        data: data
+    )
+}
+
+func parsePacketGeneralSetHistoryUploadMode(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(
+        success: data[DataStart] == 0,
+        rawData: data,
+        data: nil
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaGeneralSetPumpTime.swift b/DanaKit/DanaKit/Packets/DanaGeneralSetPumpTime.swift
new file mode 100644
index 0000000..f449bc5
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaGeneralSetPumpTime.swift
@@ -0,0 +1,31 @@
+//
+//  DanaGeneralSetPumpTime.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketGeneralSetPumpTime {
+    var time: Date
+}
+
+let CommandGeneralSetPumpTime: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_OPTION__SET_PUMP_TIME & 0xff)
+
+func generatePacketGeneralSetPumpTime(options: PacketGeneralSetPumpTime) -> DanaGeneratePacket {
+    var data = Data(count: 6)
+    data.addDate(at: 0, date: options.time, utc: false)
+
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_OPTION__SET_PUMP_TIME,
+        data: data
+    )
+}
+
+func parsePacketGeneralSetPumpTime(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(
+        success: data[DataStart] == 0,
+        rawData: data,
+        data: nil
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaGeneralSetPumpTimeUtcWithTimezone.swift b/DanaKit/DanaKit/Packets/DanaGeneralSetPumpTimeUtcWithTimezone.swift
new file mode 100644
index 0000000..03cc012
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaGeneralSetPumpTimeUtcWithTimezone.swift
@@ -0,0 +1,33 @@
+//
+//  DanaGeneralSetPumpTimeUtcWithTimezone.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketGeneralSetPumpTimeUtcWithTimezone {
+    var time: Date
+    var zoneOffset: UInt8
+}
+
+let CommandGeneralSetPumpTimeUtcWithTimezone: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_OPTION__SET_PUMP_UTC_AND_TIME_ZONE & 0xff)
+
+func generatePacketGeneralSetPumpTimeUtcWithTimezone(options: PacketGeneralSetPumpTimeUtcWithTimezone) -> DanaGeneratePacket {
+    var data = Data(count: 7)
+    data.addDate(at: 0, date: options.time)
+    data[6] = (options.zoneOffset < 0 ? 0b10000000 : 0x0) | (options.zoneOffset & 0x7f)
+
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_OPTION__SET_PUMP_UTC_AND_TIME_ZONE,
+        data: data
+    )
+}
+
+func parsePacketGeneralSetPumpTimeUtcWithTimezone(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(
+        success: data[DataStart] == 0,
+        rawData: data,
+        data: nil
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaGeneralSetUserOption.swift b/DanaKit/DanaKit/Packets/DanaGeneralSetUserOption.swift
new file mode 100644
index 0000000..df9b726
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaGeneralSetUserOption.swift
@@ -0,0 +1,61 @@
+//
+//  DanaGeneralSetUserOption.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+public struct PacketGeneralSetUserOption {
+    var isTimeDisplay24H: Bool
+    var isButtonScrollOnOff: Bool
+    var beepAndAlarm: UInt8
+    var lcdOnTimeInSec: UInt8
+    var backlightOnTimeInSec: UInt8
+    var selectedLanguage: UInt8
+    var units: UInt8
+    var shutdownHour: UInt8
+    var lowReservoirRate: UInt8
+    var cannulaVolume: UInt16
+    var refillAmount: UInt16
+
+    /** Only on hw v7+ */
+    var targetBg: UInt16?
+}
+
+let CommandGeneralSetUserOption: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_OPTION__SET_USER_OPTION & 0xff)
+
+func generatePacketGeneralSetUserOption(options: PacketGeneralSetUserOption) -> DanaGeneratePacket {
+    var data = Data(count: options.targetBg != nil ? 15 : 13)
+    data[0] = options.isTimeDisplay24H ? 0x00 : 0x01
+    data[1] = options.isButtonScrollOnOff ? 0x01 : 0x00
+    data[2] = options.beepAndAlarm
+    data[3] = options.lcdOnTimeInSec
+    data[4] = options.backlightOnTimeInSec
+    data[5] = options.selectedLanguage
+    data[6] = options.units
+    data[7] = options.shutdownHour
+    data[8] = options.lowReservoirRate
+    data[9] = UInt8(options.cannulaVolume & 0xff)
+    data[10] = UInt8((options.cannulaVolume >> 8) & 0xff)
+    data[11] = UInt8(options.refillAmount & 0xff)
+    data[12] = UInt8((options.refillAmount >> 8) & 0xff)
+
+    if let targetBg = options.targetBg {
+        data[13] = UInt8(targetBg & 0xff)
+        data[14] = UInt8((targetBg >> 8) & 0xff)
+    }
+
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_OPTION__SET_USER_OPTION,
+        data: data
+    )
+}
+
+func parsePacketGeneralSetUserOption(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(
+        success: data[DataStart] == 0,
+        rawData: data,
+        data: nil
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaHistoryAlarm.swift b/DanaKit/DanaKit/Packets/DanaHistoryAlarm.swift
new file mode 100644
index 0000000..3b4d7ab
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaHistoryAlarm.swift
@@ -0,0 +1,16 @@
+//
+//  DanaHistoryAlarm.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let CommandHistoryAlarm: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_REVIEW__ALARM & 0xff)
+
+func generatePacketHistoryAlarm(options: PacketHistoryBase) -> DanaGeneratePacket {
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_REVIEW__ALARM,
+        data: generatePacketHistoryData(options: options)
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaHistoryAll.swift b/DanaKit/DanaKit/Packets/DanaHistoryAll.swift
new file mode 100644
index 0000000..7c462a0
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaHistoryAll.swift
@@ -0,0 +1,16 @@
+//
+//  DanaHistoryAll.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let CommandHistoryAll: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_REVIEW__ALL_HISTORY & 0xff)
+
+func generatePacketHistoryAll(options: PacketHistoryBase) -> DanaGeneratePacket {
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_REVIEW__ALL_HISTORY,
+        data: generatePacketHistoryData(options: options)
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaHistoryBasal.swift b/DanaKit/DanaKit/Packets/DanaHistoryBasal.swift
new file mode 100644
index 0000000..32693aa
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaHistoryBasal.swift
@@ -0,0 +1,16 @@
+//
+//  DanaHistoryBasal.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let CommandHistoryBasal: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_REVIEW__BASAL & 0xff)
+
+func generatePacketHistoryBasal(options: PacketHistoryBase) -> DanaGeneratePacket {
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_REVIEW__BASAL,
+        data: generatePacketHistoryData(options: options)
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaHistoryBase.swift b/DanaKit/DanaKit/Packets/DanaHistoryBase.swift
new file mode 100644
index 0000000..1fd4abf
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaHistoryBase.swift
@@ -0,0 +1,276 @@
+//
+//  DanaHistoryBase.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct HistoryCode {
+    static let RECORD_TYPE_DONE_UPLOAD = -0x01
+    static let RECORD_TYPE_UNKNOWN = 0x00
+    static let RECORD_TYPE_BOLUS = 0x02
+    static let RECORD_TYPE_DAILY = 0x03
+    static let RECORD_TYPE_PRIME = 0x04
+    static let RECORD_TYPE_REFILL = 0x05
+    static let RECORD_TYPE_GLUCOSE = 0x06
+    static let RECORD_TYPE_CARBO = 0x07
+    static let RECORD_TYPE_SUSPEND = 0x09
+    static let RECORD_TYPE_ALARM = 0x0a
+    static let RECORD_TYPE_BASALHOUR = 0x0b
+    static let RECORD_TYPE_TEMP_BASAL = 0x99
+}
+
+struct PacketHistoryBase {
+    var from: Date?
+    var usingUtc: Bool
+}
+
+struct HistoryItem {
+    var code: Int
+    var raw: Data
+    var timestamp: Date
+    var value: Double?
+    var durationInMin: Double?
+    var dailyBasal: Double?
+    var dailyBolus: Double?
+    var alarm: UInt8?
+    var bolusType: String?
+}
+
+func generatePacketHistoryData(options: PacketHistoryBase) -> Data {
+    var data = Data(count: 6)
+
+    if options.from == nil {
+        data[0] = 0
+        data[1] = 1
+        data[2] = 1
+        data[3] = 0
+        data[4] = 0
+        data[5] = 0
+    } else {
+        data.addDate(at: 0, date: options.from!, utc: options.usingUtc)
+    }
+    
+    return data
+}
+
+func parsePacketHistory(data: Data, usingUtc: Bool?) -> DanaParsePacket<HistoryItem> {
+    let usingUtc = usingUtc ?? true
+    if data.count == 3 {
+        return DanaParsePacket(
+            success: false,
+            rawData: data,
+            data: HistoryItem(
+                code: HistoryCode.RECORD_TYPE_UNKNOWN,
+                raw: data,
+                timestamp: Date(),
+                value: Double(data[DataStart])
+            )
+        )
+    }
+
+    // This packet marks the upload of history to be done
+    if data.count == 5 {
+        return DanaParsePacket(
+            success: data[DataStart] == 0x00,
+            rawData: data,
+            data: HistoryItem(
+                code: HistoryCode.RECORD_TYPE_DONE_UPLOAD,
+                raw: data,
+                timestamp: Date(),
+                value: Double(data[DataStart])
+            )
+        )
+    }
+
+    let param7 = data[DataStart + 6]
+    let param8 = data[DataStart + 7]
+    let value = (UInt16(data[DataStart + 8]) << 8) + UInt16(data[DataStart + 9])
+
+    let recordType = Int(data[DataStart])
+    switch recordType {
+    case HistoryCode.RECORD_TYPE_BOLUS:
+        return DanaParsePacket(
+            success: true,
+            rawData: data,
+            data: HistoryItem(
+                code: HistoryCode.RECORD_TYPE_BOLUS,
+                raw: data,
+                timestamp: data.date(at: DataStart + 1, usingUtc),
+                value: Double(value) * 0.01,
+                durationInMin: Double((param8 & 0x0f) * 60 + param7),
+                bolusType: getBolusType(param8: param8)
+            )
+        )
+
+    case HistoryCode.RECORD_TYPE_DAILY:
+        let dailyBasal = Double((UInt16(data[DataStart + 4]) << 8) + UInt16(data[DataStart + 5])) * 0.01
+        let dailyBolus = Double((UInt16(data[DataStart + 6]) << 8) + UInt16(data[DataStart + 7])) * 0.01
+        var timestamp = data.date(at: DataStart + 1, usingUtc)
+        timestamp = Calendar.current.date(bySettingHour: 0, minute: 0, second: 0, of: timestamp) ?? timestamp
+
+        return DanaParsePacket(
+            success: true,
+            rawData: data,
+            data: HistoryItem(
+                code: HistoryCode.RECORD_TYPE_DAILY,
+                raw: data,
+                timestamp: timestamp,
+                dailyBasal: dailyBasal,
+                dailyBolus: dailyBolus
+            )
+        )
+
+    case HistoryCode.RECORD_TYPE_PRIME:
+        return DanaParsePacket(
+            success: true,
+            rawData: data,
+            data: HistoryItem(
+                code: HistoryCode.RECORD_TYPE_PRIME,
+                raw: data,
+                timestamp: data.date(at: DataStart + 1, usingUtc),
+                value: Double(value) * 0.01
+            )
+        )
+
+    case HistoryCode.RECORD_TYPE_REFILL:
+        return DanaParsePacket(
+            success: true,
+            rawData: data,
+            data: HistoryItem(
+                code: HistoryCode.RECORD_TYPE_REFILL,
+                raw: data,
+                timestamp: data.date(at: DataStart + 1, usingUtc),
+                value: Double(value) * 0.01
+            )
+        )
+
+    case HistoryCode.RECORD_TYPE_BASALHOUR:
+        return DanaParsePacket(
+            success: true,
+            rawData: data,
+            data: HistoryItem(
+                code: HistoryCode.RECORD_TYPE_BASALHOUR,
+                raw: data,
+                timestamp: data.date(at: DataStart + 1, usingUtc),
+                value: Double(value) * 0.01
+            )
+        )
+
+    case HistoryCode.RECORD_TYPE_TEMP_BASAL:
+        return DanaParsePacket(
+            success: true,
+            rawData: data,
+            data: HistoryItem(
+                code: HistoryCode.RECORD_TYPE_TEMP_BASAL,
+                raw: data,
+                timestamp: data.date(at: DataStart + 1, usingUtc),
+                value: Double(value) * 0.01
+            )
+        )
+
+    case HistoryCode.RECORD_TYPE_GLUCOSE:
+        return DanaParsePacket(
+            success: true,
+            rawData: data,
+            data: HistoryItem(
+                code: HistoryCode.RECORD_TYPE_GLUCOSE,
+                raw: data,
+                timestamp: data.date(at: DataStart + 1, usingUtc),
+                value: Double(value)
+            )
+        )
+
+    case HistoryCode.RECORD_TYPE_CARBO:
+        return DanaParsePacket(
+            success: true,
+            rawData: data,
+            data: HistoryItem(
+                code: HistoryCode.RECORD_TYPE_CARBO,
+                raw: data,
+                timestamp: data.date(at: DataStart + 1, usingUtc),
+                value: Double(value)
+            )
+        )
+
+    case HistoryCode.RECORD_TYPE_SUSPEND:
+        return DanaParsePacket(
+            success: true,
+            rawData: data,
+            data: HistoryItem(
+                code: HistoryCode.RECORD_TYPE_SUSPEND,
+                raw: data,
+                timestamp: data.date(at: DataStart + 1, usingUtc),
+                value: param8 == 0x4f ? 1 : 0
+            )
+        )
+
+    case HistoryCode.RECORD_TYPE_ALARM:
+        return DanaParsePacket(
+            success: true,
+            rawData: data,
+            data: HistoryItem(
+                code: HistoryCode.RECORD_TYPE_ALARM,
+                raw: data,
+                timestamp: data.date(at: DataStart + 1, usingUtc),
+                value: Double(value) * 0.01,
+                alarm: param8 // getAlarmMessage(param8: param8)
+            )
+        )
+
+    default:
+        return DanaParsePacket(
+            success: false,
+            rawData: data,
+            data: HistoryItem(
+                code: HistoryCode.RECORD_TYPE_UNKNOWN,
+                raw: data,
+                timestamp: data.date(at: DataStart + 1, usingUtc),
+                alarm: UInt8(recordType) //"UNKNOWN Message type: \(recordType)"
+            )
+        )
+    }
+}
+
+func getBolusType(param8: UInt8) -> String {
+    switch param8 & 0xf0 {
+    case 0xa0:
+        return "DS"
+    case 0xc0:
+        return "E"
+    case 0x80:
+        return "S"
+    case 0x90:
+        return "DE"
+    default:
+        return "None"
+    }
+}
+
+func getAlarmMessage(param8: UInt8?) -> String {
+    guard let param8 = param8 else {
+        return ""
+    }
+    
+    switch param8 {
+    case 0x50:
+        return "Basal Compare"
+    case 0x52:
+        return "Empty Reservoir"
+    case 0x43:
+        return "Check"
+    case 0x4f:
+        return "Occlusion"
+    case 0x4d:
+        return "Basal max"
+    case 0x44:
+        return "Daily max"
+    case 0x42:
+        return "Low Battery"
+    case 0x53:
+        return "Shutdown"
+    default:
+        return "None"
+    }
+}
diff --git a/DanaKit/DanaKit/Packets/DanaHistoryBloodGlucose.swift b/DanaKit/DanaKit/Packets/DanaHistoryBloodGlucose.swift
new file mode 100644
index 0000000..3c02225
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaHistoryBloodGlucose.swift
@@ -0,0 +1,16 @@
+//
+//  DanaHistoryBloodGlucose.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let CommandHistoryBloodGlucose: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_REVIEW__BLOOD_GLUCOSE & 0xff)
+
+func generatePacketHistoryBloodGlucose(options: PacketHistoryBase) -> DanaGeneratePacket {
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_REVIEW__BLOOD_GLUCOSE,
+        data: generatePacketHistoryData(options: options)
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaHistoryBolus.swift b/DanaKit/DanaKit/Packets/DanaHistoryBolus.swift
new file mode 100644
index 0000000..be1abe7
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaHistoryBolus.swift
@@ -0,0 +1,16 @@
+//
+//  DanaHistoryBolus.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let CommandHistoryBolus: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_REVIEW__BOLUS & 0xff)
+
+func generatePacketHistoryBolus(options: PacketHistoryBase) -> DanaGeneratePacket {
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_REVIEW__BOLUS,
+        data: generatePacketHistoryData(options: options)
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaHistoryCarbohydrates.swift b/DanaKit/DanaKit/Packets/DanaHistoryCarbohydrates.swift
new file mode 100644
index 0000000..0a8ada2
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaHistoryCarbohydrates.swift
@@ -0,0 +1,16 @@
+//
+//  DanaHistoryCarbohydrates.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let CommandHistoryCarbohydrates: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_REVIEW__CARBOHYDRATE & 0xff)
+
+func generatePacketHistoryCarbohydrates(options: PacketHistoryBase) -> DanaGeneratePacket {
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_REVIEW__CARBOHYDRATE,
+        data: generatePacketHistoryData(options: options)
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaHistoryDaily.swift b/DanaKit/DanaKit/Packets/DanaHistoryDaily.swift
new file mode 100644
index 0000000..089e1c8
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaHistoryDaily.swift
@@ -0,0 +1,16 @@
+//
+//  DanaHistoryDaily.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let CommandHistoryDaily: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_REVIEW__DAILY & 0xff)
+
+func generatePacketHistoryDaily(options: PacketHistoryBase) -> DanaGeneratePacket {
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_REVIEW__DAILY,
+        data: generatePacketHistoryData(options: options)
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaHistoryPrime.swift b/DanaKit/DanaKit/Packets/DanaHistoryPrime.swift
new file mode 100644
index 0000000..e283318
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaHistoryPrime.swift
@@ -0,0 +1,16 @@
+//
+//  DanaHistoryPrime.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let CommandHistoryPrime: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_REVIEW__PRIME & 0xff)
+
+func generatePacketHistoryPrime(options: PacketHistoryBase) -> DanaGeneratePacket {
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_REVIEW__PRIME,
+        data: generatePacketHistoryData(options: options)
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaHistoryRefill.swift b/DanaKit/DanaKit/Packets/DanaHistoryRefill.swift
new file mode 100644
index 0000000..2035fe6
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaHistoryRefill.swift
@@ -0,0 +1,16 @@
+//
+//  DanaHistoryRefill.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let CommandHistoryRefill: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_REVIEW__REFILL & 0xff)
+
+func generatePacketHistoryRefill(options: PacketHistoryBase) -> DanaGeneratePacket {
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_REVIEW__REFILL,
+        data: generatePacketHistoryData(options: options)
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaHistorySuspend.swift b/DanaKit/DanaKit/Packets/DanaHistorySuspend.swift
new file mode 100644
index 0000000..6318946
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaHistorySuspend.swift
@@ -0,0 +1,16 @@
+//
+//  DanaHistorySuspend.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let CommandHistorySuspend: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_REVIEW__SUSPEND & 0xff)
+
+func generatePacketHistorySuspend(options: PacketHistoryBase) -> DanaGeneratePacket {
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_REVIEW__SUSPEND,
+        data: generatePacketHistoryData(options: options)
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaHistoryTemporary.swift b/DanaKit/DanaKit/Packets/DanaHistoryTemporary.swift
new file mode 100644
index 0000000..f7d0b40
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaHistoryTemporary.swift
@@ -0,0 +1,16 @@
+//
+//  DanaHistoryTemporary.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let CommandHistoryTemporary: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_REVIEW__TEMPORARY & 0xff)
+
+func generatePacketHistoryTemporary(options: PacketHistoryBase) -> DanaGeneratePacket {
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_REVIEW__TEMPORARY,
+        data: generatePacketHistoryData(options: options)
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaLoopHistoryEvents.swift b/DanaKit/DanaKit/Packets/DanaLoopHistoryEvents.swift
new file mode 100644
index 0000000..fa7705d
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaLoopHistoryEvents.swift
@@ -0,0 +1,38 @@
+//
+//  DanaLoopHistoryEvents.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketLoopHistoryEvents {
+    var from: Date?
+}
+
+let CommandLoopHistoryEvents: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE__APS_HISTORY_EVENTS & 0xff)
+
+func generatePacketLoopHistoryEvents(options: PacketLoopHistoryEvents) -> DanaGeneratePacket {
+    var data = Data(count: 6)
+
+    if options.from == nil {
+        data[0] = 0
+        data[1] = 1
+        data[2] = 1
+        data[3] = 0
+        data[4] = 0
+        data[5] = 0
+    } else {
+        data.addDate(at: 0, date: options.from!)
+    }
+
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE__APS_HISTORY_EVENTS,
+        data: data
+    )
+}
+
+func parsePacketLoopHistoryEvents(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    // Implement the parse logic as needed
+    fatalError("Not implemented")
+}
diff --git a/DanaKit/DanaKit/Packets/DanaLoopSetEventHistory.swift b/DanaKit/DanaKit/Packets/DanaLoopSetEventHistory.swift
new file mode 100644
index 0000000..c6e9e0f
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaLoopSetEventHistory.swift
@@ -0,0 +1,66 @@
+//
+//  DanaLoopSetEventHistory.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct LoopHistoryEvents {
+    static let tempStart: UInt8 = 1
+    static let tempStop: UInt8 = 2
+    static let extendedStart: UInt8 = 3
+    static let extendedStop: UInt8 = 4
+    static let bolus: UInt8 = 5
+    static let dualBolus: UInt8 = 6
+    static let dualExtendedStart: UInt8 = 7
+    static let dualExtendedStop: UInt8 = 8
+    static let suspendOn: UInt8 = 9
+    static let suspendOff: UInt8 = 10
+    static let refill: UInt8 = 11
+    static let prime: UInt8 = 12
+    static let profileChange: UInt8 = 13
+    static let carbs: UInt8 = 14
+    static let primeCannula: UInt8 = 15
+    static let timeChange: UInt8 = 16
+}
+
+struct PacketLoopSetEventHistory {
+    var packetType: UInt8
+    var time: Date
+    var param1: UInt16
+    var param2: UInt16
+}
+
+let CommandLoopSetEventHistory: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE__APS_SET_EVENT_HISTORY & 0xff)
+
+func generatePacketLoopSetEventHistory(options: PacketLoopSetEventHistory) -> DanaGeneratePacket {
+    var data = Data(count: 11)
+    var param1 = options.param1
+
+    if (options.packetType == LoopHistoryEvents.carbs || options.packetType == LoopHistoryEvents.bolus) && param1 < 0 {
+        // Assuming LoopHistoryEvents is an enum with associated values, you may need to adjust this condition
+        param1 = 0
+    }
+
+    data[0] = options.packetType
+    data.addDate(at: 1, date: options.time)
+
+    data[7] = UInt8(param1 >> 8)
+    data[8] = UInt8(param1 & 0xff)
+    data[9] = UInt8(options.param2 >> 8)
+    data[10] = UInt8(options.param2 & 0xff)
+
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE__APS_SET_EVENT_HISTORY,
+        data: data
+    )
+}
+
+func parsePacketLoopSetEventHistory(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(
+        success: data[DataStart] == 0,
+        rawData: data,
+        data: nil // Replace with the actual parsed data if needed
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaLoopSetTemporaryBasal.swift b/DanaKit/DanaKit/Packets/DanaLoopSetTemporaryBasal.swift
new file mode 100644
index 0000000..134ae52
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaLoopSetTemporaryBasal.swift
@@ -0,0 +1,51 @@
+//
+//  DanaLoopSetTemporaryBasal.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+enum LoopTempBasalDuration {
+    case min15
+    case min30
+}
+
+struct PacketLoopSetTemporaryBasal {
+    var percent: UInt16
+    var duration: LoopTempBasalDuration
+}
+
+struct TemporaryBasalDuration {
+    static let PARAM_30_MIN: UInt8 = 160
+    static let PARAM_15_MIN: UInt8 = 150
+}
+
+let CommandLoopSetTemporaryBasal: UInt16 = (UInt16(DanaPacketType.TYPE_RESPONSE & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_BASAL__APS_SET_TEMPORARY_BASAL & 0xff)
+
+func generatePacketLoopSetTemporaryBasal(options: PacketLoopSetTemporaryBasal) -> DanaGeneratePacket {
+    var percent = options.percent
+
+    if percent > 500 {
+        percent = 500
+    }
+
+    let data = Data([
+        UInt8(percent & 0xff),
+        UInt8((percent >> 8) & 0xff),
+        UInt8((options.duration == .min30 ? TemporaryBasalDuration.PARAM_30_MIN : TemporaryBasalDuration.PARAM_15_MIN) & 0xff),
+    ])
+
+    return DanaGeneratePacket(
+        opCode: DanaPacketType.OPCODE_BASAL__APS_SET_TEMPORARY_BASAL,
+        data: data
+    )
+}
+
+func parsePacketLoopSetTemporaryBasal(data: Data, usingUtc: Bool?) -> DanaParsePacket<Any> {
+    return DanaParsePacket(
+        success: data[DataStart] == 0,
+        rawData: data,
+        data: nil
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaNotifyAlarm.swift b/DanaKit/DanaKit/Packets/DanaNotifyAlarm.swift
new file mode 100644
index 0000000..9f3e4df
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaNotifyAlarm.swift
@@ -0,0 +1,46 @@
+//
+//  DanaNotifyAlarm.swift
+//  
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//
+
+struct PacketNotifyAlarm {
+    var code: UInt8
+    var alert: PumpManagerAlert
+}
+
+let CommandNotifyAlarm: UInt16 = (UInt16(DanaPacketType.TYPE_NOTIFY & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_NOTIFY__ALARM & 0xff)
+
+func parsePacketNotifyAlarm(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketNotifyAlarm> {
+    let DANA_NOTIFY_ALARM: [Int: PumpManagerAlert] = [
+        0x01: PumpManagerAlert.batteryZeroPercent(data),
+        0x02: PumpManagerAlert.pumpError(data),
+        0x03: PumpManagerAlert.occlusion(data),
+        0x04: PumpManagerAlert.lowBattery(data),
+        0x05: PumpManagerAlert.shutdown(data),
+        0x06: PumpManagerAlert.basalCompare(data),
+        0x07: PumpManagerAlert.bloodSugarMeasure(data),
+        0xff: PumpManagerAlert.bloodSugarMeasure(data),
+        0x08: PumpManagerAlert.remainingInsulinLevel(data),
+        0xfe: PumpManagerAlert.remainingInsulinLevel(data),
+        0x09: PumpManagerAlert.emptyReservoir(data),
+        0x0a: PumpManagerAlert.checkShaft(data),
+        0x0b: PumpManagerAlert.basalMax(data),
+        0x0c: PumpManagerAlert.dailyMax(data),
+        0xfd: PumpManagerAlert.bloodSugarCheckMiss(data),
+    ]
+    
+    let code = data[DataStart]
+    let alert = DANA_NOTIFY_ALARM[Int(code)] ?? PumpManagerAlert.unknown(nil)
+
+    return DanaParsePacket(
+        success: true,
+        notifyType: CommandNotifyAlarm,
+        rawData: data,
+        data: PacketNotifyAlarm(
+            code: code,
+            alert: alert
+        )
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaNotifyDeliveryComplete.swift b/DanaKit/DanaKit/Packets/DanaNotifyDeliveryComplete.swift
new file mode 100644
index 0000000..3690f97
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaNotifyDeliveryComplete.swift
@@ -0,0 +1,24 @@
+//
+//  DanaNotifyDeliveryComplete.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct PacketNotifyDeliveryComplete {
+    var deliveredInsulin: Double
+}
+
+let CommandNotifyDeliveryComplete: UInt16 = (UInt16(DanaPacketType.TYPE_NOTIFY & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_NOTIFY__DELIVERY_COMPLETE & 0xff)
+
+func parsePacketNotifyDeliveryComplete(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketNotifyDeliveryComplete> {
+    return DanaParsePacket(
+        success: true,
+        notifyType: CommandNotifyDeliveryComplete,
+        rawData: data,
+        data: PacketNotifyDeliveryComplete(
+            deliveredInsulin: Double(data.uint16(at: DataStart)) / 100
+        )
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaNotifyDeliveryRateDisplay.swift b/DanaKit/DanaKit/Packets/DanaNotifyDeliveryRateDisplay.swift
new file mode 100644
index 0000000..7b86b35
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaNotifyDeliveryRateDisplay.swift
@@ -0,0 +1,23 @@
+//
+//  DanaNotifyDeliveryRateDisplay.swift
+//  
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//
+
+struct PacketNotifyDeliveryRateDisplay {
+    var deliveredInsulin: Double
+}
+
+let CommandNotifyDeliveryRateDisplay: UInt16 = (UInt16(DanaPacketType.TYPE_NOTIFY & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_NOTIFY__DELIVERY_RATE_DISPLAY & 0xff)
+
+func parsePacketNotifyDeliveryRateDisplay(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketNotifyDeliveryRateDisplay> {
+    return DanaParsePacket(
+        success: true,
+        notifyType: CommandNotifyDeliveryRateDisplay,
+        rawData: data,
+        data: PacketNotifyDeliveryRateDisplay(
+            deliveredInsulin: Double(data.uint16(at: DataStart)) / 100
+        )
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaNotifyMissedBolus.swift b/DanaKit/DanaKit/Packets/DanaNotifyMissedBolus.swift
new file mode 100644
index 0000000..654fbfd
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaNotifyMissedBolus.swift
@@ -0,0 +1,37 @@
+//
+//  DanaNotifyMissedBolus.swift
+//  
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//
+
+struct PacketNotifyMissedBolus {
+    var startTime: Date
+    var endTime: Date
+}
+
+let CommandNotifyMissedBolus: UInt16 = (UInt16(DanaPacketType.TYPE_NOTIFY & 0xff) << 8) + UInt16(DanaPacketType.OPCODE_NOTIFY__MISSED_BOLUS_ALARM & 0xff)
+
+func parsePacketNotifyMissedBolus(data: Data, usingUtc: Bool?) -> DanaParsePacket<PacketNotifyMissedBolus> {
+    let startTime = Date(
+        timeIntervalSinceReferenceDate: TimeInterval(
+            (UInt16(data[DataStart]) * 3600 + UInt16(data[DataStart + 1]) * 60) * 60
+        )
+    )
+
+    let endTime = Date(
+        timeIntervalSinceReferenceDate: TimeInterval(
+            (UInt16(data[DataStart + 2]) * 3600 + UInt16(data[DataStart + 3]) * 60) * 60
+        )
+    )
+
+    return DanaParsePacket(
+        success: data[DataStart] != 0x01 && data[DataStart + 1] != 0x01 && data[DataStart + 2] != 0x01 && data[DataStart + 3] != 0x01,
+        notifyType: CommandNotifyMissedBolus,
+        rawData: data,
+        data: PacketNotifyMissedBolus(
+            startTime: startTime,
+            endTime: endTime
+        )
+    )
+}
diff --git a/DanaKit/DanaKit/Packets/DanaPacketBase.swift b/DanaKit/DanaKit/Packets/DanaPacketBase.swift
new file mode 100644
index 0000000..a6db2db
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaPacketBase.swift
@@ -0,0 +1,36 @@
+//
+//  DanaPacketBase.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct DanaGeneratePacket {
+    let type: UInt8? = nil
+    let opCode: UInt8
+    let data: Data?
+}
+
+protocol DanaParsePacketProtocol {
+    var success: Bool { get }
+    var command: UInt16? { get set }
+    var opCode: UInt8? { get set }
+    var notifyType: UInt16? { get set }
+    associatedtype PayloadType
+    var rawData: Data { get }
+    var data: PayloadType? { get }
+}
+
+struct DanaParsePacket<T>: DanaParsePacketProtocol {
+    let success: Bool
+    var command: UInt16? = nil
+    var opCode: UInt8? = nil
+    var notifyType: UInt16? = nil
+    let rawData: Data
+    let data: T?
+}
+
+let TypeIndex = 0;
+let OpCodeIndex = 1;
+let DataStart = 2;
diff --git a/DanaKit/DanaKit/Packets/DanaPacketParser.swift b/DanaKit/DanaKit/Packets/DanaPacketParser.swift
new file mode 100644
index 0000000..010a620
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaPacketParser.swift
@@ -0,0 +1,78 @@
+//
+//  DanaPacketParser.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 17/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+func parseMessage(data: Data, usingUtc: Bool) -> (any DanaParsePacketProtocol)? {
+    let receivedCommand = (UInt16(data[TypeIndex] & 0xff) << 8) + UInt16(data[OpCodeIndex] & 0xff)
+
+    guard let parser = findMessageParser[receivedCommand] else {
+        return nil
+    }
+
+    var parsedResult = parser(data, usingUtc) as! (any DanaParsePacketProtocol)
+    parsedResult.command = receivedCommand
+    parsedResult.opCode = data[OpCodeIndex] & 0xff
+
+    return parsedResult
+}
+
+let findMessageParser: [UInt16: (Data, Bool?) -> Any] = [
+    CommandBasalCancelTemporary: parsePacketBasalCancelTemporary,
+    CommandBasalGetProfileNumber: parsePacketBasalGetProfileNumber,
+    CommandBasalGetRate: parsePacketBasalGetRate,
+    CommandBasalSetProfileRate: parsePacketBasalSetProfileRate,
+    CommandBasalSetProfileNumber: parsePacketBasalSetProfileNumber,
+    CommandBasalSetSuspendOff: parsePacketBasalSetSuspendOff,
+    CommandBasalSetSuspendOn: parsePacketBasalSetSuspendOn,
+    CommandBasalSetTemporary: parsePacketBasalSetTemporary,
+    CommandBolusCancelExtended: parsePacketBolusCancelExtended,
+    CommandBolusGet24CIRCFArray: parsePacketBolusGet24CIRCFArray,
+    CommandBolusGetCIRCFArray: parsePacketBolusGetCIRCFArray,
+    CommandBolusGetCalculationInformation: parsePacketBolusGetCalculationInformation,
+    CommandBolusGetOption: parsePacketBolusGetOption,
+    CommandBolusGetStepInformation: parsePacketBolusGetStepInformation,
+    CommandBolusSet24CIRCFArray: parsePacketBolusSet24CIRCFArray,
+    CommandBolusSetExtended: parsePacketBolusSetExtended,
+    CommandBolusSetOption: parsePacketBolusSetOption,
+    CommandBolusStart: parsePacketBolusStart,
+    CommandBolusStop: parsePacketBolusStop,
+    CommandGeneralAvgBolus: parsePacketGeneralAvgBolus,
+    CommandGeneralClearUserTimeChangeFlag: parsePacketGeneralClearUserTimeChangeFlag,
+    CommandGeneralGetInitialScreenInformation: parsePacketGeneralGetInitialScreenInformation,
+    CommandGeneralGetPumpCheck: parsePacketGeneralGetPumpCheck,
+    CommandGeneralGetPumpDecRatio: parsePacketGeneralGetPumpDecRatio,
+    CommandGeneralGetPumpTime: parsePacketGeneralGetPumpTime,
+    CommandGeneralGetPumpTimeUtcWithTimezone: parsePacketGeneralGetPumpTimeUtcWithTimezone,
+    CommandGeneralGetShippingInformation: parsePacketGeneralGetShippingInformation,
+    CommandGeneralGetShippingVersion: parsePacketGeneralGetShippingVersion,
+    CommandGeneralGetUserOption: parsePacketGeneralGetUserOption,
+    CommandGeneralGetUserTimeChangeFlag: parsePacketGeneralGetUserTimeChangeFlag,
+    CommandGeneralKeepConnection: parsePacketGeneralKeepConnection,
+    CommandGeneralSaveHistory: parsePacketGeneralSaveHistory,
+    CommandGeneralSetHistoryUploadMode: parsePacketGeneralSetHistoryUploadMode,
+    CommandGeneralSetPumpTime: parsePacketGeneralSetPumpTime,
+    CommandGeneralSetPumpTimeUtcWithTimezone: parsePacketGeneralSetPumpTimeUtcWithTimezone,
+    CommandGeneralSetUserOption: parsePacketGeneralSetUserOption,
+    CommandHistoryAlarm: parsePacketHistory,
+    CommandHistoryAll: parsePacketHistory,
+    CommandHistoryBasal: parsePacketHistory,
+    CommandHistoryBloodGlucose: parsePacketHistory,
+    CommandHistoryBolus: parsePacketHistory,
+    CommandHistoryCarbohydrates: parsePacketHistory,
+    CommandHistoryDaily: parsePacketHistory,
+    CommandHistoryPrime: parsePacketHistory,
+    CommandHistoryRefill: parsePacketHistory,
+    CommandHistorySuspend: parsePacketHistory,
+    CommandHistoryTemporary: parsePacketHistory,
+    CommandLoopHistoryEvents: parsePacketLoopHistoryEvents,
+    CommandLoopSetEventHistory: parsePacketLoopSetEventHistory,
+    CommandLoopSetTemporaryBasal: parsePacketLoopSetTemporaryBasal,
+    CommandNotifyAlarm: parsePacketNotifyAlarm,
+    CommandNotifyDeliveryComplete: parsePacketNotifyDeliveryComplete,
+    CommandNotifyDeliveryRateDisplay: parsePacketNotifyDeliveryRateDisplay,
+    CommandNotifyMissedBolus: parsePacketNotifyMissedBolus,
+]
diff --git a/DanaKit/DanaKit/Packets/DanaPacketType.swift b/DanaKit/DanaKit/Packets/DanaPacketType.swift
new file mode 100644
index 0000000..7826bfb
--- /dev/null
+++ b/DanaKit/DanaKit/Packets/DanaPacketType.swift
@@ -0,0 +1,99 @@
+//
+//  DanaPacketType.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 06/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+struct DanaPacketType {
+    static let TYPE_ENCRYPTION_REQUEST: UInt8 = 0x01
+    static let TYPE_ENCRYPTION_RESPONSE: UInt8 = 0x02
+    static let TYPE_COMMAND: UInt8 = 0xa1
+    static let TYPE_RESPONSE: UInt8 = 0xb2
+    static let TYPE_NOTIFY: UInt8 = 0xc3
+
+    static let OPCODE_ENCRYPTION__PUMP_CHECK: UInt8 = 0x00
+    static let OPCODE_ENCRYPTION__TIME_INFORMATION: UInt8 = 0x01
+    static let OPCODE_ENCRYPTION__CHECK_PASSKEY: UInt8 = 0xd0
+    static let OPCODE_ENCRYPTION__PASSKEY_REQUEST: UInt8 = 0xd1
+    static let OPCODE_ENCRYPTION__PASSKEY_RETURN: UInt8 = 0xd2
+    static let OPCODE_ENCRYPTION__GET_PUMP_CHECK: UInt8 = 0xf3
+    static let OPCODE_ENCRYPTION__GET_EASYMENU_CHECK: UInt8 = 0xf4
+    static let OPCODE_NOTIFY__DELIVERY_COMPLETE: UInt8 = 0x01
+    static let OPCODE_NOTIFY__DELIVERY_RATE_DISPLAY: UInt8 = 0x02
+    static let OPCODE_NOTIFY__ALARM: UInt8 = 0x03
+    static let OPCODE_NOTIFY__MISSED_BOLUS_ALARM: UInt8 = 0x04
+    static let OPCODE_REVIEW__INITIAL_SCREEN_INFORMATION: UInt8 = 0x02
+    static let OPCODE_REVIEW__DELIVERY_STATUS: UInt8 = 0x03
+    static let OPCODE_REVIEW__GET_PASSWORD: UInt8 = 0x04
+    static let OPCODE_REVIEW__BOLUS_AVG: UInt8 = 0x10
+    static let OPCODE_REVIEW__BOLUS: UInt8 = 0x11
+    static let OPCODE_REVIEW__DAILY: UInt8 = 0x12
+    static let OPCODE_REVIEW__PRIME: UInt8 = 0x13
+    static let OPCODE_REVIEW__REFILL: UInt8 = 0x14
+    static let OPCODE_REVIEW__BLOOD_GLUCOSE: UInt8 = 0x15
+    static let OPCODE_REVIEW__CARBOHYDRATE: UInt8 = 0x16
+    static let OPCODE_REVIEW__TEMPORARY: UInt8 = 0x17
+    static let OPCODE_REVIEW__SUSPEND: UInt8 = 0x18
+    static let OPCODE_REVIEW__ALARM: UInt8 = 0x19
+    static let OPCODE_REVIEW__BASAL: UInt8 = 0x1a
+    static let OPCODE_REVIEW__ALL_HISTORY: UInt8 = 0x1f
+    static let OPCODE_REVIEW__GET_SHIPPING_INFORMATION: UInt8 = 0x20
+    static let OPCODE_REVIEW__GET_PUMP_CHECK: UInt8 = 0x21
+    static let OPCODE_REVIEW__GET_USER_TIME_CHANGE_FLAG: UInt8 = 0x22
+    static let OPCODE_REVIEW__SET_USER_TIME_CHANGE_FLAG_CLEAR: UInt8 = 0x23
+    static let OPCODE_REVIEW__GET_MORE_INFORMATION: UInt8 = 0x24
+    static let OPCODE_REVIEW__SET_HISTORY_UPLOAD_MODE: UInt8 = 0x25
+    static let OPCODE_REVIEW__GET_TODAY_DELIVERY_TOTAL: UInt8 = 0x26
+    static let OPCODE_BOLUS__GET_STEP_BOLUS_INFORMATION: UInt8 = 0x40
+    static let OPCODE_BOLUS__GET_EXTENDED_BOLUS_STATE: UInt8 = 0x41
+    static let OPCODE_BOLUS__GET_EXTENDED_BOLUS: UInt8 = 0x42
+    static let OPCODE_BOLUS__GET_DUAL_BOLUS: UInt8 = 0x43
+    static let OPCODE_BOLUS__SET_STEP_BOLUS_STOP: UInt8 = 0x44
+    static let OPCODE_BOLUS__GET_CARBOHYDRATE_CALCULATION_INFORMATION: UInt8 = 0x45
+    static let OPCODE_BOLUS__GET_EXTENDED_MENU_OPTION_STATE: UInt8 = 0x46
+    static let OPCODE_BOLUS__SET_EXTENDED_BOLUS: UInt8 = 0x47
+    static let OPCODE_BOLUS__SET_DUAL_BOLUS: UInt8 = 0x48
+    static let OPCODE_BOLUS__SET_EXTENDED_BOLUS_CANCEL: UInt8 = 0x49
+    static let OPCODE_BOLUS__SET_STEP_BOLUS_START: UInt8 = 0x4a
+    static let OPCODE_BOLUS__GET_CALCULATION_INFORMATION: UInt8 = 0x4b
+    static let OPCODE_BOLUS__GET_BOLUS_RATE: UInt8 = 0x4c
+    static let OPCODE_BOLUS__SET_BOLUS_RATE: UInt8 = 0x4d
+    static let OPCODE_BOLUS__GET_CIR_CF_ARRAY: UInt8 = 0x4e
+    static let OPCODE_BOLUS__SET_CIR_CF_ARRAY: UInt8 = 0x4f
+    static let OPCODE_BOLUS__GET_BOLUS_OPTION: UInt8 = 0x50
+    static let OPCODE_BOLUS__SET_BOLUS_OPTION: UInt8 = 0x51
+    static let OPCODE_BOLUS__GET_24_CIR_CF_ARRAY: UInt8 = 0x52
+    static let OPCODE_BOLUS__SET_24_CIR_CF_ARRAY: UInt8 = 0x53
+    static let OPCODE_BASAL__SET_TEMPORARY_BASAL: UInt8 = 0x60
+    static let OPCODE_BASAL__TEMPORARY_BASAL_STATE: UInt8 = 0x61
+    static let OPCODE_BASAL__CANCEL_TEMPORARY_BASAL: UInt8 = 0x62
+    static let OPCODE_BASAL__GET_PROFILE_NUMBER: UInt8 = 0x63
+    static let OPCODE_BASAL__SET_PROFILE_NUMBER: UInt8 = 0x64
+    static let OPCODE_BASAL__GET_PROFILE_BASAL_RATE: UInt8 = 0x65
+    static let OPCODE_BASAL__SET_PROFILE_BASAL_RATE: UInt8 = 0x66
+    static let OPCODE_BASAL__GET_BASAL_RATE: UInt8 = 0x67
+    static let OPCODE_BASAL__SET_BASAL_RATE: UInt8 = 0x68
+    static let OPCODE_BASAL__SET_SUSPEND_ON: UInt8 = 0x69
+    static let OPCODE_BASAL__SET_SUSPEND_OFF: UInt8 = 0x6a
+    static let OPCODE_OPTION__GET_PUMP_TIME: UInt8 = 0x70
+    static let OPCODE_OPTION__SET_PUMP_TIME: UInt8 = 0x71
+    static let OPCODE_OPTION__GET_USER_OPTION: UInt8 = 0x72
+    static let OPCODE_OPTION__SET_USER_OPTION: UInt8 = 0x73
+    static let OPCODE_BASAL__APS_SET_TEMPORARY_BASAL: UInt8 = 0xc1
+    static let OPCODE__APS_HISTORY_EVENTS: UInt8 = 0xc2
+    static let OPCODE__APS_SET_EVENT_HISTORY: UInt8 = 0xc3
+    static let OPCODE_REVIEW__GET_PUMP_DEC_RATIO: UInt8 = 0x80
+    static let OPCODE_GENERAL__GET_SHIPPING_VERSION: UInt8 = 0x81
+    static let OPCODE_OPTION__GET_EASY_MENU_OPTION: UInt8 = 0x74
+    static let OPCODE_OPTION__SET_EASY_MENU_OPTION: UInt8 = 0x75
+    static let OPCODE_OPTION__GET_EASY_MENU_STATUS: UInt8 = 0x76
+    static let OPCODE_OPTION__SET_EASY_MENU_STATUS: UInt8 = 0x77
+    static let OPCODE_OPTION__GET_PUMP_UTC_AND_TIME_ZONE: UInt8 = 0x78
+    static let OPCODE_OPTION__SET_PUMP_UTC_AND_TIME_ZONE: UInt8 = 0x79
+    static let OPCODE_OPTION__GET_PUMP_TIME_ZONE: UInt8 = 0x7a
+    static let OPCODE_OPTION__SET_PUMP_TIME_ZONE: UInt8 = 0x7b
+    static let OPCODE_ETC__SET_HISTORY_SAVE: UInt8 = 0xe0
+    static let OPCODE_ETC__KEEP_CONNECTION: UInt8 = 0xff
+}
diff --git a/DanaKit/DanaKit/PumpManager/BluetoothManager.swift b/DanaKit/DanaKit/PumpManager/BluetoothManager.swift
new file mode 100644
index 0000000..ef383ba
--- /dev/null
+++ b/DanaKit/DanaKit/PumpManager/BluetoothManager.swift
@@ -0,0 +1,229 @@
+//
+//  BluetoothManager.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 14/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import CoreBluetooth
+import Foundation
+
+public enum ConnectionResult {
+    case success
+    case requestedPincode(String?)
+    case invalidBle5Keys
+    case failure(Error)
+}
+
+public struct DanaPumpScan {
+    let bleIdentifier: String
+    let name: String
+    let peripheral: CBPeripheral
+}
+
+enum EncryptionType: UInt8 {
+    case DEFAULT = 0
+    case RSv3 = 1
+    case BLE_5 = 2
+}
+
+class BluetoothManager : NSObject {
+    
+    private let log = DanaLogger(category: "BluetoothManager")
+    
+    private var autoConnectUUID: String?
+    private let deviceNameRegex = try! NSRegularExpression(pattern: "^[a-zA-Z]{3}[0-9]{5}[a-zA-Z]{2}$")
+    
+    private var manager: CBCentralManager! = nil
+    private let managerQueue = DispatchQueue(label: "com.DanaKit.bluetoothManagerQueue", qos: .unspecified)
+    
+    public var pumpManagerDelegate: DanaKitPumpManager?
+    private(set) var peripheral: CBPeripheral?
+    private var peripheralManager: PeripheralManager?
+    
+    private var connectionCompletion: ((ConnectionResult) -> Void)?
+    
+    private var devices: [DanaPumpScan] = []
+    
+    public var isConnected: Bool {
+        self.peripheralManager != nil
+    }
+
+    override init() {
+        super.init()
+        
+        managerQueue.sync {
+            self.manager = CBCentralManager(delegate: self, queue: managerQueue, options: [CBCentralManagerOptionRestoreIdentifierKey: "com.DanaKit"])
+        }
+    }
+    
+    func startScan() throws {
+        guard self.manager.state == .poweredOn else {
+            throw NSError(domain: "Invalid bluetooth state. State: " + String(self.manager.state.rawValue), code: 0, userInfo: nil)
+        }
+        
+        guard !self.manager.isScanning else {
+            log.info("Device is already scanning...")
+            return
+        }
+        
+        self.devices = []
+        
+        manager.scanForPeripherals(withServices: [])
+        log.info("Started scanning")
+    }
+    
+    func stopScan() {
+        manager.stopScan()
+        self.devices = []
+        
+        log.info("Stopped scanning")
+    }
+    
+    func connect(_ bleIdentifier: String, _ completion: @escaping (ConnectionResult) -> Void) throws {
+        guard let identifier = UUID(uuidString: bleIdentifier) else {
+            log.error("Invalid identifier - \(bleIdentifier)")
+            return
+        }
+        
+        self.connectionCompletion = completion
+        
+        let peripherals = manager.retrievePeripherals(withIdentifiers: [identifier])
+        if let peripheral = peripherals.first {
+            DispatchQueue.main.async {
+                self.peripheral = peripheral
+                self.peripheralManager = PeripheralManager(peripheral, self, self.pumpManagerDelegate!, completion)
+                
+                self.manager.connect(peripheral, options: nil)
+            }
+            return
+        }
+        
+        self.autoConnectUUID = bleIdentifier
+        try self.startScan()
+        
+        // throw error if device could not be found after 10 sec
+        Task {
+            try? await Task.sleep(nanoseconds: 10000000000)
+            guard self.peripheral != nil else {
+                throw NSError(domain: "Device is not findable", code: -1)
+            }
+        }
+    }
+    
+    func connect(_ peripheral: CBPeripheral, _ completion: @escaping (ConnectionResult) -> Void) {
+        if self.peripheral != nil {
+            self.disconnect(self.peripheral!)
+        }
+        
+        manager.connect(peripheral, options: nil)
+        self.connectionCompletion = completion
+    }
+    
+    func disconnect(_ peripheral: CBPeripheral) {
+        self.autoConnectUUID = nil
+        self.manager.cancelPeripheralConnection(peripheral)
+    }
+    
+    func writeMessage(_ packet: DanaGeneratePacket) async throws -> (any DanaParsePacketProtocol) {
+        guard let peripheralManager = self.peripheralManager else {
+            throw NSError(domain: "No connected device", code: 0, userInfo: nil)
+        }
+        
+        return try await peripheralManager.writeMessage(packet)
+    }
+    
+    func updateInitialState() async throws {
+        guard let peripheralManager = self.peripheralManager else {
+            throw NSError(domain: "No connected device", code: 0, userInfo: nil)
+        }
+        
+        return await peripheralManager.updateInitialState()
+    }
+    
+    func resetConnectionCompletion() {
+        self.connectionCompletion = nil
+    }
+    
+    func finishV3Pairing(_ pairingKey: Data, _ randomPairingKey: Data) {
+        peripheralManager?.finishV3Pairing(pairingKey, randomPairingKey)
+    }
+}
+
+// MARK: Central manager functions
+extension BluetoothManager : CBCentralManagerDelegate {
+    func centralManagerDidUpdateState(_ central: CBCentralManager) {
+        dispatchPrecondition(condition: .onQueue(managerQueue))
+        
+        log.info("\(String(describing: central.state.rawValue))")
+    }
+    
+    func centralManager(_ central: CBCentralManager, willRestoreState dict: [String : Any]) {
+        dispatchPrecondition(condition: .onQueue(managerQueue))
+        log.info("\(dict)")
+    }
+    
+    func centralManager(_ central: CBCentralManager, didDiscover peripheral: CBPeripheral, advertisementData: [String : Any], rssi RSSI: NSNumber) {
+        if (peripheral.name == nil || self.deviceNameRegex.firstMatch(in: peripheral.name!, range: NSMakeRange(0, peripheral.name!.count)) == nil) {
+            return
+        }
+        
+        dispatchPrecondition(condition: .onQueue(managerQueue))
+        log.info("\(peripheral), \(advertisementData)")
+        
+        if self.autoConnectUUID != nil && peripheral.identifier.uuidString == self.autoConnectUUID {
+            self.stopScan()
+            self.connect(peripheral, self.connectionCompletion!)
+            return
+        }
+        
+        let device: DanaPumpScan? = devices.first(where: { $0.bleIdentifier == peripheral.identifier.uuidString })
+        if (device != nil) {
+            return
+        }
+        
+        let result = DanaPumpScan(bleIdentifier: peripheral.identifier.uuidString, name: peripheral.name!, peripheral: peripheral)
+        devices.append(result)
+        self.pumpManagerDelegate?.notifyScanDeviceDidChange(result)
+    }
+    
+    func centralManager(_ central: CBCentralManager, didConnect peripheral: CBPeripheral) {
+        dispatchPrecondition(condition: .onQueue(managerQueue))
+        
+        guard let connectionCompletion = self.connectionCompletion else {
+            log.error("No connection callback found... Timeout hit probably")
+            self.disconnect(peripheral)
+            
+            return
+        }
+        
+        
+        DispatchQueue.main.async {
+            self.peripheral = peripheral
+            self.peripheralManager = PeripheralManager(peripheral, self, self.pumpManagerDelegate!, connectionCompletion)
+            
+            self.pumpManagerDelegate?.state.deviceName = peripheral.name
+            self.pumpManagerDelegate?.state.bleIdentifier = peripheral.identifier.uuidString
+            self.pumpManagerDelegate?.notifyStateDidChange()
+            
+            peripheral.discoverServices([PeripheralManager.SERVICE_UUID])
+        }
+    }
+    
+    func centralManager(_ central: CBCentralManager, didDisconnectPeripheral peripheral: CBPeripheral, error: Error?) {
+        log.info("Device disconnected, name: \(peripheral.name ?? "<NO_NAME>")")
+        
+        self.pumpManagerDelegate?.state.isConnected = false
+        self.pumpManagerDelegate?.notifyStateDidChange()
+        
+        self.peripheral = nil
+        self.peripheralManager = nil
+        
+        self.pumpManagerDelegate?.checkBolusDone()
+    }
+    
+    func centralManager(_ central: CBCentralManager, didFailToConnect peripheral: CBPeripheral, error: Error?) {
+        log.info("Device connect error, name: \(peripheral.name ?? "<NO_NAME>"), error: \(error!.localizedDescription)")
+    }
+}
diff --git a/DanaKit/DanaKit/PumpManager/DanaKit.swift b/DanaKit/DanaKit/PumpManager/DanaKit.swift
new file mode 100644
index 0000000..53a1eb6
--- /dev/null
+++ b/DanaKit/DanaKit/PumpManager/DanaKit.swift
@@ -0,0 +1,12 @@
+//
+//  DanaKit.swift
+//  DanaKit
+//
+//  Created by Randall Knutson on 10/11/21.
+//  Copyright © 2021 LoopKit Authors. All rights reserved.
+//
+
+import Foundation
+public class DanaKit {
+    init() { }
+}
diff --git a/DanaKit/DanaKit/PumpManager/DanaKitDoseProgressReporter.swift b/DanaKit/DanaKit/PumpManager/DanaKitDoseProgressReporter.swift
new file mode 100644
index 0000000..e08649a
--- /dev/null
+++ b/DanaKit/DanaKit/PumpManager/DanaKitDoseProgressReporter.swift
@@ -0,0 +1,43 @@
+//
+//  DoseProgressEstimator.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 23/01/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import Foundation
+import LoopKit
+
+class DanaKitDoseProgressReporter: DoseProgressReporter {
+    var progress: DoseProgress {
+        return DoseProgress(deliveredUnits: self.deliveredUnits, percentComplete: self.deliveredUnits / self.total)
+    }
+    
+    private var observers = WeakSet<DoseProgressObserver>()
+
+    private let total: Double
+    private var deliveredUnits: Double = 0
+
+    public init(total: Double) {
+        self.total = total
+    }
+
+    public func addObserver(_ observer: DoseProgressObserver) {
+        observers.insert(observer)
+    }
+
+    public func removeObserver(_ observer: DoseProgressObserver) {
+        observers.remove(observer)
+    }
+
+    public func notify(deliveredUnits: Double) {
+        self.deliveredUnits = deliveredUnits
+        
+        DispatchQueue.main.async {
+            for observer in self.observers {
+                observer.doseProgressReporterDidUpdate(self)
+            }
+        }
+    }
+}
diff --git a/DanaKit/DanaKit/PumpManager/DanaKitPumpManager.swift b/DanaKit/DanaKit/PumpManager/DanaKitPumpManager.swift
new file mode 100644
index 0000000..e103778
--- /dev/null
+++ b/DanaKit/DanaKit/PumpManager/DanaKitPumpManager.swift
@@ -0,0 +1,1442 @@
+//
+//  DanaKitPumpManager.swift
+//  DanaKit
+//
+//  Based on OmniKit/PumpManager/OmnipodPumpManager.swift
+//  Created by Pete Schwamb on 8/4/18.
+//  Copyright © 2021 LoopKit Authors. All rights reserved.
+//
+
+import HealthKit
+import LoopKit
+import UserNotifications
+import CoreBluetooth
+import UIKit
+
+public enum ConnectionResultShort {
+    case success
+    case failure
+}
+
+public protocol StateObserver: AnyObject {
+    func stateDidUpdate(_ state: DanaKitPumpManagerState, _ oldState: DanaKitPumpManagerState)
+    func deviceScanDidUpdate(_ device: DanaPumpScan)
+}
+
+public class DanaKitPumpManager: DeviceManager {
+    private static var bluetoothManager = BluetoothManager()
+    
+    private var oldState: DanaKitPumpManagerState
+    public var state: DanaKitPumpManagerState
+    public var rawState: PumpManager.RawStateValue {
+        return state.rawValue
+    }
+    
+    public static let pluginIdentifier: String = "Dana" // use a single token to make parsing log files easier
+    public let managerIdentifier: String = "Dana"
+    
+    public let localizedTitle = LocalizedString("Dana-i/RS", comment: "Generic title of the DanaKit pump manager")
+    
+    private var connectionCallback: ((ConnectionResultShort) -> Void)? = nil
+    
+    public init(state: DanaKitPumpManagerState, dateGenerator: @escaping () -> Date = Date.init) {
+        self.state = state
+        self.oldState = DanaKitPumpManagerState(rawValue: state.rawValue)
+        
+        DanaKitPumpManager.bluetoothManager.pumpManagerDelegate = self
+        
+        let nc = NotificationCenter.default
+        nc.addObserver(self, selector: #selector(appMovedToBackground), name: UIApplication.didEnterBackgroundNotification, object: nil)
+        nc.addObserver(self, selector: #selector(appMovedToForeground), name: UIApplication.willEnterForegroundNotification, object: nil)
+    }
+    
+    public required convenience init?(rawState: PumpManager.RawStateValue) {
+        self.init(state: DanaKitPumpManagerState(rawValue: rawState))
+    }
+    
+    private let log = DanaLogger(category: "DanaKitPumpManager")
+    private let pumpDelegate = WeakSynchronizedDelegate<PumpManagerDelegate>()
+    
+    private let statusObservers = WeakSynchronizedSet<PumpManagerStatusObserver>()
+    private let stateObservers = WeakSynchronizedSet<StateObserver>()
+    private let scanDeviceObservers = WeakSynchronizedSet<StateObserver>()
+    
+    private var doseReporter: DanaKitDoseProgressReporter?
+    private var doseEntry: UnfinalizedDose?
+    private var bolusCompleted: CheckedContinuation<Void, Error>?
+    
+    public var isOnboarded: Bool {
+        self.state.isOnBoarded
+    }
+    
+    private let basalIntervals: [TimeInterval] = Array(0..<24).map({ TimeInterval(60 * 60 * $0) })
+    public var currentBaseBasalRate: Double {
+        guard self.state.basalSchedule.count > 0 else {
+            // Prevent crash if basalSchedule isnt set
+            return 0
+        }
+        
+        let now = Date()
+        let startOfDay = Calendar.current.startOfDay(for: now)
+        let nowTimeInterval = now.timeIntervalSince(startOfDay)
+        
+        let index = (basalIntervals.firstIndex(where: { $0 > nowTimeInterval}) ?? 24) - 1
+        return self.state.basalSchedule.indices.contains(index) ? self.state.basalSchedule[index] : 0
+    }
+    
+    public var status: PumpManagerStatus {
+        return self.status(state)
+    }
+    
+    public var debugDescription: String {
+        let lines = [
+            "## DanaKitPumpManager",
+            state.debugDescription
+        ]
+        return lines.joined(separator: "\n")
+    }
+    
+    public func connect(_ peripheral: CBPeripheral, _ completion: @escaping (ConnectionResult) -> Void) {
+        DanaKitPumpManager.bluetoothManager.connect(peripheral, completion)
+    }
+    
+    public func disconnect() {
+        guard DanaKitPumpManager.bluetoothManager.isConnected else {
+            // Disconnect is not needed
+            return
+        }
+        
+        DanaKitPumpManager.bluetoothManager.disconnect(DanaKitPumpManager.bluetoothManager.peripheral!)
+        logDeviceCommunication("Dana - Disconnected", type: .connection)
+    }
+    
+    public func disconnect(_ peripheral: CBPeripheral) {
+        DanaKitPumpManager.bluetoothManager.disconnect(peripheral)
+        self.state.resetState()
+    }
+    
+    public func startScan() throws {
+        try DanaKitPumpManager.bluetoothManager.startScan()
+    }
+    
+    public func stopScan() {
+        DanaKitPumpManager.bluetoothManager.stopScan()
+    }
+    
+    func finishV3Pairing(_ pairingKey: Data, _ randomPairingKey: Data) {
+        DanaKitPumpManager.bluetoothManager.finishV3Pairing(pairingKey, randomPairingKey)
+    }
+    
+    // Not persisted
+    var provideHeartbeat: Bool = false
+
+    private var lastHeartbeat: Date = .distantPast
+    
+    public func setMustProvideBLEHeartbeat(_ mustProvideBLEHeartbeat: Bool) {
+        provideHeartbeat = mustProvideBLEHeartbeat
+    }
+
+    private func issueHeartbeatIfNeeded() {
+        if self.provideHeartbeat, Date().timeIntervalSince(lastHeartbeat) > 2 * 60 {
+            self.pumpDelegate.notify { (delegate) in
+                delegate?.pumpManagerBLEHeartbeatDidFire(self)
+            }
+            self.lastHeartbeat = Date()
+        }
+    }
+    
+    private let backgroundTask = BackgroundTask()
+    @objc func appMovedToBackground() {
+        if self.state.useSilentTones {
+            self.log.info("Starting silent tones")
+            backgroundTask.startBackgroundTask()
+        }
+    }
+
+    @objc func appMovedToForeground() {
+        backgroundTask.stopBackgroundTask()
+    }
+}
+
+extension DanaKitPumpManager: PumpManager {
+    public static var onboardingMaximumBasalScheduleEntryCount: Int {
+        return 24
+    }
+    
+    public static var onboardingSupportedBasalRates: [Double] {
+        // 0.01 units for rates between 0.00-3U/hr
+        // 0 U/hr is a supported scheduled basal rate
+        return (0...300).map { Double($0) / 100 }
+    }
+    
+    public static var onboardingSupportedBolusVolumes: [Double] {
+        // 0.05 units for rates between 0.05-30U
+        // 0 is not a supported bolus volume
+        return (1...600).map { Double($0) / 20 }
+    }
+    
+    public static var onboardingSupportedMaximumBolusVolumes: [Double] {
+        return DanaKitPumpManager.onboardingSupportedBolusVolumes
+    }
+    
+    public var delegateQueue: DispatchQueue! {
+        get {
+            return pumpDelegate.queue
+        }
+        set {
+            pumpDelegate.queue = newValue
+        }
+    }
+    
+    public var supportedBasalRates: [Double] {
+        return DanaKitPumpManager.onboardingSupportedBasalRates
+    }
+    
+    public var supportedBolusVolumes: [Double] {
+        return DanaKitPumpManager.onboardingSupportedBolusVolumes
+    }
+    
+    public var supportedMaximumBolusVolumes: [Double] {
+        // 0.05 units for rates between 0.05-30U
+        // 0 is not a supported bolus volume
+        return DanaKitPumpManager.onboardingSupportedBolusVolumes
+    }
+    
+    public var maximumBasalScheduleEntryCount: Int {
+        return DanaKitPumpManager.onboardingMaximumBasalScheduleEntryCount
+    }
+    
+    public var minimumBasalScheduleEntryDuration: TimeInterval {
+        // One per hour
+        return TimeInterval(60 * 60)
+    }
+    
+    public func roundToSupportedBolusVolume(units: Double) -> Double {
+        // We do support rounding a 0 U volume to 0
+        return supportedBolusVolumes.last(where: { $0 <= units }) ?? 0
+    }
+    
+    public var pumpManagerDelegate: LoopKit.PumpManagerDelegate? {
+        get {
+            return pumpDelegate.delegate
+        }
+        set {
+            pumpDelegate.delegate = newValue
+        }
+    }
+    
+    public var pumpRecordsBasalProfileStartEvents: Bool {
+        return false
+    }
+    
+    public var pumpReservoirCapacity: Double {
+        return Double(self.state.reservoirLevel)
+    }
+    
+    public var lastSync: Date? {
+        return self.state.lastStatusDate
+    }
+    
+    private func status(_ state: DanaKitPumpManagerState) -> LoopKit.PumpManagerStatus {
+        // Check if temp basal is expired, before constructing basalDeliveryState
+        if self.state.basalDeliveryOrdinal == .tempBasal && self.state.tempBasalEndsAt < Date.now {
+            self.state.basalDeliveryOrdinal = .active
+            self.state.basalDeliveryDate = Date.now
+            self.state.tempBasalDuration = nil
+            self.state.tempBasalUnits = nil
+        }
+        
+        return PumpManagerStatus(
+            timeZone: TimeZone.current,
+            device: device(),
+            pumpBatteryChargeRemaining: state.batteryRemaining / 100,
+            basalDeliveryState: state.basalDeliveryState,
+            bolusState: bolusState(state.bolusState),
+            insulinType: state.insulinType
+        )
+    }
+    
+    private func bolusState(_ bolusState: BolusState) -> PumpManagerStatus.BolusState {
+        switch bolusState {
+        case .noBolus:
+            return .noBolus
+        case .initiating:
+            return .initiating
+        case .canceling:
+            return .canceling
+        case .inProgress:
+            if let dose = self.doseEntry?.toDoseEntry() {
+                return .inProgress(dose)
+            }
+            
+            return .noBolus
+        }
+    }
+    
+    public func ensureCurrentPumpData(completion: ((Date?) -> Void)?) {
+        guard Date.now.timeIntervalSince(self.state.lastStatusDate) > .minutes(6) else {
+            self.log.info("Skipping status update because pumpData is fresh: \(Date.now.timeIntervalSince(self.state.lastStatusDate)) sec")
+            completion?(self.state.lastStatusDate)
+            return
+        }
+        
+        syncPump(completion)
+    }
+    
+     /// Extention from ensureCurrentPumpData, but overrides the stale data check
+    public func syncPump(_ completion: ((Date?) -> Void)?) {
+        self.log.info("Syncing pump data")
+
+        self.ensureConnected { result in
+            switch result {
+            case .failure:
+                completion?(nil)
+                return
+            case .success:
+                await self.syncUserOptions()
+                let events = await self.syncHistory()
+                
+                let pumpTime = await self.fetchPumpTime()
+                if let pumpTime = pumpTime {
+                    self.state.pumpTimeSyncedAt = Date.now
+                    self.state.pumpTime = pumpTime
+                }
+                
+                self.state.lastStatusPumpDateTime = pumpTime ?? Date.now
+                self.state.lastStatusDate = Date.now
+                
+                self.disconnect()
+                
+                self.issueHeartbeatIfNeeded()
+                self.notifyStateDidChange()
+                
+                self.pumpDelegate.notify { (delegate) in
+                    delegate?.pumpManager(self, hasNewPumpEvents: events, lastReconciliation: self.state.lastStatusDate, replacePendingEvents: true, completion: { _ in })
+                    delegate?.pumpManager(self, didReadReservoirValue: self.state.reservoirLevel, at: Date.now, completion: { _ in })
+                    delegate?.pumpManagerDidUpdateState(self)
+                }
+                
+                completion?(Date.now)
+            }
+        }
+    }
+    
+    private func syncUserOptions() async {
+        do {
+            let userOptionPacket = generatePacketGeneralGetUserOption()
+            let userOptionResult = try await DanaKitPumpManager.bluetoothManager.writeMessage(userOptionPacket)
+            guard userOptionResult.success else {
+                log.error("Failed to fetch user options...")
+                return
+            }
+            
+            let dataUserOption = userOptionResult.data as! PacketGeneralGetUserOption
+            self.state.lowReservoirRate = dataUserOption.lowReservoirRate
+            self.state.isTimeDisplay24H = dataUserOption.isTimeDisplay24H
+            self.state.isButtonScrollOnOff = dataUserOption.isButtonScrollOnOff
+            self.state.beepAndAlarm = dataUserOption.beepAndAlarm
+            self.state.lcdOnTimeInSec = dataUserOption.lcdOnTimeInSec
+            self.state.backlightOnTimInSec = dataUserOption.backlightOnTimInSec
+            self.state.selectedLanguage = dataUserOption.selectedLanguage
+            self.state.units = dataUserOption.units
+            self.state.shutdownHour = dataUserOption.shutdownHour
+            self.state.cannulaVolume = dataUserOption.cannulaVolume
+            self.state.refillAmount = dataUserOption.refillAmount
+            self.state.targetBg = dataUserOption.targetBg
+            self.state.units = dataUserOption.units
+        } catch {
+            self.log.error("Failed to sync user options: \(error.localizedDescription)")
+        }
+    }
+
+    private func fetchPumpTime() async -> Date? {
+        do {
+            let timePacket = self.state.usingUtc ? generatePacketGeneralGetPumpTimeUtcWithTimezone() : generatePacketGeneralGetPumpTime()
+            let timeResult = try await DanaKitPumpManager.bluetoothManager.writeMessage(timePacket)
+            
+            if timeResult.success {
+                let date = self.state.usingUtc ? (timeResult.data as! PacketGeneralGetPumpTimeUtcWithTimezone).time : (timeResult.data as! PacketGeneralGetPumpTime).time
+                return date
+            } else {
+                self.log.error("Failed to fetch pump time with utc...")
+                return nil
+            }
+        } catch {
+            self.log.error("Failed to sync time: \(error.localizedDescription)")
+            return nil
+        }
+    }
+    
+    private func syncHistory() async -> [NewPumpEvent] {
+        var hasHistoryModeBeenActivate = false
+        do {
+            let activateHistoryModePacket = generatePacketGeneralSetHistoryUploadMode(options: PacketGeneralSetHistoryUploadMode(mode: 1))
+            let activateHistoryModeResult = try await DanaKitPumpManager.bluetoothManager.writeMessage(activateHistoryModePacket)
+            guard activateHistoryModeResult.success else {
+                return []
+            }
+            
+            hasHistoryModeBeenActivate = true
+            
+            let fetchHistoryPacket = generatePacketHistoryAll(options: PacketHistoryBase(from: state.lastStatusPumpDateTime, usingUtc: self.state.usingUtc))
+            let fetchHistoryResult = try await DanaKitPumpManager.bluetoothManager.writeMessage(fetchHistoryPacket)
+            guard fetchHistoryResult.success else {
+                return []
+            }
+            
+            let deactivateHistoryModePacket = generatePacketGeneralSetHistoryUploadMode(options: PacketGeneralSetHistoryUploadMode(mode: 0))
+            let _ = try await DanaKitPumpManager.bluetoothManager.writeMessage(deactivateHistoryModePacket)
+
+            return (fetchHistoryResult.data as! [HistoryItem]).map({ item in
+                switch(item.code) {
+                case HistoryCode.RECORD_TYPE_ALARM:
+                    return NewPumpEvent(date: item.timestamp, dose: nil, raw: item.raw, title: "Alarm: \(getAlarmMessage(param8: item.alarm))", type: .alarm, alarmType: PumpAlarmType.fromParam8(item.alarm))
+                
+                case HistoryCode.RECORD_TYPE_BOLUS:
+                    // If we find a bolus here, we assume that is hasnt been synced to Loop
+                    return NewPumpEvent.bolus(
+                        dose: DoseEntry.bolus(units: item.value!, deliveredUnits: item.value!, duration: item.durationInMin! * 60, activationType: .manualNoRecommendation, insulinType: self.state.insulinType!, startDate: item.timestamp),
+                        units: item.value!,
+                        date: item.timestamp)
+                    
+                case HistoryCode.RECORD_TYPE_SUSPEND:
+                    if item.value! == 1 {
+                        return NewPumpEvent.suspend(dose: DoseEntry.suspend(suspendDate: item.timestamp))
+                    } else {
+                        return NewPumpEvent.resume(dose: DoseEntry.resume(insulinType: self.state.insulinType!, resumeDate: item.timestamp), date: item.timestamp)
+                    }
+                    
+                case HistoryCode.RECORD_TYPE_PRIME:
+                    if item.value! >= 1 {
+                        // This is a tube refill, not a canulla refill
+                        return nil
+                    }
+                    
+                    if self.state.cannulaDate == nil || item.timestamp > self.state.cannulaDate! {
+                        self.state.cannulaDate = item.timestamp
+                    }
+                    
+                    return NewPumpEvent(date: item.timestamp, dose: nil, raw: item.raw, title: "Prime \(item.value!)U", type: .prime, alarmType: nil)
+                    
+                case HistoryCode.RECORD_TYPE_REFILL:
+                    if self.state.reservoirDate == nil || item.timestamp > self.state.reservoirDate! {
+                        self.state.reservoirDate = item.timestamp
+                    }
+                    
+                    return NewPumpEvent(date: item.timestamp, dose: nil, raw: item.raw, title: "Rewind \(item.value!)U", type: .rewind, alarmType: nil)
+                    
+                default:
+                    return nil
+                }
+            })
+            // Filter nil values
+            .compactMap{$0}
+        } catch {
+            self.log.error("Failed to sync history. Error: \(error.localizedDescription)")
+            if hasHistoryModeBeenActivate {
+                do {
+                    let deactivateHistoryModePacket = generatePacketGeneralSetHistoryUploadMode(options: PacketGeneralSetHistoryUploadMode(mode: 0))
+                    let _ = try await DanaKitPumpManager.bluetoothManager.writeMessage(deactivateHistoryModePacket)
+                } catch {}
+            }
+            return []
+        }
+    }
+    
+    public func createBolusProgressReporter(reportingOn dispatchQueue: DispatchQueue) -> DoseProgressReporter? {
+        return doseReporter
+    }
+    
+    public func estimatedDuration(toBolus units: Double) -> TimeInterval {
+        switch(self.state.bolusSpeed) {
+        case .speed12:
+            return units * 12 // 12sec/U
+        case .speed30:
+            return units * 30 // 30sec/U
+        case .speed60:
+            return units * 60 // 60sec/U
+        }
+    }
+    
+    public func enactBolus(units: Double, activationType: BolusActivationType, completion: @escaping (PumpManagerError?) -> Void) {
+        guard self.state.bolusState == .noBolus else {
+            self.log.error("Pump already busy bolossing")
+            completion(.deviceState(DanaKitPumpManagerError.pumpIsBusy))
+            return
+        }
+        
+        delegateQueue.async {
+            let duration = self.estimatedDuration(toBolus: units)
+            self.log.info("Enact bolus, units: \(units)U, duration: \(duration)sec")
+            
+            self.state.bolusState = .initiating
+            self.notifyStateDidChange()
+            
+            self.ensureConnected { result in
+                switch result {
+                case .failure:
+                    self.log.error("Connection error")
+                    self.state.bolusState = .noBolus
+                    self.doseReporter = nil
+                    self.notifyStateDidChange()
+                    
+                    completion(PumpManagerError.connection(DanaKitPumpManagerError.noConnection))
+                    return
+                case .success:
+                    guard !self.state.isPumpSuspended else {
+                        self.state.bolusState = .noBolus
+                        self.doseReporter = nil
+                        self.doseEntry = nil
+                        self.notifyStateDidChange()
+                        self.disconnect()
+                        
+                        self.log.error("Pump is suspended")
+                        completion(PumpManagerError.deviceState(DanaKitPumpManagerError.pumpSuspended))
+                        return
+                    }
+                    
+                    do {
+                        let packet = generatePacketBolusStart(options: PacketBolusStart(amount: units, speed: self.state.bolusSpeed))
+                        let result = try await DanaKitPumpManager.bluetoothManager.writeMessage(packet)
+                        
+                        guard result.success else {
+                            self.state.bolusState = .noBolus
+                            self.doseReporter = nil
+                            self.doseEntry = nil
+                            self.notifyStateDidChange()
+                            self.disconnect()
+                            
+                            self.log.error("Pump rejected command. Data: \(result.rawData.base64EncodedString())")
+                            completion(PumpManagerError.deviceState(transformBolusError(code: result.rawData[DataStart])))
+                            return
+                        }
+                        
+                        self.state.lastStatusPumpDateTime = (await self.fetchPumpTime()) ?? Date.now
+                        self.state.lastStatusDate = Date.now
+                        
+                        self.doseEntry = UnfinalizedDose(units: units, duration: duration, activationType: activationType, insulinType: self.state.insulinType!)
+                        self.doseReporter = DanaKitDoseProgressReporter(total: units)
+                        self.state.bolusState = .inProgress
+                        self.notifyStateDidChange()
+                        
+                        completion(nil)
+                        
+                        // Wait for bolus to complete before continueing to next item in queue
+                        try await withCheckedThrowingContinuation { continuation in
+                            self.bolusCompleted = continuation
+                        }
+                    } catch {
+                        self.state.bolusState = .noBolus
+                        self.doseReporter = nil
+                        self.notifyStateDidChange()
+                        self.disconnect()
+                        
+                        self.log.error("Failed to do bolus. Error: \(error.localizedDescription)")
+                        completion(PumpManagerError.connection(DanaKitPumpManagerError.unknown(error.localizedDescription)))
+                    }
+                }
+            }
+        }
+    }
+    
+    public func cancelBolus(completion: @escaping (PumpManagerResult<DoseEntry?>) -> Void) {
+        delegateQueue.async {
+            self.log.info("Cancel bolus")
+            
+            let oldBolusState = self.state.bolusState
+            self.state.bolusState = .canceling
+            self.notifyStateDidChange()
+            
+            // It is very likely that the app is doing a bolus if the cancel action is triggerd
+            // Therefore, we can reuse the connection and directly send the cancel command
+            if DanaKitPumpManager.bluetoothManager.isConnected && DanaKitPumpManager.bluetoothManager.peripheral?.state == .connected {
+                Task {
+                    await self.doCancelAction(oldBolusState: oldBolusState, completion: completion)
+                }
+                return
+            }
+            
+            self.ensureConnected { result in
+                switch result {
+                case .failure:
+                    self.state.bolusState = oldBolusState
+                    self.notifyStateDidChange()
+                    
+                    completion(.failure(PumpManagerError.connection(DanaKitPumpManagerError.noConnection)))
+                    return
+                case .success:
+                    await self.doCancelAction(oldBolusState: oldBolusState, completion: completion)
+                }
+            }
+        }
+    }
+    
+    private func doCancelAction(oldBolusState: BolusState, completion: @escaping (PumpManagerResult<DoseEntry?>) -> Void) async {
+        do {
+            let packet = generatePacketBolusStop()
+            let result = try await DanaKitPumpManager.bluetoothManager.writeMessage(packet)
+            
+            if (!result.success) {
+                self.state.bolusState = oldBolusState
+                self.notifyStateDidChange()
+                
+                completion(.failure(PumpManagerError.communication(nil)))
+                return
+            }
+            
+            self.state.lastStatusPumpDateTime = (await self.fetchPumpTime()) ?? Date.now
+            self.state.lastStatusDate = Date.now
+
+            self.disconnect()
+
+            self.state.bolusState = .noBolus
+            self.notifyStateDidChange()
+            
+            guard let doseEntry = self.doseEntry else {
+                completion(.success(nil))
+                return
+            }
+            
+            let dose = doseEntry.toDoseEntry()
+            self.doseEntry = nil
+            self.doseReporter = nil
+            
+            guard let dose = dose else {
+                completion(.success(nil))
+                return
+            }
+            
+            DispatchQueue.main.async {
+                self.pumpDelegate.notify { (delegate) in
+                    delegate?.pumpManager(self, hasNewPumpEvents: [NewPumpEvent.bolus(dose: dose, units: dose.deliveredUnits ?? 0)], lastReconciliation: Date.now, replacePendingEvents: true, completion: { _ in })
+                }
+                
+                self.notifyStateDidChange()
+            }
+            
+            completion(.success(nil))
+        } catch {
+            self.state.bolusState = oldBolusState
+            self.notifyStateDidChange()
+            self.disconnect()
+            
+            self.log.error("Failed to cancel bolus. Error: \(error.localizedDescription)")
+            completion(.failure(PumpManagerError.communication(DanaKitPumpManagerError.unknown(error.localizedDescription))))
+        }
+    }
+    
+    /// NOTE: There are 2 ways to set a temp basal:
+    /// - The normal way (which only accepts full hours and percentages)
+    /// - A short APS-special temp basal command (which only accepts 15 min or 30 min
+    /// Currently, this is implemented with a simpel U/hr -> % calculator
+    /// NOTE: A temp basal >200% for 30 min (or full hour) is rescheduled to 15min
+    public func enactTempBasal(unitsPerHour: Double, for duration: TimeInterval, completion: @escaping (PumpManagerError?) -> Void) {
+        delegateQueue.async {
+            self.log.info("Enact temp basal. Value: \(unitsPerHour) U/hr, duration: \(duration) sec")
+            
+            self.ensureConnected { result in
+                switch result {
+                case .failure:
+                    self.log.error("Connection error")
+                    completion(PumpManagerError.connection(DanaKitPumpManagerError.noConnection))
+                    return
+                case .success:
+                    guard !self.state.isPumpSuspended else {
+                        self.log.error("Pump is suspended")
+                        self.disconnect()
+                        completion(PumpManagerError.deviceState(DanaKitPumpManagerError.pumpSuspended))
+                        return
+                    }
+                    
+                    do {
+                        // Check if duration is supported
+                        // If not, round it down to nearest supported duration
+                        var duration = duration
+                        if !self.isSupportedDuration(duration) {
+                            let oldDuration = duration
+                            if duration > .hours(1) {
+                                // Round down to nearest full hour
+                                duration = .hours(1) * floor(duration / .hours(1))
+                                self.log.info("Temp basal rounded down from \(oldDuration / .hours(1))h to \(floor(duration / .hours(1)))h")
+                                
+                            } else if duration > .minutes(30) {
+                                // Round down to 30 min
+                                duration = .minutes(30)
+                                self.log.info("Temp basal rounded down from \(oldDuration / .minutes(1))min to 30min")
+                                
+                            } else if duration > .minutes(15) {
+                                // Round down to 15 min
+                                duration = .minutes(15)
+                                self.log.info("Temp basal rounded down from \(oldDuration / .minutes(1))min to 15min")
+                                
+                            } else {
+                                self.disconnect()
+                                self.log.error("Temp basal below 15 min is unsupported (floor duration)")
+                                completion(PumpManagerError.configuration(DanaKitPumpManagerError.failedTempBasalAdjustment("Temp basal below 15 min is unsupported... (floor duration)")))
+                                return
+                            }
+                        }
+                        
+                        guard let percentage = self.absoluteBasalRateToPercentage(absoluteValue: unitsPerHour, basalSchedule: self.state.basalSchedule) else {
+                            self.disconnect()
+                            self.log.error("Basal schedule is not available...")
+                            completion(PumpManagerError.configuration(DanaKitPumpManagerError.failedTempBasalAdjustment("Basal schedule is not available...")))
+                            return
+                        }
+                        
+                        // Temp basal >15min && >200% is not supported
+                        // Floor it down to 15min
+                        if percentage > 200 && duration != .minutes(15) {
+                            duration = .minutes(15)
+                        }
+                        
+                        if self.state.isTempBasalInProgress {
+                            let packet = generatePacketBasalCancelTemporary()
+                            let result = try await DanaKitPumpManager.bluetoothManager.writeMessage(packet)
+                            
+                            guard result.success else {
+                                self.disconnect()
+                                self.log.error("Could not cancel old temp basal")
+                                completion(PumpManagerError.configuration(DanaKitPumpManagerError.failedTempBasalAdjustment("Could not cancel old temp basal")))
+                                return
+                            }
+                            
+                            self.log.info("Succesfully canceled old temp basal")
+                        }
+                        
+                        if (duration < .ulpOfOne) {
+                            // Temp basal is already canceled (if deem needed)
+                            self.disconnect()
+                            
+                            self.state.basalDeliveryOrdinal = .active
+                            self.state.basalDeliveryDate = Date.now
+                            self.state.tempBasalUnits = nil
+                            self.state.tempBasalDuration = nil
+                            self.notifyStateDidChange()
+                            
+                            let dose = DoseEntry.basal(rate: self.currentBaseBasalRate, insulinType: self.state.insulinType!)
+                            self.pumpDelegate.notify { (delegate) in
+                                delegate?.pumpManager(self, hasNewPumpEvents: [NewPumpEvent.basal(dose: dose)], lastReconciliation: Date.now, replacePendingEvents: true, completion: { _ in })
+                            }
+                            
+                            self.log.info("Succesfully cancelled temp basal")
+                            completion(nil)
+                            
+                        } else if duration == .minutes(15) {
+                            let packet = generatePacketLoopSetTemporaryBasal(options: PacketLoopSetTemporaryBasal(percent: percentage, duration: .min15))
+                            let result = try await DanaKitPumpManager.bluetoothManager.writeMessage(packet)
+                            self.disconnect()
+                            
+                            guard result.success else {
+                                self.log.error("Pump rejected command (15 min)")
+                                completion(PumpManagerError.configuration(DanaKitPumpManagerError.failedTempBasalAdjustment("Pump rejected command (15 min)")))
+                                return
+                            }
+                            
+                            let dose = DoseEntry.tempBasal(absoluteUnit: unitsPerHour, duration: duration, insulinType: self.state.insulinType!)
+                            self.state.basalDeliveryOrdinal = .tempBasal
+                            self.state.basalDeliveryDate = Date.now
+                            self.state.tempBasalUnits = unitsPerHour
+                            self.state.tempBasalDuration = duration
+                            self.notifyStateDidChange()
+                            
+                            self.pumpDelegate.notify { (delegate) in
+                                delegate?.pumpManager(self, hasNewPumpEvents: [NewPumpEvent.tempBasal(dose: dose, units: unitsPerHour, duration: duration)], lastReconciliation: Date.now, replacePendingEvents: true, completion: { _ in })
+                            }
+                            
+                            self.log.info("Succesfully started 15 min temp basal")
+                            completion(nil)
+                            
+                        } else if duration == .minutes(30) {
+                            let packet = generatePacketLoopSetTemporaryBasal(options: PacketLoopSetTemporaryBasal(percent: percentage, duration: .min30))
+                            let result = try await DanaKitPumpManager.bluetoothManager.writeMessage(packet)
+                            self.disconnect()
+                            
+                            guard result.success else {
+                                self.log.error("Pump rejected command (30 min)")
+                                completion(PumpManagerError.configuration(DanaKitPumpManagerError.failedTempBasalAdjustment("Pump rejected command (30 min)")))
+                                return
+                            }
+                            
+                            let dose = DoseEntry.tempBasal(absoluteUnit: unitsPerHour, duration: duration, insulinType: self.state.insulinType!)
+                            self.state.basalDeliveryOrdinal = .tempBasal
+                            self.state.basalDeliveryDate = Date.now
+                            self.state.tempBasalUnits = unitsPerHour
+                            self.state.tempBasalDuration = duration
+                            self.notifyStateDidChange()
+                            
+                            self.pumpDelegate.notify { (delegate) in
+                                delegate?.pumpManager(self, hasNewPumpEvents: [NewPumpEvent.tempBasal(dose: dose, units: unitsPerHour, duration: duration)], lastReconciliation: Date.now, replacePendingEvents: true, completion: { _ in })
+                            }
+                            
+                            self.log.info("Succesfully started 30 min temp basal")
+                            completion(nil)
+                            
+                            // Full hour
+                        } else {
+                            let packet = generatePacketBasalSetTemporary(options: PacketBasalSetTemporary(temporaryBasalRatio: UInt8(percentage), temporaryBasalDuration: UInt8(floor(duration / .hours(1)))))
+                            let result = try await DanaKitPumpManager.bluetoothManager.writeMessage(packet)
+                            self.disconnect()
+                            
+                            guard result.success else {
+                                self.log.error("Pump rejected command (full hour)")
+                                completion(PumpManagerError.configuration(DanaKitPumpManagerError.failedTempBasalAdjustment("Pump rejected command (full hour)")))
+                                return
+                            }
+                            
+                            let dose = DoseEntry.tempBasal(absoluteUnit: unitsPerHour, duration: duration, insulinType: self.state.insulinType!)
+                            self.state.basalDeliveryOrdinal = .tempBasal
+                            self.state.basalDeliveryDate = Date.now
+                            self.state.tempBasalUnits = unitsPerHour
+                            self.state.tempBasalDuration = duration
+                            self.notifyStateDidChange()
+                            
+                            self.pumpDelegate.notify { (delegate) in
+                                delegate?.pumpManager(self, hasNewPumpEvents: [NewPumpEvent.tempBasal(dose: dose, units: unitsPerHour, duration: duration)], lastReconciliation: Date.now, replacePendingEvents: true, completion: { _ in })
+                            }
+                            
+                            self.log.info("Succesfully started full hourly temp basal")
+                            completion(nil)
+                        }
+                    } catch {
+                        self.disconnect()
+                        
+                        self.log.error("Failed to set temp basal. Error: \(error.localizedDescription)")
+                        completion(PumpManagerError.communication(DanaKitPumpManagerError.unknown(error.localizedDescription)))
+                    }
+                }
+            }
+        }
+    }
+    
+    private func isSupportedDuration(_ duration: TimeInterval) -> Bool {
+        return duration < .ulpOfOne || duration == .minutes(15) || duration == .minutes(30) || Int(duration) % Int(.hours(1)) == 0
+    }
+    
+    public func suspendDelivery(completion: @escaping (Error?) -> Void) {
+        delegateQueue.async {
+            self.log.info("Suspend delivery")
+            
+            self.ensureConnected { result in
+                switch result {
+                case .failure:
+                    self.log.error("Connection error")
+                    completion(PumpManagerError.connection(DanaKitPumpManagerError.noConnection))
+                    return
+                case .success:
+                    do {
+                        let packet = generatePacketBasalSetSuspendOn()
+                        let result = try await DanaKitPumpManager.bluetoothManager.writeMessage(packet)
+                        
+                        self.disconnect()
+                        
+                        guard result.success else {
+                            self.log.error("Pump rejected command")
+                            completion(PumpManagerError.configuration(DanaKitPumpManagerError.failedSuspensionAdjustment))
+                            return
+                        }
+                        
+                        self.state.isPumpSuspended = true
+                        self.state.basalDeliveryOrdinal = .suspended
+                        self.state.basalDeliveryDate = Date.now
+                        self.notifyStateDidChange()
+                        
+                        let dose = DoseEntry.suspend()
+                        self.pumpDelegate.notify { (delegate) in
+                            guard let delegate = delegate else {
+                                preconditionFailure("pumpManagerDelegate cannot be nil")
+                            }
+                            
+                            delegate.pumpManager(self, hasNewPumpEvents: [NewPumpEvent.suspend(dose: dose)], lastReconciliation: self.state.lastStatusDate, replacePendingEvents: true, completion: { (error) in
+                                completion(nil)
+                            })
+                        }
+                    } catch {
+                        self.disconnect()
+                        
+                        self.log.error("Failed to suspend delivery. Error: \(error.localizedDescription)")
+                        completion(PumpManagerError.communication(DanaKitPumpManagerError.unknown(error.localizedDescription)))
+                    }
+                }
+            }
+        }
+    }
+    
+    public func resumeDelivery(completion: @escaping (Error?) -> Void) {
+        delegateQueue.async {
+            self.log.info("Resume delivery")
+            
+            self.ensureConnected { result in
+                switch result {
+                case .failure:
+                    self.log.error("Connection error")
+                    completion(PumpManagerError.connection(DanaKitPumpManagerError.noConnection))
+                    return
+                case .success:
+                    do {
+                        let packet = generatePacketBasalSetSuspendOff()
+                        let result = try await DanaKitPumpManager.bluetoothManager.writeMessage(packet)
+                        
+                        self.disconnect()
+                        
+                        guard result.success else {
+                            self.log.error("Pump rejected command")
+                            completion(PumpManagerError.configuration(DanaKitPumpManagerError.failedSuspensionAdjustment))
+                            return
+                        }
+                        
+                        self.state.isPumpSuspended = false
+                        self.state.basalDeliveryOrdinal = .active
+                        self.state.basalDeliveryDate = Date.now
+                        self.notifyStateDidChange()
+                        
+                        let dose = DoseEntry.resume(insulinType: self.state.insulinType!)
+                        self.pumpDelegate.notify { (delegate) in
+                            guard let delegate = delegate else {
+                                preconditionFailure("pumpManagerDelegate cannot be nil")
+                            }
+                            
+                            delegate.pumpManager(self, hasNewPumpEvents: [NewPumpEvent.resume(dose: dose)], lastReconciliation: self.state.lastStatusDate, replacePendingEvents: true, completion: { _ in })
+                        }
+
+                        completion(nil)
+                    } catch {
+                        self.disconnect()
+                        
+                        self.log.error("Failed to suspend delivery. Error: \(error.localizedDescription)")
+                        completion(PumpManagerError.communication(DanaKitPumpManagerError.unknown(error.localizedDescription)))
+                    }
+                }
+            }
+        }
+    }
+    
+    public func syncBasalRateSchedule(items scheduleItems: [RepeatingScheduleValue<Double>], completion: @escaping (Result<BasalRateSchedule, Error>) -> Void) {
+        delegateQueue.async {
+            self.log.info("Sync basal")
+            
+            self.ensureConnected { result in
+                switch result {
+                case .failure:
+                    self.log.error("Connection error")
+                    completion(.failure(PumpManagerError.connection(DanaKitPumpManagerError.noConnection)))
+                    return
+                case .success:
+                    do {
+                        let basal = DanaKitPumpManagerState.convertBasal(scheduleItems)
+                        let packet = try generatePacketBasalSetProfileRate(options: PacketBasalSetProfileRate(profileNumber: self.state.basalProfileNumber, profileBasalRate: basal))
+                        let result = try await DanaKitPumpManager.bluetoothManager.writeMessage(packet)
+                        
+                        guard result.success else {
+                            self.disconnect()
+                            self.log.error("Pump rejected command (setting rates)")
+                            completion(.failure(PumpManagerError.configuration(DanaKitPumpManagerError.failedBasalAdjustment)))
+                            return
+                        }
+                        
+                        let activatePacket = generatePacketBasalSetProfileNumber(options: PacketBasalSetProfileNumber(profileNumber: self.state.basalProfileNumber))
+                        let activateResult = try await DanaKitPumpManager.bluetoothManager.writeMessage(activatePacket)
+                        
+                        self.disconnect()
+                        
+                        guard activateResult.success else {
+                            self.log.error("Pump rejected command (activate profile)")
+                            completion(.failure(PumpManagerError.configuration(DanaKitPumpManagerError.failedBasalAdjustment)))
+                            return
+                        }
+                        
+                        guard let schedule = DailyValueSchedule<Double>(dailyItems: scheduleItems) else {
+                            self.log.error("Failed to convert schedule")
+                            completion(.failure(PumpManagerError.configuration(DanaKitPumpManagerError.failedBasalGeneration)))
+                            return
+                        }
+                        
+                        self.state.basalDeliveryOrdinal = .active
+                        self.state.basalDeliveryDate = Date.now
+                        self.state.basalSchedule = basal
+                        self.notifyStateDidChange()
+                        
+                        let dose = DoseEntry.basal(rate: self.currentBaseBasalRate, insulinType: self.state.insulinType!)
+                        self.pumpDelegate.notify { (delegate) in
+                            guard let delegate = delegate else {
+                                preconditionFailure("pumpManagerDelegate cannot be nil")
+                            }
+                            
+                            delegate.pumpManager(self, hasNewPumpEvents: [NewPumpEvent.basal(dose: dose)], lastReconciliation: self.state.lastStatusDate, replacePendingEvents: true, completion: { (error) in
+                                completion(.success(schedule))
+                            })
+                        }
+                    } catch {
+                        self.disconnect()
+                        
+                        self.log.error("Failed to suspend delivery. Error: \(error.localizedDescription)")
+                        completion(.failure(PumpManagerError.communication(DanaKitPumpManagerError.unknown(error.localizedDescription))))
+                    }
+                }
+            }
+        }
+    }
+    
+    public func switchBasalProfileSlot(basal: [Double], completion: @escaping (PumpManagerError?) -> Void) {
+        delegateQueue.async {
+            self.log.info("Sync basal")
+
+            self.ensureConnected { result in
+                switch result {
+                case .failure:
+                    completion(PumpManagerError.connection(DanaKitPumpManagerError.noConnection))
+                    return
+                case .success:
+                    do {
+                        let activatePacket = generatePacketBasalSetProfileNumber(options: PacketBasalSetProfileNumber(profileNumber: self.state.basalProfileNumber))
+                        let activateResult = try await DanaKitPumpManager.bluetoothManager.writeMessage(activatePacket)
+                        
+                        self.disconnect()
+                        
+                        guard activateResult.success else {
+                            self.log.error("Pump rejected command (activate profile)")
+                            completion(PumpManagerError.configuration(DanaKitPumpManagerError.failedBasalAdjustment))
+                            return
+                        }
+                        
+                        completion(nil)
+                    } catch {
+                        self.disconnect()
+                        
+                        self.log.error("Failed to update basal profile number. Error: \(error.localizedDescription)")
+                        completion(PumpManagerError.communication(DanaKitPumpManagerError.unknown(error.localizedDescription)))
+                    }
+                }
+            }
+        }
+    }
+    
+    public func setUserSettings(data: PacketGeneralSetUserOption, completion: @escaping (Bool) -> Void) {
+        delegateQueue.async {
+            self.log.info("Set user settings")
+            
+            self.ensureConnected { result in
+                switch result {
+                case .failure:
+                    self.log.error("Connection error")
+                    completion(false)
+                    return
+                case .success:
+                    do {
+                        let packet = generatePacketGeneralSetUserOption(options: data)
+                        let result = try await DanaKitPumpManager.bluetoothManager.writeMessage(packet)
+                        
+                        self.disconnect()
+                        guard result.success else {
+                            self.log.error("Pump rejected command (user options)")
+                            completion(false)
+                            return
+                        }
+                        completion(true)
+                    } catch {
+                        self.log.error("error caught \(error.localizedDescription)")
+                        self.disconnect()
+                        completion(false)
+                    }
+                }
+            }
+        }
+    }
+    
+    public func syncDeliveryLimits(limits deliveryLimits: DeliveryLimits, completion: @escaping (Result<DeliveryLimits, Error>) -> Void) {
+        delegateQueue.async {
+            // Dana does not allow the max basal and max bolus to be set
+            self.log.info("Skipping sync delivery limits (not supported by dana). Fetching current settings")
+            
+            self.ensureConnected { result in
+                switch result {
+                case .failure:
+                    self.log.error("Connection error")
+                    completion(.failure(PumpManagerError.connection(DanaKitPumpManagerError.noConnection)))
+                    return
+                case .success:
+                    do {
+                        let basalPacket = generatePacketBasalGetRate()
+                        let basalResult = try await DanaKitPumpManager.bluetoothManager.writeMessage(basalPacket)
+                        
+                        guard basalResult.success else {
+                            self.log.error("Pump refused to send basal rates back")
+                            self.disconnect()
+                            completion(.failure(PumpManagerError.configuration(DanaKitPumpManagerError.unknown("Pump refused to send basal rates back"))))
+                            return
+                        }
+                        
+                        let bolusPacket = generatePacketBolusGetStepInformation()
+                        let bolusResult = try await DanaKitPumpManager.bluetoothManager.writeMessage(bolusPacket)
+                        
+                        self.disconnect()
+                        guard bolusResult.success else {
+                            self.log.error("Pump refused to send bolus step back")
+                            completion(.failure(PumpManagerError.configuration(DanaKitPumpManagerError.unknown("Pump refused to send bolus step back"))))
+                            return
+                        }
+                        
+                        self.log.info("Fetching pump settings succesfully!")
+                        completion(.success(DeliveryLimits(
+                            maximumBasalRate: HKQuantity(unit: HKUnit.internationalUnit().unitDivided(by: .hour()), doubleValue: (basalResult.data as! PacketBasalGetRate).maxBasal),
+                            maximumBolus: HKQuantity(unit: .internationalUnit(), doubleValue: (bolusResult.data as! PacketBolusGetStepInformation).maxBolus)
+                        )))
+                    } catch {
+                        self.log.error("error caught \(error.localizedDescription)")
+                        self.disconnect()
+                        completion(.failure(PumpManagerError.communication(DanaKitPumpManagerError.unknown(error.localizedDescription))))
+                    }
+                }
+            }
+        }
+    }
+    
+    public func syncPumpTime(completion: @escaping (Error?) -> Void) {
+        delegateQueue.async {
+            self.ensureConnected { result in
+                switch result {
+                case .failure:
+                    self.log.error("Connection error")
+                    completion(PumpManagerError.connection(DanaKitPumpManagerError.noConnection))
+                    return
+                case .success:
+                    do {
+                        let offset = Date.now.timeIntervalSince(self.state.pumpTime ?? Date.distantPast)
+                        let packet: DanaGeneratePacket
+                        if self.state.usingUtc {
+                            packet = generatePacketGeneralSetPumpTimeUtcWithTimezone(options: PacketGeneralSetPumpTimeUtcWithTimezone(time: Date.now, zoneOffset: UInt8(round(Double(TimeZone.current.secondsFromGMT(for: Date.now) / 3600)))))
+                        } else {
+                            packet = generatePacketGeneralSetPumpTime(options: PacketGeneralSetPumpTime(time: Date.now))
+                        }
+                        
+                        let result = try await DanaKitPumpManager.bluetoothManager.writeMessage(packet)
+                        
+                        self.disconnect()
+                        
+                        guard result.success else {
+                            completion(PumpManagerError.configuration(DanaKitPumpManagerError.failedTimeAdjustment))
+                            return
+                        }
+                        
+                        self.pumpDelegate.notify { (delegate) in
+                            delegate?.pumpManager(self, didAdjustPumpClockBy: offset)
+                        }
+                        completion(nil)
+                    } catch {
+                        self.disconnect()
+                        self.log.error("Failed to sync time. Error: \(error.localizedDescription)")
+                        completion(PumpManagerError.communication(DanaKitPumpManagerError.unknown(error.localizedDescription)))
+                    }
+                }
+            }
+        }
+    }
+    
+    private func device() -> HKDevice {
+        return HKDevice(
+            name: managerIdentifier,
+            manufacturer: "Sooil",
+            model: self.state.getFriendlyDeviceName(),
+            hardwareVersion: String(self.state.hwModel),
+            firmwareVersion: String(self.state.pumpProtocol),
+            softwareVersion: "",
+            localIdentifier: self.state.deviceName,
+            udiDeviceIdentifier: nil
+        )
+    }
+    
+    private func ensureConnected(_ completion: @escaping (ConnectionResultShort) async -> Void) {
+        self.connectionCallback = { result in
+            Task {
+                DanaKitPumpManager.bluetoothManager.resetConnectionCompletion()
+                self.connectionCallback = nil
+                await completion(result)
+            }
+        }
+        
+        // Device still has an active connection with pump and is probably busy with something
+        if DanaKitPumpManager.bluetoothManager.isConnected && DanaKitPumpManager.bluetoothManager.peripheral?.state == .connected {
+            self.logDeviceCommunication("Dana - Failed to connect: Already connected", type: .connection)
+            self.connectionCallback?(.failure)
+            
+        // We stored the peripheral. We can quickly reconnect
+        } else if DanaKitPumpManager.bluetoothManager.peripheral != nil {
+            self.startTimeout(seconds: TimeInterval.seconds(15))
+            
+            self.connect(DanaKitPumpManager.bluetoothManager.peripheral!) { result in
+                guard let connectionCallback = self.connectionCallback else {
+                    // We've already hit the timeout function above
+                    // Exit if we every hit this...
+                    return
+                }
+                
+                switch result {
+                case .success:
+                    self.logDeviceCommunication("Dana - Connected", type: .connection)
+                    connectionCallback(.success)
+                case .failure(let err):
+                    self.logDeviceCommunication("Dana - Failed to connect: " + err.localizedDescription, type: .connection)
+                    connectionCallback(.failure)
+                case .requestedPincode:
+                    self.logDeviceCommunication("Dana - Requested pincode", type: .connection)
+                    connectionCallback(.failure)
+                case .invalidBle5Keys:
+                    self.logDeviceCommunication("Dana - Invalid ble 5 keys", type: .connection)
+                    connectionCallback(.failure)
+                }
+            }
+            // No active connection and no stored peripheral. We have to scan for device before being able to send command
+        } else if !DanaKitPumpManager.bluetoothManager.isConnected && self.state.bleIdentifier != nil {
+            do {
+                self.startTimeout(seconds: TimeInterval.seconds(30))
+                
+                try DanaKitPumpManager.bluetoothManager.connect(self.state.bleIdentifier!) { result in
+                    guard let connectionCallback = self.connectionCallback else {
+                        // We've already hit the timeout function above
+                        // Exit if we every hit this...
+                        return
+                    }
+                    
+                    switch result {
+                    case .success:
+                        self.logDeviceCommunication("Dana - Connected", type: .connection)
+                        connectionCallback(.success)
+                    case .failure(let err):
+                        self.logDeviceCommunication("Dana - Failed to connect: " + err.localizedDescription, type: .connection)
+                        connectionCallback(.failure)
+                    case .requestedPincode:
+                        self.logDeviceCommunication("Dana - Requested pincode", type: .connection)
+                        connectionCallback(.failure)
+                    case .invalidBle5Keys:
+                        self.logDeviceCommunication("Dana - Invalid ble 5 keys", type: .connection)
+                        connectionCallback(.failure)
+                    }
+                }
+            } catch {
+                self.logDeviceCommunication("Dana - Failed to connect: " + error.localizedDescription, type: .connection)
+                self.connectionCallback?(.failure)
+            }
+            
+            // Should never reach, but is only possible if device is not onboard (we have no ble identifier to connect to)
+        } else {
+            self.log.error("Pump is not onboarded")
+            self.logDeviceCommunication("Dana - Pump is not onboarded", type: .connection)
+            self.connectionCallback?(.failure)
+        }
+    }
+
+    private func startTimeout(seconds: TimeInterval) {
+        Task {
+            do {
+                try await Task.sleep(nanoseconds: UInt64(seconds) * 1000000000)
+                guard self.connectionCallback != nil else {
+                    return
+                }
+                
+                self.logDeviceCommunication("Dana - Failed to connect: Timeout reached...", type: .connection)
+                self.log.error("Failed to connect: Timeout reached...")
+                
+                self.connectionCallback?(.failure)
+                self.connectionCallback = nil
+            } catch{}
+        }
+    }
+    private func logDeviceCommunication(_ message: String, type: DeviceLogEntryType = .send) {
+        let address = String(format: "%04X", self.state.bleIdentifier ?? "")
+        // Not dispatching here; if delegate queue is blocked, timestamps will be delayed
+        self.pumpDelegate.delegate?.deviceManager(self, logEventForDeviceIdentifier: address, type: type, message: message, completion: nil)
+    }
+    
+    private func absoluteBasalRateToPercentage(absoluteValue: Double, basalSchedule: [Double]) -> UInt16? {
+        if absoluteValue == 0 {
+            return 0
+        }
+        
+        guard basalSchedule.count == 24 else {
+            return nil
+        }
+        
+        let now = Date()
+        let startOfDay = Calendar.current.startOfDay(for: now)
+        let nowTimeInterval = now.timeIntervalSince(startOfDay)
+        
+        let basalIntervals: [TimeInterval] = Array(0..<24).map({ TimeInterval(60 * 60 * $0) })
+        let basalIndex = (basalIntervals.firstIndex(where: { $0 > nowTimeInterval}) ?? 24) - 1
+        let basalRate = basalSchedule[basalIndex]
+        
+        return UInt16(round(absoluteValue / basalRate * 100))
+    }
+}
+
+extension DanaKitPumpManager: AlertSoundVendor {
+    public func getSoundBaseURL() -> URL? {
+        return nil
+    }
+
+    public func getSounds() -> [LoopKit.Alert.Sound] {
+        return []
+    }
+}
+
+extension DanaKitPumpManager {
+    public func acknowledgeAlert(alertIdentifier: LoopKit.Alert.AlertIdentifier, completion: @escaping (Error?) -> Void) {
+    }
+}
+
+// MARK: State observers
+extension DanaKitPumpManager {
+    public func addStatusObserver(_ observer: PumpManagerStatusObserver, queue: DispatchQueue) {
+        statusObservers.insert(observer, queue: queue)
+    }
+    
+    public func removeStatusObserver(_ observer: PumpManagerStatusObserver) {
+        statusObservers.removeElement(observer)
+    }
+    
+    public func addStateObserver(_ observer: StateObserver, queue: DispatchQueue) {
+        stateObservers.insert(observer, queue: queue)
+    }
+
+    public func removeStateObserver(_ observer: StateObserver) {
+        stateObservers.removeElement(observer)
+    }
+    
+    public func notifyStateDidChange() {
+        DispatchQueue.main.async {
+            let status = self.status(self.state)
+            let oldStatus = self.status(self.oldState)
+            
+            self.stateObservers.forEach { (observer) in
+                observer.stateDidUpdate(self.state, self.oldState)
+            }
+            
+            self.pumpDelegate.notify { (delegate) in
+                delegate?.pumpManagerDidUpdateState(self)
+                delegate?.pumpManager(self, didUpdate: status, oldStatus: oldStatus)
+            }
+            
+            self.statusObservers.forEach { (observer) in
+                observer.pumpManager(self, didUpdate: status, oldStatus: oldStatus)
+            }
+            
+            self.oldState = DanaKitPumpManagerState(rawValue: self.state.rawValue)
+        }
+    }
+    
+    public func addScanDeviceObserver(_ observer: StateObserver, queue: DispatchQueue) {
+        scanDeviceObservers.insert(observer, queue: queue)
+    }
+
+    public func removeScanDeviceObserver(_ observer: StateObserver) {
+        scanDeviceObservers.removeElement(observer)
+    }
+    
+    func notifyAlert(_ alert: PumpManagerAlert) {
+        let identifier = Alert.Identifier(managerIdentifier: self.managerIdentifier, alertIdentifier: alert.identifier)
+        let loopAlert = Alert(identifier: identifier, foregroundContent: alert.foregroundContent, backgroundContent: alert.backgroundContent, trigger: .immediate)
+        
+        let event = NewPumpEvent(date: Date(), dose: nil, raw: alert.raw, title: "Alarm: \(alert.foregroundContent.title)", type: .alarm, alarmType: alert.type)
+        
+        self.pumpDelegate.notify { delegate in
+            delegate?.issueAlert(loopAlert)
+            delegate?.pumpManager(self, hasNewPumpEvents: [event], lastReconciliation: Date(), replacePendingEvents: true, completion: { _ in })
+        }
+    }
+    
+    func notifyScanDeviceDidChange(_ device: DanaPumpScan) {
+        DispatchQueue.main.async {
+            self.scanDeviceObservers.forEach { (observer) in
+                observer.deviceScanDidUpdate(device)
+            }
+        }
+    }
+    
+    func notifyBolusError() {
+        guard let doseEntry = self.doseEntry, self.state.bolusState != .noBolus else {
+            // Ignore if no bolus is going
+            return
+        }
+        
+        self.state.bolusState = .noBolus
+        self.notifyStateDidChange()
+        
+        self.bolusCompleted?.resume()
+        
+        let dose = doseEntry.toDoseEntry()
+        let deliveredUnits = doseEntry.deliveredUnits
+        
+        self.doseEntry = nil
+        self.doseReporter = nil
+        
+        // We dont store the bolus or anything
+        // The ensurePumpData will make sure everything is up-to-date
+    }
+    
+    func notifyBolusDidUpdate(deliveredUnits: Double) {
+        guard let doseEntry = self.doseEntry else {
+            self.log.error("No bolus entry found...")
+            return
+        }
+        
+        doseEntry.deliveredUnits = deliveredUnits
+        self.doseReporter?.notify(deliveredUnits: deliveredUnits)
+        self.notifyStateDidChange()
+    }
+    
+    func notifyBolusDone(deliveredUnits: Double) {
+        Task {
+            self.state.bolusState = .noBolus
+            
+            self.state.lastStatusPumpDateTime = (await self.fetchPumpTime()) ?? Date.now
+            self.state.lastStatusDate = Date.now
+            self.notifyStateDidChange()
+
+            self.bolusCompleted?.resume()
+
+            delegateQueue.asyncAfter(deadline: .now() + 1) {
+                // Always try to disconnect when this event happens
+                self.disconnect()
+            }
+
+            guard let doseEntry = self.doseEntry else {
+                return
+            }
+
+            doseEntry.deliveredUnits = deliveredUnits
+
+            let dose = doseEntry.toDoseEntry()
+            self.doseEntry = nil
+            self.doseReporter = nil
+
+            guard let dose = dose else {
+                return
+            }
+
+            self.pumpDelegate.notify { (delegate) in
+                delegate?.pumpManager(self, hasNewPumpEvents: [NewPumpEvent.bolus(dose: dose, units: deliveredUnits)], lastReconciliation: Date.now, replacePendingEvents: true, completion: { _ in })
+            }
+
+            self.notifyStateDidChange()
+        }
+    }
+    
+    func checkBolusDone() {
+        guard let doseEntry = self.doseEntry else {
+            // Disconnect was done after bolus was complete!
+            return
+        }
+        
+        self.log.error("Bolus was not completed... \(doseEntry.deliveredUnits)U of the \(doseEntry.value)U")
+        self.bolusCompleted?.resume()
+        
+        // There was a bolus going on, unsure if the bolus is completed...
+        self.state.bolusState = .noBolus
+        self.state.lastStatusDate = Date.now
+        self.doseEntry = nil
+        self.notifyStateDidChange()
+        
+        self.pumpDelegate.notify { (delegate) in
+            delegate?.pumpManager(self, didError: .uncertainDelivery)
+        }
+    }
+}
diff --git a/DanaKit/DanaKit/PumpManager/DanaKitPumpManagerError.swift b/DanaKit/DanaKit/PumpManager/DanaKitPumpManagerError.swift
new file mode 100644
index 0000000..e3e05ee
--- /dev/null
+++ b/DanaKit/DanaKit/PumpManager/DanaKitPumpManagerError.swift
@@ -0,0 +1,57 @@
+//
+//  DanaKitErrors.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 09/01/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+public enum DanaKitPumpManagerError {
+    case noConnection
+    case pumpSuspended
+    case pumpIsBusy
+    case failedTempBasalAdjustment(_ extraMessage: String)
+    case failedSuspensionAdjustment
+    case failedBasalGeneration
+    case failedBasalAdjustment
+    case failedTimeAdjustment
+    case unsupportedTempBasal(_ duration: TimeInterval)
+    case bolusTimeoutActive
+    case bolusMaxViolation
+    case bolusInsulinLimitViolation
+    case unknown(_ message: String)
+}
+
+
+extension DanaKitPumpManagerError: LocalizedError {
+    public var errorDescription: String? {
+        switch self {
+        case .noConnection:
+            return LocalizedString("Failed to make a connection", comment: "Error description when no rileylink connected")
+        case .failedTempBasalAdjustment(let reason):
+            return LocalizedString("Failed to adjust temp basal. \(reason)", comment: "Error description when failed temp adjustment")
+        case .failedSuspensionAdjustment:
+            return LocalizedString("Failed to adjust suspension", comment: "Error description when failed suspension adjustment")
+        case .failedBasalGeneration:
+            return LocalizedString("Failed to generate Dana basal program", comment: "Error description when failed generating basal program")
+        case .failedBasalAdjustment:
+            return LocalizedString("Failed to adjust basal", comment: "Error description when failed basal adjustment")
+        case .unsupportedTempBasal(let duration):
+            return LocalizedString("Setting temp basal is not supported at this time. Duration: \(duration)sec", comment: "Error description when trying to set temp basal")
+        case .pumpSuspended:
+            return LocalizedString("The insulin delivery has been suspend. Action failed", comment: "Error description when pump is suspended")
+        case .failedTimeAdjustment:
+            return LocalizedString("Failed to adjust pump time", comment: "Error description when pump time failed to sync")
+        case .pumpIsBusy:
+            return LocalizedString("Action has been canceled, because the pump is busy", comment: "Error description when pump is busy (with bolussing probably)")
+        case .bolusTimeoutActive:
+            return LocalizedString("A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive", comment: "Error description when pump has an active blockage")
+        case .bolusMaxViolation:
+            return LocalizedString("The max bolus limit is reached. Please try a lower amount or increase the limit", comment: "Error description when pump has reached the bolus max")
+        case .bolusInsulinLimitViolation:
+            return LocalizedString("The max daily insulin limit is reached. Please try a lower amount or increase the limit", comment: "Error description when pump has reached the daily max")
+        case .unknown(let message):
+            return "Unknown error occured: \(message)"
+        }
+    }
+}
diff --git a/DanaKit/DanaKit/PumpManager/DanaKitPumpManagerState.swift b/DanaKit/DanaKit/PumpManager/DanaKitPumpManagerState.swift
new file mode 100644
index 0000000..00c1b52
--- /dev/null
+++ b/DanaKit/DanaKit/PumpManager/DanaKitPumpManagerState.swift
@@ -0,0 +1,397 @@
+//
+//  DanaKitPumpManagerState.swift
+//  DanaKit
+//
+//  Based on OmniKit/PumpManager/OmnipodPumpManagerState.swift
+//  Created by Pete Schwamb on 8/4/18.
+//  Copyright © 2021 LoopKit Authors. All rights reserved.
+//
+
+import LoopKit
+
+public enum DanaKitBasal: Int {
+    case active = 0
+    case suspended = 1
+    case tempBasal = 2
+}
+
+public enum BolusState: Int {
+    case noBolus = 0
+    case initiating = 1
+    case inProgress = 2
+    case canceling = 3
+}
+
+public struct DanaKitPumpManagerState: RawRepresentable, Equatable {
+    public typealias RawValue = PumpManager.RawStateValue
+    
+    public init(rawValue: RawValue) {
+        self.lastStatusDate = rawValue["lastStatusDate"] as? Date ?? Date().addingTimeInterval(.hours(-8))
+        self.lastStatusPumpDateTime = rawValue["lastStatusPumpDateTime"] as? Date ?? self.lastStatusDate
+        self.deviceName = rawValue["deviceName"] as? String
+        self.bleIdentifier = rawValue["bleIdentifier"] as? String
+        self.isConnected = false // To prevent having an old isConnected state
+        self.reservoirLevel = rawValue["reservoirLevel"] as? Double ?? 0
+        self.hwModel = rawValue["hwModel"] as? UInt8 ?? 0
+        self.pumpProtocol = rawValue["pumpProtocol"] as? UInt8 ?? 0
+        self.isInFetchHistoryMode = rawValue["isInFetchHistoryMode"] != nil
+        self.ignorePassword = rawValue["ignorePassword"] as? Bool ?? false
+        self.devicePassword = rawValue["devicePassword"] as? UInt16 ?? 0
+        self.isOnBoarded = rawValue["isOnBoarded"] as? Bool ?? false
+        self.basalDeliveryDate = rawValue["basalDeliveryDate"] as? Date ?? Date.now
+        self.pumpTime = rawValue["pumpTime"] as? Date
+        self.pumpTimeSyncedAt = rawValue["pumpTimeSyncedAt"] as? Date
+        self.basalSchedule = rawValue["basalSchedule"] as? [Double] ?? []
+        self.tempBasalUnits = rawValue["tempBasalUnits"] as? Double
+        self.tempBasalDuration = rawValue["tempBasalDuration"] as? Double
+        self.ble5Keys = rawValue["ble5Keys"] as? Data ?? Data([0, 0, 0, 0, 0, 0])
+        self.pairingKey = rawValue["pairingKey"] as? Data ?? Data([0, 0, 0, 0, 0, 0])
+        self.randomPairingKey = rawValue["randomPairingKey"] as? Data ?? Data([0, 0, 0])
+        self.randomSyncKey = rawValue["randomSyncKey"] as? UInt8 ?? 0
+        self.isTimeDisplay24H = rawValue["isTimeDisplay24H"] as? Bool ?? false
+        self.isButtonScrollOnOff = rawValue["isButtonScrollOnOff"] as? Bool ?? false
+        self.lcdOnTimeInSec = rawValue["lcdOnTimeInSec"] as? UInt8 ?? 0
+        self.backlightOnTimInSec = rawValue["backlightOnTimInSec"] as? UInt8 ?? 0
+        self.units = rawValue["units"] as? UInt8 ?? 0
+        self.lowReservoirRate = rawValue["lowReservoirRate"] as? UInt8 ?? 0
+        self.selectedLanguage = rawValue["selectedLanguage"] as? UInt8 ?? 0
+        self.shutdownHour = rawValue["shutdownHour"] as? UInt8 ?? 0
+        self.cannulaVolume = rawValue["cannulaVolume"] as? UInt16 ?? 0
+        self.refillAmount = rawValue["refillAmount"] as? UInt16 ?? 0
+        self.targetBg = rawValue["targetBg"] as? UInt16
+        self.useSilentTones = rawValue["useSilentTones"] as? Bool ?? true
+        self.batteryRemaining = rawValue["batteryRemaining"] as? Double ?? 0
+        self.basalProfileNumber = rawValue["basalProfileNumber"] as? UInt8 ?? 0
+        self.cannulaDate = rawValue["cannulaDate2"] as? Date
+        self.reservoirDate = rawValue["reservoirDate"] as? Date
+        
+        if let bolusSpeedRaw = rawValue["bolusSpeed"] as? BolusSpeed.RawValue {
+            bolusSpeed = BolusSpeed(rawValue: bolusSpeedRaw) ?? .speed12
+        } else {
+            bolusSpeed = .speed12
+        }
+        
+        if let bolusStateRaw = rawValue["bolusState"] as? BolusState.RawValue {
+            bolusState = BolusState(rawValue: bolusStateRaw) ?? .noBolus
+        } else {
+            bolusState = .noBolus
+        }
+        
+        if let rawInsulinType = rawValue["insulinType"] as? InsulinType.RawValue {
+            insulinType = InsulinType(rawValue: rawInsulinType)
+        }
+        
+        if let rawBeepAndAlarmType = rawValue["beepAndAlarm"] as? UInt8 {
+            beepAndAlarm = BeepAlarmType(rawValue: rawBeepAndAlarmType) ?? .sound
+        } else {
+            beepAndAlarm = .sound
+        }
+        
+        if let rawBasalDeliveryOrdinal = rawValue["basalDeliveryOrdinal"] as? DanaKitBasal.RawValue {
+            self.basalDeliveryOrdinal = DanaKitBasal(rawValue: rawBasalDeliveryOrdinal) ?? .active
+        } else {
+            self.basalDeliveryOrdinal = .active
+        }
+    }
+    
+    public init(basalSchedule: [Double]? = nil) {
+        self.lastStatusDate = Date().addingTimeInterval(.hours(-8))
+        self.lastStatusPumpDateTime = self.lastStatusDate
+        self.isConnected = false // To prevent having an old isConnected state
+        self.reservoirLevel = 0
+        self.hwModel = 0
+        self.pumpProtocol = 0
+        self.isInFetchHistoryMode = false
+        self.ignorePassword = false
+        self.devicePassword = 0
+        self.bolusSpeed = .speed12
+        self.isOnBoarded = false
+        self.basalDeliveryDate = Date.now
+        self.bolusState = .noBolus
+        self.basalSchedule = basalSchedule ?? []
+        self.ble5Keys = Data([0, 0, 0, 0, 0, 0])
+        self.pairingKey = Data([0, 0, 0, 0, 0, 0])
+        self.randomPairingKey = Data([0, 0, 0])
+        self.randomSyncKey = 0
+        self.basalDeliveryOrdinal = .active
+        self.isTimeDisplay24H = false
+        self.isButtonScrollOnOff = false
+        self.beepAndAlarm = .sound
+        self.lcdOnTimeInSec = 0
+        self.backlightOnTimInSec = 0
+        self.units = 0
+        self.lowReservoirRate = 0
+        self.selectedLanguage = 0
+        self.shutdownHour = 0
+        self.cannulaVolume = 0
+        self.basalProfileNumber = 0
+        self.refillAmount = 0
+        self.targetBg = nil
+        self.useSilentTones = false
+        self.batteryRemaining = 0
+        self.cannulaDate = nil
+    }
+    
+    public var rawValue: RawValue {
+        var value: [String : Any] = [:]
+        
+        value["lastStatusDate"] = self.lastStatusDate
+        value["lastStatusPumpDateTime"] = self.lastStatusPumpDateTime
+        value["deviceName"] = self.deviceName
+        value["bleIdentifier"] = self.bleIdentifier
+        value["reservoirLevel"] = self.reservoirLevel
+        value["hwModel"] = self.hwModel
+        value["pumpProtocol"] = self.pumpProtocol
+        value["isInFetchHistoryMode"] = self.isInFetchHistoryMode
+        value["ignorePassword"] = self.ignorePassword
+        value["devicePassword"] = self.devicePassword
+        value["insulinType"] = self.insulinType?.rawValue
+        value["bolusSpeed"] = self.bolusSpeed.rawValue
+        value["isOnBoarded"] = self.isOnBoarded
+        value["basalDeliveryDate"] = self.basalDeliveryDate
+        value["basalDeliveryOrdinal"] = self.basalDeliveryOrdinal.rawValue
+        value["bolusState"] = self.bolusState.rawValue
+        value["pumpTime"] = self.pumpTime
+        value["pumpTimeSyncedAt"] = self.pumpTimeSyncedAt
+        value["basalSchedule"] = self.basalSchedule
+        value["tempBasalUnits"] = self.tempBasalUnits
+        value["tempBasalDuration"] = self.tempBasalDuration
+        value["ble5Keys"] = self.ble5Keys
+        value["pairingKey"] = self.pairingKey
+        value["randomPairingKey"] = self.randomPairingKey
+        value["randomSyncKey"] = self.randomSyncKey
+        value["isTimeDisplay24H"] = self.isTimeDisplay24H
+        value["isButtonScrollOnOff"] = self.isButtonScrollOnOff
+        value["beepAndAlarm"] = self.beepAndAlarm.rawValue
+        value["lcdOnTimeInSec"] = self.lcdOnTimeInSec
+        value["backlightOnTimInSec"] = self.backlightOnTimInSec
+        value["units"] = self.units
+        value["selectedLanguage"] = self.selectedLanguage
+        value["shutdownHour"] = self.shutdownHour
+        value["cannulaVolume"] = self.cannulaVolume
+        value["refillAmount"] = self.refillAmount
+        value["targetBg"] = self.targetBg
+        value["useSilentTones"] = self.useSilentTones
+        value["batteryRemaining"] = self.batteryRemaining
+        value["basalProfileNumber"] = self.basalProfileNumber
+        value["cannulaDate2"] = self.cannulaDate // Migration to new value
+        value["reservoirDate"] = self.reservoirDate
+        
+        return value
+    }
+    
+    /// The last moment this state has been updated (only for relavant values like isConnected or reservoirLevel)
+    public var lastStatusDate: Date = Date().addingTimeInterval(.hours(-8))
+    public var lastStatusPumpDateTime: Date
+    
+    public var isOnBoarded = false
+    
+    /// The name of the device. Needed for en/de-crypting messages
+    public var deviceName: String? = nil
+    
+    /// The bluetooth identifier. Used to reconnect to pump
+    public var bleIdentifier: String? = nil
+    
+    /// Flag for checking if the device is still connected
+    public var isConnected: Bool = false
+    
+    /// Current reservoir levels
+    public var reservoirLevel: Double = 0
+    
+    /// The hardware model of the pump. Dertermines the friendly device name
+    public var hwModel: UInt8 = 0x00
+    public var usingUtc: Bool {
+        hwModel >= 7
+    }
+    
+    /// Pump protocol
+    public var pumpProtocol: UInt8 = 0x00
+    
+    public var bolusSpeed: BolusSpeed = .speed12
+    
+    public var batteryRemaining: Double = 0
+    
+    public var isPumpSuspended: Bool = false
+    
+    public var isTempBasalInProgress: Bool = false
+    
+    public var bolusState: BolusState = .noBolus
+    
+    public var insulinType: InsulinType? = nil
+    
+    /// The pump should be in history fetch mode, before requesting history data
+    public var isInFetchHistoryMode: Bool = false
+    
+    public var ignorePassword: Bool = false
+    public var devicePassword: UInt16 = 0
+    
+    public var basalSchedule: [Double]
+    
+    public var ble5Keys: Data = Data([0, 0, 0, 0, 0, 0])
+    
+    public var pairingKey: Data = Data([0, 0, 0, 0, 0, 0])
+    public var randomPairingKey: Data = Data([0, 0, 0])
+    public var randomSyncKey: UInt8 = 0
+    
+    public var pumpTime: Date? {
+        didSet {
+            pumpTimeSyncedAt = Date.now
+        }
+    }
+    public var pumpTimeSyncedAt: Date?
+    
+    public var basalProfileNumber: UInt8 = 0
+    
+    public var reservoirDate: Date?
+    public var cannulaDate: Date?
+    
+    /// User options
+    public var isTimeDisplay24H: Bool
+    public var isButtonScrollOnOff: Bool
+    public var beepAndAlarm: BeepAlarmType
+    public var lcdOnTimeInSec: UInt8
+    public var backlightOnTimInSec: UInt8
+    public var selectedLanguage: UInt8
+    public var units: UInt8
+    public var shutdownHour: UInt8
+    public var lowReservoirRate: UInt8
+    public var cannulaVolume: UInt16
+    public var refillAmount: UInt16
+    public var targetBg: UInt16?
+    
+    public var basalDeliveryDate: Date = Date.now
+    public var basalDeliveryOrdinal: DanaKitBasal = .active
+    public var tempBasalUnits: Double?
+    public var tempBasalDuration: Double?
+    public var tempBasalEndsAt: Date {
+        basalDeliveryDate + (tempBasalDuration ?? 0)
+    }
+    public var basalDeliveryState: PumpManagerStatus.BasalDeliveryState {
+        switch(self.basalDeliveryOrdinal) {
+        case .active:
+            return .active(self.basalDeliveryDate)
+        case .suspended:
+            return .suspended(self.basalDeliveryDate)
+        case .tempBasal:
+            return .tempBasal(
+                DoseEntry.tempBasal(
+                    absoluteUnit: tempBasalUnits ?? 0,
+                    duration: tempBasalDuration ?? 0,
+                    insulinType: insulinType!,
+                    startDate: basalDeliveryDate
+                ))
+        }
+    }
+    
+    public var useSilentTones: Bool = false
+    
+    func shouldShowTimeWarning() -> Bool {
+        guard let pumpTime = self.pumpTime, let syncedAt = self.pumpTimeSyncedAt else {
+            return false
+        }
+        
+        // Allow a 15 sec diff in time
+        return abs(syncedAt.timeIntervalSince1970 - pumpTime.timeIntervalSince1970) > 15
+    }
+    
+    mutating func resetState() {
+        self.ignorePassword = false
+        self.devicePassword = 0
+        self.isInFetchHistoryMode = false
+    }
+    
+    func getFriendlyDeviceName() -> String {
+        switch (self.hwModel) {
+            case 0x01:
+                return "DanaR Korean"
+
+            case 0x03:
+            switch (self.pumpProtocol) {
+                case 0x00:
+                  return "DanaR old"
+                case 0x02:
+                  return "DanaR v2"
+                default:
+                  return "DanaR" // 0x01 and 0x03 known
+              }
+
+            case 0x05:
+                return self.pumpProtocol < 10 ? "DanaRS" : "DanaRS v3"
+
+            case 0x06:
+                return "DanaRS Korean"
+
+            case 0x07:
+                return "Dana-i (BLE4.2)"
+
+            case 0x09:
+                return "Dana-i (BLE5)"
+            case 0x0a:
+                return "Dana-i (BLE5, Korean)"
+            default:
+                return "Unknown Dana pump"
+          }
+    }
+    
+    func getDanaPumpImageName() -> String {
+        switch (self.hwModel) {
+        case 0x03:
+            return "danars"
+        case 0x05:
+            return "danars"
+        case 0x06:
+            return "danars"
+            
+        case 0x07:
+            return "danai"
+        case 0x09:
+            return "danai"
+        case 0x0a:
+            return "danai"
+            
+        default:
+            return "danai"
+        }
+    }
+    
+    static func convertBasal(_ scheduleItems: [RepeatingScheduleValue<Double>]) -> [Double] {
+        let basalIntervals: [TimeInterval] = Array(0..<24).map({ TimeInterval(60 * 60 * $0) })
+        var output: [Double] = []
+        
+        var currentIndex = 0
+        for i in 0..<24 {
+            if (currentIndex >= scheduleItems.count) {
+                output.append(scheduleItems[currentIndex - 1].value)
+            } else if (scheduleItems[currentIndex].startTime != basalIntervals[i]) {
+                output.append(scheduleItems[currentIndex - 1].value)
+            } else {
+                output.append(scheduleItems[currentIndex].value)
+                currentIndex += 1
+            }
+        }
+        
+        return output
+    }
+}
+
+extension DanaKitPumpManagerState: CustomDebugStringConvertible {
+    public var debugDescription: String {
+        return [
+            "## DanaKitPumpManagerState",
+            "* isOnboarded: \(isOnBoarded)",
+            "* isConnected: \(isConnected)",
+            "* deviceName: \(String(describing: deviceName))",
+            "* bleIdentifier: \(String(describing: bleIdentifier))",
+            "* friendlyDeviceName: \(getFriendlyDeviceName())",
+            "* insulinType: \(String(describing: insulinType))",
+            "* reservoirLevel: \(reservoirLevel)",
+            "* bolusState: \(bolusState.rawValue)",
+            "* basalDeliveryDate: \(basalDeliveryDate)",
+            "* basalDeliveryOrdinal: \(basalDeliveryOrdinal)",
+            "* hwModel: \(hwModel)",
+            "* pumpProtocol: \(pumpProtocol)",
+            "* isInFetchHistoryMode: \(isInFetchHistoryMode)",
+            "* ignorePassword: \(ignorePassword)"
+        ].joined(separator: "\n")
+    }
+}
diff --git a/DanaKit/DanaKit/PumpManager/PeripheralManager.swift b/DanaKit/DanaKit/PumpManager/PeripheralManager.swift
new file mode 100644
index 0000000..abe56d4
--- /dev/null
+++ b/DanaKit/DanaKit/PumpManager/PeripheralManager.swift
@@ -0,0 +1,695 @@
+//
+//  PeripheralManager.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 21/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import CoreBluetooth
+import os.log
+import SwiftUI
+
+class PeripheralManager: NSObject {
+    private let log = DanaLogger(category: "PeripheralManager")
+    
+    private let connectedDevice: CBPeripheral
+    private let bluetoothManager: BluetoothManager
+    private var completion: ((ConnectionResult) -> Void)?
+    
+    private var pumpManager: DanaKitPumpManager
+    private var readBuffer = Data([])
+    
+    private let okCharCodes: [UInt8] = [0x4f, 0x4b] // O, K
+    private let pumpCharCodes: [UInt8] = [0x50, 0x55, 0x4d, 0x50] // P, U, M, P
+    private let busyCharCodes: [UInt8] = [0x42, 0x55, 0x53, 0x59] // B, U, S, Y
+    
+    private let PACKET_START_BYTE: UInt8 = 0xa5
+    private let PACKET_END_BYTE: UInt8 = 0x5a
+    private let ENCRYPTED_START_BYTE: UInt8 = 0xaa
+    private let ENCRYPTED_END_BYTE: UInt8 = 0xee
+    
+    public static let SERVICE_UUID = CBUUID(string: "FFF0")
+    private let READ_CHAR_UUID = CBUUID(string: "FFF1")
+    private var readCharacteristic: CBCharacteristic!
+    private let WRITE_CHAR_UUID = CBUUID(string: "FFF2")
+    private var writeCharacteristic: CBCharacteristic!
+    
+    private var lock: DispatchQueue = DispatchQueue.init(label: "writeQueue")
+    private var writeQueue: Dictionary<UInt8, (Timer, CheckedContinuation<(any DanaParsePacketProtocol), Error>)> = [:]
+    
+    private var historyLog: [HistoryItem] = []
+    
+    private var encryptionMode: EncryptionType = .DEFAULT {
+        didSet {
+            DanaRSEncryption.setEnhancedEncryption(encryptionMode.rawValue)
+        }
+    }
+    
+    private var deviceName: String {
+        get {
+            return self.pumpManager.state.deviceName ?? ""
+        }
+    }
+    
+    public init(_ peripheral: CBPeripheral, _ bluetoothManager: BluetoothManager, _ pumpManager: DanaKitPumpManager,_ completion: @escaping (ConnectionResult) -> Void) {
+        self.connectedDevice = peripheral
+        self.encryptionMode = .DEFAULT
+        self.bluetoothManager = bluetoothManager
+        self.pumpManager = pumpManager
+        self.completion = completion
+        
+        super.init()
+        
+        peripheral.delegate = self
+    }
+    
+    func writeMessage(_ packet: DanaGeneratePacket) async throws -> (any DanaParsePacketProtocol)  {
+        let command = (UInt16((packet.type ?? DanaPacketType.TYPE_RESPONSE)) << 8) + UInt16(packet.opCode)
+        
+        // Add objetc sync to prevent:
+        // -[NSTaggedPointerString objectForKey:]: unrecognized selector sent to instance 0x8000000000000000
+        try lock.sync {
+            guard self.writeQueue[packet.opCode] == nil else {
+                throw NSError(domain: "This command is already running. Please wait", code: 0, userInfo: nil)
+            }
+        }
+        
+        // Make sure we have the correct state
+        if (packet.opCode == CommandGeneralSetHistoryUploadMode && packet.data != nil) {
+            self.pumpManager.state.isInFetchHistoryMode = packet.data![0] == 0x01
+        } else {
+            self.pumpManager.state.isInFetchHistoryMode = false
+        }
+        
+        
+        var data = DanaRSEncryption.encodePacket(operationCode: packet.opCode, buffer: packet.data, deviceName: self.deviceName)
+//        log.info("Encrypted data: \(data.base64EncodedString())")
+        
+        if (self.encryptionMode != .DEFAULT) {
+            data = DanaRSEncryption.encodeSecondLevel(data: data)
+//            log.info("Second level encrypted data: \(data.base64EncodedString())")
+        }
+        
+        // Now schedule a 6 sec timeout (or 21 when in fetchHistoryMode) for the pump to send its message back
+        // This timeout will be cancelled by `processMessage` once it received the message
+        // If this timeout expired, disconnect from the pump and prompt an error...
+        let isHistoryPacket = self.isHistoryPacket(opCode: command)
+        return try await withCheckedThrowingContinuation { continuation in
+            let sendingTimer = Timer.scheduledTimer(withTimeInterval: !isHistoryPacket ? 6 : 21, repeats: false) { _ in
+                guard let queueItem = self.writeQueue[packet.opCode] else {
+                    return
+                }
+                
+                queueItem.1.resume(throwing: NSError(domain: "Message write timeout", code: 0, userInfo: nil))
+                self.writeQueue[packet.opCode] = nil
+            }
+            
+            self.writeQueue[packet.opCode] = (sendingTimer, continuation)
+            
+            while (data.count != 0) {
+                let end = min(20, data.count)
+                let message = data.subdata(in: 0..<end)
+                
+                self.writeQ(message)
+                data = data.subdata(in: end..<data.count)
+            }
+        }
+    }
+    
+    private func connectionFailure(_ error: any Error) {
+        guard let completion = self.completion else {
+            self.bluetoothManager.disconnect(self.connectedDevice)
+            return
+        }
+        
+        DispatchQueue.main.async {
+            completion(.failure(error))
+        }
+    }
+}
+
+extension PeripheralManager : CBPeripheralDelegate {
+    func peripheral(_ peripheral: CBPeripheral, didDiscoverServices error: Error?) {
+        guard error == nil else {
+            log.error("\(error!.localizedDescription)")
+            self.bluetoothManager.disconnect(peripheral)
+            
+            connectionFailure(error!)
+            return
+        }
+        
+        let service = peripheral.services?.first(where: { $0.uuid == PeripheralManager.SERVICE_UUID })
+        if (service == nil) {
+            log.error("Failed to discover dana data service...")
+            self.bluetoothManager.disconnect(peripheral)
+            
+            connectionFailure(NSError(domain: "Failed to discover dana data service...", code: 0, userInfo: nil))
+            return
+        }
+        
+//        log.info("Discovered service \(PeripheralManager.SERVICE_UUID)")
+        
+        peripheral.discoverCharacteristics([READ_CHAR_UUID, WRITE_CHAR_UUID], for: service!)
+    }
+    
+    func peripheral(_ peripheral: CBPeripheral, didDiscoverCharacteristicsFor service: CBService, error: Error?) {
+        guard error == nil else {
+            log.error("\(error!.localizedDescription)")
+            self.bluetoothManager.disconnect(peripheral)
+            
+            connectionFailure(error!)
+            return
+        }
+        
+        let service = peripheral.services!.first(where: { $0.uuid == PeripheralManager.SERVICE_UUID })!
+        self.readCharacteristic = service.characteristics?.first(where: { $0.uuid == READ_CHAR_UUID })
+        self.writeCharacteristic = service.characteristics?.first(where: { $0.uuid == WRITE_CHAR_UUID })
+        
+        if (self.writeCharacteristic == nil || self.readCharacteristic == nil) {
+            log.error("Failed to discover dana write or read characteristic")
+            self.bluetoothManager.disconnect(peripheral)
+            
+            connectionFailure(NSError(domain: "Failed to discover dana write or read characteristic", code: 0, userInfo: nil))
+            return
+        }
+        
+//        log.info("Discovered characteristics \(READ_CHAR_UUID) and \(WRITE_CHAR_UUID)")
+        peripheral.setNotifyValue(true, for: self.readCharacteristic)
+    }
+    
+    func peripheral(_ peripheral: CBPeripheral, didUpdateNotificationStateFor characteristic: CBCharacteristic, error: Error?)  {
+        guard error == nil else {
+            log.error("\(error!.localizedDescription)")
+            self.bluetoothManager.disconnect(peripheral)
+            
+            connectionFailure(error!)
+            return
+        }
+        
+//        log.info("Notifications has been enabled. Sending starting handshake")
+        self.sendFirstMessageEncryption()
+    }
+    
+    func peripheral(_ peripheral: CBPeripheral, didUpdateValueFor characteristic: CBCharacteristic, error: Error?) {
+        guard error == nil else {
+            log.error("\(error!.localizedDescription)")
+            self.bluetoothManager.disconnect(peripheral)
+            
+            connectionFailure(error!)
+            return
+        }
+        
+        guard let data = characteristic.value else {
+            return
+        }
+        
+//        log.info("Receiving data: \(data.base64EncodedString())")
+        self.parseReceivedValue(data)
+    }
+    
+    private func writeQ(_ data: Data) {
+//        log.info("Writing data \(data.base64EncodedString())")
+        self.connectedDevice.writeValue(data, for: self.writeCharacteristic, type: .withoutResponse)
+    }
+}
+
+// MARK: - Encryption/Connection functions
+extension PeripheralManager {
+    private func sendFirstMessageEncryption() {
+        let data = DanaRSEncryption.encodePacket(operationCode: DanaPacketType.OPCODE_ENCRYPTION__PUMP_CHECK, buffer: nil, deviceName: self.deviceName)
+        
+//        log.info("Sending Initial encryption request. Data: \(data.base64EncodedString())")
+        self.writeQ(data)
+    }
+    
+    private func sendTimeInfo() {
+        let data = DanaRSEncryption.encodePacket(operationCode: DanaPacketType.OPCODE_ENCRYPTION__TIME_INFORMATION, buffer: nil, deviceName: self.deviceName)
+        
+//        log.info("Sending normal time information. Data: \(data.base64EncodedString())")
+        self.writeQ(data)
+    }
+    
+    private func sendV3PairingInformation(_ requestNewPairing: UInt8) {
+        let data = DanaRSEncryption.encodePacket(operationCode: DanaPacketType.OPCODE_ENCRYPTION__TIME_INFORMATION, buffer: Data([requestNewPairing]), deviceName: self.deviceName)
+        
+//        log.info("Sending RSv3 time information. Data: \(data.base64EncodedString())")
+        self.writeQ(data)
+    }
+    
+    // 0x00 Start encryption, 0x01 Request pairing
+    private func sendV3PairingInformationEmpty() {
+        var (pairingKey, randomPairingKey) = DanaRSEncryption.getPairingKeys()
+        if pairingKey.filter({ $0 != 0 }).count == 0 || randomPairingKey.filter({ $0 != 0 }).count == 0 {
+            pairingKey = self.pumpManager.state.pairingKey
+            randomPairingKey = self.pumpManager.state.randomPairingKey
+            
+            if pairingKey.filter({ $0 != 0 }).count == 0 || randomPairingKey.filter({ $0 != 0 }).count == 0 {
+                self.sendV3PairingInformation(1)
+                return
+            }
+        }
+        
+        let randomSyncKey = self.pumpManager.state.randomSyncKey
+//        self.log.info("Setting encryption keys. Pairing key: \(pairingKey.base64EncodedString()), random pairing key: \(randomPairingKey.base64EncodedString()), random sync key: \(randomSyncKey)")
+        DanaRSEncryption.setPairingKeys(pairingKey: pairingKey, randomPairingKey: randomPairingKey, randomSyncKey: randomSyncKey)
+        
+        self.sendV3PairingInformation(0)
+    }
+    
+    private func sendPairingRequest() {
+        let data = DanaRSEncryption.encodePacket(operationCode: DanaPacketType.OPCODE_ENCRYPTION__PASSKEY_REQUEST, buffer: nil, deviceName: self.deviceName)
+        
+//        log.info("Sending pairing request. Data: \(data.base64EncodedString())")
+        self.writeQ(data)
+    }
+    
+    private func sendEasyMenuCheck() {
+        let data = DanaRSEncryption.encodePacket(operationCode: DanaPacketType.OPCODE_ENCRYPTION__GET_EASYMENU_CHECK, buffer: nil, deviceName: self.deviceName)
+        
+//        log.info("Sending easy menu check. Data: \(data.base64EncodedString())")
+        self.writeQ(data)
+    }
+    
+    private func sendBLE5PairingInformation() {
+        let data = DanaRSEncryption.encodePacket(operationCode: DanaPacketType.OPCODE_ENCRYPTION__TIME_INFORMATION, buffer: Data([0, 0, 0, 0]), deviceName: self.deviceName)
+        
+//        log.info("Sending BLE5 time information. Data: \(Data([0, 0, 0, 0]).base64EncodedString())")
+        self.writeQ(data)
+    }
+    
+    private func sendPassKeyCheck(_ pairingKey: Data) {
+        let data = DanaRSEncryption.encodePacket(operationCode: DanaPacketType.OPCODE_ENCRYPTION__CHECK_PASSKEY, buffer: pairingKey, deviceName: self.deviceName)
+        
+//        log.info("Sending Passkey check. Data: \(data.base64EncodedString())")
+        self.writeQ(data)
+    }
+    
+    /// Used after entering PIN codes (only for DanaRS v3)
+    public func finishV3Pairing(_ pairingKey: Data, _ randomPairingKey: Data) {
+//        log.info("Storing security keys: Pairing key: \(pairingKey.base64EncodedString()), random pairing key: \(randomPairingKey.base64EncodedString())")
+        
+        DanaRSEncryption.setPairingKeys(pairingKey: pairingKey, randomPairingKey: randomPairingKey, randomSyncKey: nil)
+        self.pumpManager.state.pairingKey = pairingKey
+        self.pumpManager.state.randomPairingKey = randomPairingKey
+        
+        self.sendV3PairingInformation(0)
+    }
+    
+    private func processEasyMenuCheck(_ data: Data) {
+        if (self.encryptionMode == .RSv3) {
+            self.sendV3PairingInformationEmpty()
+        } else {
+            self.sendTimeInfo()
+        }
+    }
+    
+    private func processPairingRequest(_ data: Data) {
+        if (data[2] == 0x00) {
+            // Everything is order. Waiting for pump to send OPCODE_ENCRYPTION__PASSKEY_RETURN
+            return
+        }
+        
+        log.error("Passkey request failed. Data: \(data.base64EncodedString())")
+        self.bluetoothManager.disconnect(self.connectedDevice)
+        
+        connectionFailure(NSError(domain: "Passkey request failed", code: 0, userInfo: nil))
+    }
+    
+    private func processPairingRequest2(_ data: Data) {
+        self.sendTimeInfo()
+        
+        let pairingKey = data.subdata(in: 2..<4)
+        DanaRSEncryption.setPairingKeys(pairingKey: pairingKey, randomPairingKey: Data(), randomSyncKey: 0)
+    }
+    
+    private func processConnectResponse(_ data: Data) {
+        if (data.count == 4 && self.isOk(data)) {
+            // response OK v1
+            self.encryptionMode = .DEFAULT
+//            log.info("Setting encryption mode to DEFAULT. Data: " + data.base64EncodedString())
+            
+            self.pumpManager.state.ignorePassword = false;
+            
+            let (pairingKey, _) = DanaRSEncryption.getPairingKeys()
+            if (pairingKey.count > 0) {
+                self.sendPassKeyCheck(pairingKey)
+            } else {
+                self.sendPairingRequest()
+            }
+        } else if (data.count == 9 && self.isOk(data)) {
+            // response OK v3, 2nd layer encryption
+            self.encryptionMode = .RSv3
+//            log.info("Setting encryption mode to RSv3. Data: " + data.base64EncodedString())
+            
+            self.pumpManager.state.ignorePassword = true;
+            
+            self.pumpManager.state.hwModel = data[5]
+            self.pumpManager.state.pumpProtocol = data[7]
+            
+            // Grab syncKey
+            self.pumpManager.state.randomSyncKey = data[data.count - 1]
+            
+            if (self.pumpManager.state.hwModel == 0x05) {
+                self.sendV3PairingInformationEmpty()
+            } else if (self.pumpManager.state.hwModel == 0x06) {
+                self.sendEasyMenuCheck()
+            } else {
+                log.error("Got invalid hwModel \(self.pumpManager.state.hwModel)")
+                self.bluetoothManager.disconnect(self.connectedDevice)
+                
+                connectionFailure(NSError(domain: "Invalid hwModel", code: 0, userInfo: nil))
+            }
+        } else if (data.count == 14 && self.isOk(data)) {
+            self.encryptionMode = .BLE_5
+//            log.info("Setting encryption mode to BLE5. Data: " + data.base64EncodedString())
+            
+            self.pumpManager.state.hwModel = data[5]
+            self.pumpManager.state.pumpProtocol = data[7]
+            
+            guard (self.pumpManager.state.hwModel == 0x09 || self.pumpManager.state.hwModel == 0x0a) else {
+                log.error("Got invalid hwModel \(self.pumpManager.state.hwModel)")
+                self.bluetoothManager.disconnect(self.connectedDevice)
+                
+                connectionFailure(NSError(domain: "Invalid hwModel", code: 0, userInfo: nil))
+                return
+            }
+            
+            var ble5Keys = data.subdata(in: 8..<14)
+            if ble5Keys.filter({ $0 == 0 }).count != 0 {
+                // Try to get keys from previous session
+                ble5Keys = self.pumpManager.state.ble5Keys
+            }
+            
+            guard ble5Keys.filter({ $0 == 0 }).count == 0 else {
+                log.error("Invalid BLE-5 keys. Please unbound device and try again.")
+                
+                self.pumpManager.disconnect(self.connectedDevice)
+                guard let completion = self.completion else {
+                    return
+                }
+                
+                completion(.invalidBle5Keys)
+                return
+            }
+            
+            DanaRSEncryption.setBle5Key(ble5Key: ble5Keys)
+            self.pumpManager.state.ble5Keys = ble5Keys
+            self.sendBLE5PairingInformation()
+        } else if (data.count == 6 && self.isPump(data)) {
+            log.error("PUMP_CHECK error. Data: \(data.base64EncodedString())")
+            connectionFailure(NSError(domain: "PUMP_CHECK error", code: 0, userInfo: nil))
+        } else if (data.count == 6 && isBusy(data)) {
+            log.error("PUMP_CHECK_BUSY error. Data: \(data.base64EncodedString())")
+            connectionFailure(NSError(domain: "PUMP_CHECK_BUSY error", code: 0, userInfo: nil))
+        } else {
+            log.error("PUMP_CHECK error, wrong serial number. Data: \(data.base64EncodedString())")
+            connectionFailure(NSError(domain: "PUMP_CHECK error, wrong serial number", code: 0, userInfo: nil))
+        }
+    }
+    
+    private func processEncryptionResponse(_ data: Data) {
+        if (self.encryptionMode == .BLE_5) {
+            Task {
+                await self.updateInitialState()
+            }
+            
+        } else if (self.encryptionMode == .RSv3) {
+            // data[2] : 0x00 OK  0x01 Error, No pairing
+            if (data[2] == 0x00) {
+                let (pairingKey, randomPairingKey) = DanaRSEncryption.getPairingKeys()
+                if (pairingKey.count == 0 || randomPairingKey.count == 0) {
+//                    log.info("Device is requesting pincode")
+                    self.promptPincode(nil)
+                    return
+                }
+                
+                Task {
+                    await self.updateInitialState()
+                }
+            } else {
+                self.sendV3PairingInformation(1)
+            }
+        } else {
+            let highByte = UInt16((data[data.count - 1] & 0xff) << 8)
+            let lowByte = UInt16(data[data.count - 2] & 0xff)
+            let password = (highByte + lowByte) ^ 0x0d87
+            if (password != self.pumpManager.state.devicePassword && !self.pumpManager.state.ignorePassword) {
+                log.error("Invalid password")
+                self.bluetoothManager.disconnect(self.connectedDevice)
+                
+                connectionFailure(NSError(domain: "Invalid password", code: 0, userInfo: nil))
+                return
+            }
+            
+            Task {
+                await self.updateInitialState()
+            }
+        }
+    }
+    
+    private func promptPincode(_ errorMessage: String?) {
+        guard let completion = self.completion else {
+            return
+        }
+        
+        completion(.requestedPincode(errorMessage))
+    }
+    
+    private func isOk(_ data: Data) -> Bool {
+        return data[2] == okCharCodes[0] && data[3] == okCharCodes[1]
+    }
+    
+    private func isPump(_ data: Data) -> Bool {
+        return data[2] == pumpCharCodes[0] && data[3] == pumpCharCodes[1] && data[4] == pumpCharCodes[2] && data[5] == pumpCharCodes[3]
+    }
+    
+    private func isBusy(_ data: Data) -> Bool {
+        return data[2] == busyCharCodes[0] && data[3] == busyCharCodes[1] && data[4] == busyCharCodes[2] && data[5] == busyCharCodes[3]
+    }
+    
+    public func updateInitialState() async {
+        do {
+            self.pumpManager.state.isConnected = true
+//            log.info("Sending keep connection")
+            
+            let keepConnection = generatePacketGeneralKeepConnection()
+            let resultKeepConnection = try await self.writeMessage(keepConnection)
+            guard resultKeepConnection.success else {
+                log.error("Failed to send keep connection...")
+                self.pumpManager.disconnect(self.connectedDevice)
+                
+                connectionFailure(NSError(domain: "Failed to send keep connection", code: 0, userInfo: nil))
+                return
+            }
+            
+            
+//            log.info("Getting initial state")
+            let initialScreenPacket = generatePacketGeneralGetInitialScreenInformation()
+            let resultInitialScreenInformation = try await self.writeMessage(initialScreenPacket)
+            
+            guard resultInitialScreenInformation.success else {
+                log.error("Failed to fetch Initial screen...")
+                self.pumpManager.disconnect(self.connectedDevice)
+                
+                connectionFailure(NSError(domain: "Failed to fetch Initial screen", code: 0, userInfo: nil))
+                return
+            }
+            
+            
+            guard let data = resultInitialScreenInformation.data as? PacketGeneralGetInitialScreenInformation else {
+                log.error("No data received (initial screen)...")
+                self.pumpManager.disconnect(self.connectedDevice)
+                
+                connectionFailure(NSError(domain: "No data received (initial screen)", code: 0, userInfo: nil))
+                return
+            }
+            
+            self.pumpManager.state.reservoirLevel = data.reservoirRemainingUnits
+            self.pumpManager.state.batteryRemaining = data.batteryRemaining
+            self.pumpManager.state.isPumpSuspended = data.isPumpSuspended
+            self.pumpManager.state.isTempBasalInProgress = data.isTempBasalInProgress
+            
+            if self.pumpManager.state.basalDeliveryOrdinal != .suspended && data.isPumpSuspended {
+                // Suspended has been enabled via the pump
+                // We cannot be sure at what point it has been enabled...
+                self.pumpManager.state.basalDeliveryDate = Date.now
+            }
+            
+            self.pumpManager.state.basalDeliveryOrdinal = data.isTempBasalInProgress ? .tempBasal :
+                                                            data.isPumpSuspended ? .suspended : .active
+            self.pumpManager.state.bolusState = .noBolus
+            self.pumpManager.notifyStateDidChange()
+            
+            log.info("Connection and encryption successful!")
+            
+            DispatchQueue.main.async {
+                self.completion?(.success)
+                self.completion = nil
+            }
+        } catch {
+            log.error("Caught error during sending the message. error: \(error.localizedDescription)")
+            self.pumpManager.disconnect(self.connectedDevice)
+            connectionFailure(error)
+        }
+    }
+}
+
+// MARK: Parsers for incomming messages
+extension PeripheralManager {
+    private func parseReceivedValue(_ receievedData: Data) {
+        var data = receievedData
+        if (self.pumpManager.state.isConnected && self.encryptionMode != .DEFAULT) {
+            data = DanaRSEncryption.decodeSecondLevel(data: data)
+        }
+        
+        self.readBuffer.append(data)
+        guard (self.readBuffer.count >= 6) else {
+            // Buffer is not ready to be processed
+            return
+        }
+        
+        if (
+            !(self.readBuffer[0] == self.PACKET_START_BYTE || self.readBuffer[0] == self.ENCRYPTED_START_BYTE) ||
+            !(self.readBuffer[1] == self.PACKET_START_BYTE || self.readBuffer[1] == self.ENCRYPTED_START_BYTE)
+        ) {
+            // The buffer does not start with the opening bytes. Check if the buffer is filled with old data
+            if let indexStartByte = self.readBuffer.firstIndex(of: self.PACKET_START_BYTE) {
+                self.readBuffer = self.readBuffer.subdata(in: indexStartByte..<self.readBuffer.count)
+            } else if let indexEncryptedStartByte = self.readBuffer.firstIndex(of: self.ENCRYPTED_START_BYTE) {
+                self.readBuffer = self.readBuffer.subdata(in: indexEncryptedStartByte..<self.readBuffer.count)
+            } else {
+                log.error("Received invalid packets. Starting bytes do not exists in message. Data: \(self.readBuffer.base64EncodedString())")
+                self.readBuffer = Data([])
+                return
+            }
+        }
+        
+        let length = Int(self.readBuffer[2])
+        guard (length + 7 == self.readBuffer.count) else {
+            // Not all packets have been received yet...
+            return
+        }
+        
+        guard (
+            (self.readBuffer[length + 5] == self.PACKET_END_BYTE || self.readBuffer[length + 5] == self.ENCRYPTED_END_BYTE) &&
+            (self.readBuffer[length + 6] == self.PACKET_END_BYTE || self.readBuffer[length + 6] == self.ENCRYPTED_END_BYTE)
+          ) else {
+            // Invalid packets received...
+            log.error("Received invalid packets. Ending bytes do not match. Data: \(self.readBuffer.base64EncodedString())")
+            self.readBuffer = Data([])
+            return
+          }
+        
+//        log.info("Received message! Starting to decrypt data: \(self.readBuffer.base64EncodedString())")
+        let decryptedData = DanaRSEncryption.decodePacket(buffer: self.readBuffer, deviceName: self.deviceName)
+        guard decryptedData.count > 0 else {
+            log.error("Decryption failed. Encrypted data: \(self.readBuffer.base64EncodedString())")
+            
+            self.readBuffer = Data([])
+            return
+        }
+        
+        self.readBuffer = Data([])
+        
+//        log.info("Decoding successful! Data: \(decryptedData.base64EncodedString())")
+        if (decryptedData[0] == DanaPacketType.TYPE_ENCRYPTION_RESPONSE) {
+            switch(decryptedData[1]) {
+            case DanaPacketType.OPCODE_ENCRYPTION__PUMP_CHECK:
+                self.processConnectResponse(decryptedData)
+                return
+            case DanaPacketType.OPCODE_ENCRYPTION__TIME_INFORMATION:
+                self.processEncryptionResponse(decryptedData)
+                return
+            case DanaPacketType.OPCODE_ENCRYPTION__CHECK_PASSKEY:
+                if (decryptedData[2] == 0x05) {
+                    self.sendTimeInfo()
+                } else {
+                    self.sendPairingRequest()
+                }
+                return
+            case DanaPacketType.OPCODE_ENCRYPTION__PASSKEY_REQUEST:
+                self.processPairingRequest(decryptedData)
+                return
+            case DanaPacketType.OPCODE_ENCRYPTION__PASSKEY_RETURN:
+                self.processPairingRequest2(decryptedData)
+                return
+            case DanaPacketType.OPCODE_ENCRYPTION__GET_PUMP_CHECK:
+                if (decryptedData[2] == 0x05) {
+                    self.sendTimeInfo()
+                } else {
+                    self.sendEasyMenuCheck()
+                }
+                return
+            case DanaPacketType.OPCODE_ENCRYPTION__GET_EASYMENU_CHECK:
+                self.processEasyMenuCheck(decryptedData)
+                return
+            default:
+                log.error("Received invalid encryption command type \(decryptedData[1])")
+                return
+            }
+        }
+        
+        guard(decryptedData[0] == DanaPacketType.TYPE_RESPONSE || decryptedData[0] == DanaPacketType.TYPE_NOTIFY) else {
+            log.error("Received invalid packet type \(decryptedData[0])")
+            return
+        }
+        
+        self.processMessage(decryptedData)
+    }
+    
+    private func processMessage(_ data: Data) {
+        let message = parseMessage(data: data, usingUtc: self.pumpManager.state.usingUtc)
+        guard let message = message else {
+            log.error("Received unparsable message. Data: \(data.base64EncodedString())")
+            return
+        }
+        
+        if (message.notifyType != nil) {
+            switch message.notifyType {
+            case CommandNotifyDeliveryComplete:
+                let data = message.data as! PacketNotifyDeliveryComplete
+                self.pumpManager.notifyBolusDone(deliveredUnits: data.deliveredInsulin)
+                return
+            case CommandNotifyDeliveryRateDisplay:
+                let data = message.data as! PacketNotifyDeliveryRateDisplay
+                self.pumpManager.notifyBolusDidUpdate(deliveredUnits: data.deliveredInsulin)
+                return
+            case CommandNotifyAlarm:
+                let data = message.data as! PacketNotifyAlarm
+                self.pumpManager.notifyBolusError()
+                self.pumpManager.notifyAlert(data.alert)
+                return
+            default:
+                self.pumpManager.notifyBolusError()
+                return
+            }
+        }
+        
+        // Message received and dequeueing timeout
+        guard let queueItem = self.writeQueue[message.opCode ?? 0] else {
+            log.error("No continuation token found to send this message back...")
+            return
+        }
+        
+        queueItem.0.invalidate()
+        
+        if let data = message.data as? HistoryItem {
+            if data.code == HistoryCode.RECORD_TYPE_DONE_UPLOAD {
+                queueItem.1.resume(returning: DanaParsePacket<[HistoryItem]>(success: true, rawData: Data([]), data: self.historyLog.map({ $0 })))
+                self.historyLog = []
+            } else {
+                self.historyLog.append(data)
+            }
+
+            return
+        }
+        
+        queueItem.1.resume(returning: message)
+        self.writeQueue[message.opCode ?? 0] = nil
+    }
+    
+    private func isHistoryPacket(opCode: UInt16) -> Bool {
+        return opCode > CommandHistoryBolus && opCode < CommandHistoryAll
+    }
+}
diff --git a/DanaKit/DanaKit/PumpManager/PumpManagerAlert.swift b/DanaKit/DanaKit/PumpManager/PumpManagerAlert.swift
new file mode 100644
index 0000000..4c355c9
--- /dev/null
+++ b/DanaKit/DanaKit/PumpManager/PumpManagerAlert.swift
@@ -0,0 +1,215 @@
+//
+//  PumpManagerAlert.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 10/02/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import Foundation
+import LoopKit
+
+public enum PumpManagerAlert: Hashable {
+    case batteryZeroPercent(_ raw: Data)
+    case pumpError(_ raw: Data)
+    case occlusion(_ raw: Data)
+    case lowBattery(_ raw: Data)
+    case shutdown(_ raw: Data)
+    case basalCompare(_ raw: Data)
+    case bloodSugarMeasure(_ raw: Data)
+    case remainingInsulinLevel(_ raw: Data)
+    case emptyReservoir(_ raw: Data)
+    case checkShaft(_ raw: Data)
+    case basalMax(_ raw: Data)
+    case dailyMax(_ raw: Data)
+    case bloodSugarCheckMiss(_ raw: Data)
+    case ble5InvalidKeys(_ deviceName: String)
+    case unknown(_ raw: Data?)
+    
+    var contentTitle: String {
+        switch self {
+        case .batteryZeroPercent:
+            return LocalizedString("Pump battery 0%", comment: "Alert title for batteryZeroPercent")
+        case .pumpError:
+            return LocalizedString("Pump error", comment: "Alert title for pumpError")
+        case .occlusion:
+            return LocalizedString("Occlusion", comment: "Alert title for occlusion")
+        case .lowBattery:
+            return LocalizedString("Low pump battery", comment: "Alert title for lowBattery")
+        case .shutdown:
+            return LocalizedString("Pump shutdown", comment: "Alert title for shutdown")
+        case .basalCompare:
+            return LocalizedString("Basal Compare", comment: "Alert title for basalCompare")
+        case .bloodSugarMeasure:
+            return LocalizedString("Blood glucose Measure", comment: "Alert title for bloodSugarMeasure")
+        case .remainingInsulinLevel:
+            return LocalizedString("Remaining insulin level", comment: "Alert title for remainingInsulinLevel")
+        case .emptyReservoir:
+            return LocalizedString("Empty reservoir", comment: "Alert title for emptyReservoir")
+        case .checkShaft:
+            return LocalizedString("Check chaft", comment: "Alert title for checkShaft")
+        case .basalMax:
+            return LocalizedString("Basal limit reached", comment: "Alert title for basalMax")
+        case .dailyMax:
+            return LocalizedString("Daily limit reached", comment: "Alert title for dailyMax")
+        case .bloodSugarCheckMiss:
+            return LocalizedString("Missed Blood glucose check", comment: "Alert title for bloodSugarCheckMiss")
+        case .ble5InvalidKeys:
+            return LocalizedString("ERROR: Failed to pair device", comment: "Dana-i invalid ble5 keys")
+        case .unknown:
+            return LocalizedString("Unknown error", comment: "Alert title for unknown")
+        }
+    }
+    
+    var contentBody: String {
+        switch self {
+        case .batteryZeroPercent:
+            return LocalizedString("Battery is empty. Replace it now!", comment: "Alert body for batteryZeroPercent")
+        case .pumpError:
+            return LocalizedString("Check the pump and try again", comment: "Alert body for pumpError")
+        case .occlusion:
+            return LocalizedString("Check the reservoir and infus and try again", comment: "Alert body for occlusion")
+        case .lowBattery:
+            return LocalizedString("Pump battery needs to be replaced soon", comment: "Alert body for lowBattery")
+        case .shutdown:
+            return LocalizedString("There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump", comment: "Alert body for shutdown")
+        case .basalCompare:
+            return ""
+        case .bloodSugarMeasure:
+            return ""
+        case .remainingInsulinLevel:
+            return ""
+        case .emptyReservoir:
+            return LocalizedString("Reservoir is empty. Replace it now!", comment: "Alert body for emptyReservoir")
+        case .checkShaft:
+            return LocalizedString("The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again", comment: "Alert body for checkShaft")
+        case .basalMax:
+            return LocalizedString("Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit", comment: "Alert body for basalMax")
+        case .dailyMax:
+            return LocalizedString("Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit", comment: "Alert body for dailyMax")
+        case .bloodSugarCheckMiss:
+            return LocalizedString("A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump", comment: "Alert body for bloodSugarCheckMiss")
+        case .ble5InvalidKeys(let deviceName):
+            return LocalizedString("Failed to pair to ", comment: "Dana-i failed to pair p1") + deviceName + LocalizedString(". Please go to your bluetooth settings, forget this device, and try again", comment: "Dana-i failed to pair p2")
+        case .unknown:
+            return LocalizedString("An unknown error has occurred during processing the alert from the pump. Please report this", comment: "Alert body for unknown")
+        }
+    }
+    
+    public var identifier: String {
+        switch self {
+        case .batteryZeroPercent:
+            return "batteryZeroPercent"
+        case .pumpError:
+            return "pumpError"
+        case .occlusion:
+            return "occlusion"
+        case .lowBattery:
+            return "lowBattery"
+        case .shutdown:
+            return "shutdown"
+        case .basalCompare:
+            return "basalCompare"
+        case .bloodSugarMeasure:
+            return "bloodSugarMeasure"
+        case .remainingInsulinLevel:
+            return "remainingInsulinLevel"
+        case .emptyReservoir:
+            return "emptyReservoir"
+        case .checkShaft:
+            return "checkShaft"
+        case .basalMax:
+            return "basalMax"
+        case .dailyMax:
+            return "dailyMax"
+        case .bloodSugarCheckMiss:
+            return "bloodSugarCheckMiss"
+        case .ble5InvalidKeys:
+            return "ble5InvalidKeys"
+        case .unknown:
+            return "unknown"
+        }
+    }
+    
+    var type: PumpAlarmType {
+        switch self {
+        case .batteryZeroPercent:
+            return .noPower
+        case .pumpError:
+            return .other("pumpError")
+        case .occlusion:
+            return .occlusion
+        case .lowBattery:
+            return .lowPower
+        case .shutdown:
+            return .other("shutdown")
+        case .basalCompare:
+            return .other("basalCompare")
+        case .bloodSugarMeasure:
+            return .other("bloodSugarMeasure")
+        case .remainingInsulinLevel:
+            return .other("remainingInsulinLevel")
+        case .emptyReservoir:
+            return .noInsulin
+        case .checkShaft:
+            return .other("checkShaft")
+        case .basalMax:
+            return .other("basalMax")
+        case .dailyMax:
+            return .other("dailyMax")
+        case .bloodSugarCheckMiss:
+            return .other("bloodSugarCheckMiss")
+        case .ble5InvalidKeys:
+            return .other("ble5InvalidKeys")
+        case .unknown:
+            return .other("unknown")
+        }
+    }
+    
+    var raw: Data {
+        switch self {
+        case .batteryZeroPercent(let raw):
+            return raw
+        case .pumpError(let raw):
+            return raw
+        case .occlusion(let raw):
+            return raw
+        case .lowBattery(let raw):
+            return raw
+        case .shutdown(let raw):
+            return raw
+        case .basalCompare(let raw):
+            return raw
+        case .bloodSugarMeasure(let raw):
+            return raw
+        case .remainingInsulinLevel(let raw):
+            return raw
+        case .emptyReservoir(let raw):
+            return raw
+        case .checkShaft(let raw):
+            return raw
+        case .basalMax(let raw):
+            return raw
+        case .dailyMax(let raw):
+            return raw
+        case .bloodSugarCheckMiss(let raw):
+            return raw
+        case .ble5InvalidKeys:
+            return Data()
+        case .unknown(let raw):
+            return raw ?? Data()
+        }
+    }
+    
+    var actionButtonLabel: String {
+        return LocalizedString("OK", comment: "Ok")
+    }
+    
+    var foregroundContent: Alert.Content {
+        return Alert.Content(title: contentTitle, body: contentBody, acknowledgeActionButtonLabel: actionButtonLabel)
+    }
+    
+    var backgroundContent: Alert.Content {
+        return Alert.Content(title: contentTitle, body: contentBody, acknowledgeActionButtonLabel: actionButtonLabel)
+    }
+}
diff --git a/DanaKit/DanaKitPlugin/DanaKitPlugin.h b/DanaKit/DanaKitPlugin/DanaKitPlugin.h
new file mode 100644
index 0000000..628ecfd
--- /dev/null
+++ b/DanaKit/DanaKitPlugin/DanaKitPlugin.h
@@ -0,0 +1,19 @@
+//
+//  DanaKitPlugin.h
+//  DanaKitPlugin
+//
+//  Created by Pete Schwamb on 1/13/22.
+//  Copyright © 2022 LoopKit Authors. All rights reserved.
+//
+
+#import <Foundation/Foundation.h>
+
+//! Project version number for DanaKitPlugin.
+FOUNDATION_EXPORT double DanaKitPluginVersionNumber;
+
+//! Project version string for DanaKitPlugin.
+FOUNDATION_EXPORT const unsigned char DanaKitPluginVersionString[];
+
+// In this header, you should import all the public headers of your framework using statements like #import <DanaKitPlugin/PublicHeader.h>
+
+
diff --git a/DanaKit/DanaKitPlugin/DanaKitPlugin.swift b/DanaKit/DanaKitPlugin/DanaKitPlugin.swift
new file mode 100644
index 0000000..a2fd916
--- /dev/null
+++ b/DanaKit/DanaKitPlugin/DanaKitPlugin.swift
@@ -0,0 +1,30 @@
+//
+//  DanaKitPlugin.swift
+//  DanaKit
+//
+//  Based on OmniKitPlugin/OmniKitPlugin.swift
+//  Created by Randall Knutson on 09/11/21.
+//  Copyright © 2021 LoopKit Authors. All rights reserved.
+//
+
+import Foundation
+import LoopKitUI
+import DanaKit
+import os.log
+
+class DanaKitPlugin: NSObject, PumpManagerUIPlugin {
+    private let log = OSLog(category: "DanaKitPlugin")
+
+    public var pumpManagerType: PumpManagerUI.Type? {
+        return DanaKitPumpManager.self
+    }
+
+    public var cgmManagerType: CGMManagerUI.Type? {
+        return nil
+    }
+
+    override init() {
+        super.init()
+        log.default("DanaKitPlugin Instantiated")
+    }
+}
diff --git a/DanaKit/DanaKitPlugin/Extensions/OSLog.swift b/DanaKit/DanaKitPlugin/Extensions/OSLog.swift
new file mode 100644
index 0000000..429d2de
--- /dev/null
+++ b/DanaKit/DanaKitPlugin/Extensions/OSLog.swift
@@ -0,0 +1,50 @@
+//
+//  OSLog.swift
+//  DanaKitPlugin
+//
+//  Copyright © 2017 LoopKit Authors. All rights reserved.
+//
+
+import os.log
+
+
+extension OSLog {
+    convenience init(category: String) {
+        self.init(subsystem: "com.randallknutson.DanaKit", category: category)
+    }
+
+    func debug(_ message: StaticString, _ args: CVarArg...) {
+        log(message, type: .debug, args)
+    }
+
+    func info(_ message: StaticString, _ args: CVarArg...) {
+        log(message, type: .info, args)
+    }
+
+    func `default`(_ message: StaticString, _ args: CVarArg...) {
+        log(message, type: .default, args)
+    }
+
+    func error(_ message: StaticString, _ args: CVarArg...) {
+        log(message, type: .error, args)
+    }
+
+    private func log(_ message: StaticString, type: OSLogType, _ args: [CVarArg]) {
+        switch args.count {
+        case 0:
+            os_log(message, log: self, type: type)
+        case 1:
+            os_log(message, log: self, type: type, args[0])
+        case 2:
+            os_log(message, log: self, type: type, args[0], args[1])
+        case 3:
+            os_log(message, log: self, type: type, args[0], args[1], args[2])
+        case 4:
+            os_log(message, log: self, type: type, args[0], args[1], args[2], args[3])
+        case 5:
+            os_log(message, log: self, type: type, args[0], args[1], args[2], args[3], args[4])
+        default:
+            os_log(message, log: self, type: type, args)
+        }
+    }
+}
diff --git a/DanaKit/DanaKitPlugin/Info.plist b/DanaKit/DanaKitPlugin/Info.plist
new file mode 100644
index 0000000..44f830b
--- /dev/null
+++ b/DanaKit/DanaKitPlugin/Info.plist
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>CFBundleDevelopmentRegion</key>
+	<string>$(DEVELOPMENT_LANGUAGE)</string>
+	<key>CFBundleExecutable</key>
+	<string>$(EXECUTABLE_NAME)</string>
+	<key>CFBundleIdentifier</key>
+	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
+	<key>CFBundleInfoDictionaryVersion</key>
+	<string>6.0</string>
+	<key>CFBundleName</key>
+	<string>$(PRODUCT_NAME)</string>
+	<key>CFBundlePackageType</key>
+	<string>$(PRODUCT_BUNDLE_PACKAGE_TYPE)</string>
+	<key>CFBundleShortVersionString</key>
+	<string>$(MARKETING_VERSION)</string>
+	<key>CFBundleVersion</key>
+	<string>$(CURRENT_PROJECT_VERSION)</string>
+	<key>NSHumanReadableCopyright</key>
+	<string>Copyright © 2022 LoopKit Authors. All rights reserved.</string>
+	<key>com.loopkit.Loop.PumpManagerDisplayName</key>
+	<string>Dana-i/RS</string>
+	<key>com.loopkit.Loop.PumpManagerIdentifier</key>
+	<string>Dana</string>
+	<key>NSPrincipalClass</key>
+	<string>DanaKitPlugin.DanaKitPlugin</string>
+</dict>
+</plist>
diff --git a/DanaKit/DanaKitTests/Constants.swift b/DanaKit/DanaKitTests/Constants.swift
new file mode 100644
index 0000000..05d7995
--- /dev/null
+++ b/DanaKit/DanaKitTests/Constants.swift
@@ -0,0 +1,12 @@
+//
+//  Constants.swift
+//  DanaKitTests
+//
+//  Created by Bastiaan Verhaar on 06/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+let DEVICE_NAME = "VJH00012FI"
+
+// 54, 54, 54, 56, 54, 54
+let Ble5Keys: (UInt8, UInt8, UInt8) = (44, 27, 44)
diff --git a/DanaKit/DanaKitTests/Encryption/CommonTests.swift b/DanaKit/DanaKitTests/Encryption/CommonTests.swift
new file mode 100644
index 0000000..7be6832
--- /dev/null
+++ b/DanaKit/DanaKitTests/Encryption/CommonTests.swift
@@ -0,0 +1,41 @@
+//
+//  CommonTests.swift
+//  DanaKitTests
+//
+//  Created by Bastiaan Verhaar on 06/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import XCTest
+@testable import DanaKit
+
+class CommonUtilsTests: XCTestCase {
+    func testEncodePacketSerialNumber() {
+        // Pump check command
+        var message: Data = Data([165, 165, 12, 1, 0])
+        message += DEVICE_NAME.utf8.map { UInt8($0) }
+        message += [188, 122, 90, 90]
+
+        let encodedMessage = encodePacketSerialNumber(buffer: &message, deviceName: DEVICE_NAME)
+
+        XCTAssertEqual(encodedMessage, Data([165, 165, 12, 233, 243, 217, 162, 187, 191, 216, 195, 190, 218, 181, 198, 84, 137, 90, 90]))
+    }
+
+    // TODO: Validate with older Dana pump
+    // func testEncodePacketPassKey() {}
+
+    // TODO: Validate with older Dana pump
+    // func testEncodePacketTime() {}
+
+    // TODO: Validate with older Dana pump
+    // func testEncodePacketPassKeySerialNumber() {}
+
+    // TODO: Validate with older Dana pump
+    // func testEncodePacketPassword() {}
+
+    // TODO: Validate with older Dana pump
+    // func testInitialRandomSyncKey() {}
+
+    // TODO: Validate with older Dana pump
+    // func testDecryptionRandomSyncKey() {}
+}
diff --git a/DanaKit/DanaKitTests/Encryption/CrcTests.swift b/DanaKit/DanaKitTests/Encryption/CrcTests.swift
new file mode 100644
index 0000000..41c0b3c
--- /dev/null
+++ b/DanaKit/DanaKitTests/Encryption/CrcTests.swift
@@ -0,0 +1,53 @@
+//
+//  CrcTests.swift
+//  DanaKitTests
+//
+//  Created by Bastiaan Verhaar on 06/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import XCTest
+@testable import DanaKit
+
+class CRCTests: XCTestCase {
+
+    func testGenerateCrcEnhancedEncryption0IsEncryptionCommandTrue() {
+        // pump_check command
+        let data: [UInt8] = [1, 0] + Array(DEVICE_NAME.utf8)
+        let crc = generateCrc(buffer: Data(data), enhancedEncryption: 0, isEncryptionCommand: true)
+        
+        XCTAssertEqual(crc, 0xbc7a)
+    }
+
+    func testGenerateCrcEnhancedEncryption1IsEncryptionCommandFalse() {
+        // BasalSetTemporary command (200%, 1 hour)
+        let data: [UInt8] = [161, 96, 200, 1]
+        let crc = generateCrc(buffer: Data(data), enhancedEncryption: 1, isEncryptionCommand: false)
+
+        XCTAssertEqual(crc, 0x33fd)
+    }
+
+    func testGenerateCrcEnhancedEncryption1IsEncryptionCommandTrue() {
+        // TIME_INFORMATION command -> sendTimeInfo
+        let data: [UInt8] = [1, 1]
+        let crc = generateCrc(buffer: Data(data), enhancedEncryption: 1, isEncryptionCommand: true)
+
+        XCTAssertEqual(crc, 0x0990)
+    }
+
+    func testGenerateCrcEnhancedEncryption2IsEncryptionCommandFalse() {
+        // BasalSetTemporary command (200%, 1 hour)
+        let data: [UInt8] = [161, 96, 200, 1]
+        let crc = generateCrc(buffer: Data(data), enhancedEncryption: 2, isEncryptionCommand: false)
+
+        XCTAssertEqual(crc, 0x7a1a)
+    }
+
+    func testGenerateCrcEnhancedEncryption2IsEncryptionCommandTrue() {
+        // TIME_INFORMATION command -> sendBLE5PairingInformation
+        let data: [UInt8] = [1, 1, 0, 0, 0, 0]
+        let crc = generateCrc(buffer: Data(data), enhancedEncryption: 2, isEncryptionCommand: true)
+
+        XCTAssertEqual(crc, 0x1fef)
+    }
+}
diff --git a/DanaKit/DanaKitTests/Encryption/DecryptionTests.swift b/DanaKit/DanaKitTests/Encryption/DecryptionTests.swift
new file mode 100644
index 0000000..c1e3fda
--- /dev/null
+++ b/DanaKit/DanaKitTests/Encryption/DecryptionTests.swift
@@ -0,0 +1,77 @@
+//
+//  DecryptionTests.swift
+//  DanaKitTests
+//
+//  Created by Bastiaan Verhaar on 06/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import XCTest
+@testable import DanaKit
+
+class DecryptionTests: XCTestCase {
+    
+    func testDecryptMessage() throws {
+        var params = DecryptParam(
+            data: Data([165, 165, 14, 234, 243, 192, 163, 190, 134, 184, 225, 185, 222, 197, 183, 222, 197, 31, 241, 90, 90]),
+            deviceName: DEVICE_NAME,
+            enhancedEncryption: 2,
+            isEncryptionMode: true,
+            pairingKeyLength: 0,
+            randomPairingKeyLength: 0,
+            ble5KeyLength: 0,
+            timeSecret: Data([]),
+            passwordSecret: Data([]),
+            passKeySecret: Data([]),
+            passKeySecretBackup: Data([])
+        )
+        
+        let decryptionResult = try decrypt(&params)
+        
+        XCTAssertTrue(decryptionResult.isEncryptionMode)
+        XCTAssertEqual(decryptionResult.passKeySecret, Data([]))
+        XCTAssertEqual(decryptionResult.passKeySecretBackup, Data([]))
+        XCTAssertEqual(decryptionResult.passwordSecret, Data([]))
+        XCTAssertEqual(decryptionResult.timeSecret, Data([]))
+        XCTAssertEqual(decryptionResult.data, Data([2, 0, 79, 75, 77, 9, 80, 18, 54, 54, 54, 56, 54, 54]))
+    }
+    
+    func testThrowIfLengthDoesNotMatch() {
+        var params = DecryptParam(
+            data: Data([165, 165, 17, 234, 243, 192, 163, 190, 134, 184, 225, 185, 222, 197, 183, 222, 197, 31, 241, 90, 90]),
+            deviceName: DEVICE_NAME,
+            enhancedEncryption: 2,
+            isEncryptionMode: true,
+            pairingKeyLength: 0,
+            randomPairingKeyLength: 0,
+            ble5KeyLength: 0,
+            timeSecret: Data([]),
+            passwordSecret: Data([]),
+            passKeySecret: Data([]),
+            passKeySecretBackup: Data([])
+        )
+        
+        XCTAssertThrowsError(try decrypt(&params)) { error in
+            XCTAssertEqual(error.localizedDescription, "The operation couldn’t be completed. (Package length does not match the length attr. error 0.)")
+        }
+    }
+    
+    func testThrowIfCrcFails() {
+        var params = DecryptParam(
+            data: Data([165, 165, 14, 234, 243, 192, 163, 190, 134, 184, 225, 185, 222, 197, 183, 222, 197, 31, 21, 90, 90]),
+            deviceName: DEVICE_NAME,
+            enhancedEncryption: 2,
+            isEncryptionMode: true,
+            pairingKeyLength: 0,
+            randomPairingKeyLength: 0,
+            ble5KeyLength: 0,
+            timeSecret: Data([]),
+            passwordSecret: Data([]),
+            passKeySecret: Data([]),
+            passKeySecretBackup: Data([])
+        )
+        XCTAssertThrowsError(try decrypt(&params)) { error in
+            XCTAssertEqual(error.localizedDescription, "The operation couldn’t be completed. (Crc checksum failed... error 0.)")
+        }
+    }
+}
diff --git a/DanaKit/DanaKitTests/Encryption/EncryptTests.swift b/DanaKit/DanaKitTests/Encryption/EncryptTests.swift
new file mode 100644
index 0000000..ef22ca9
--- /dev/null
+++ b/DanaKit/DanaKitTests/Encryption/EncryptTests.swift
@@ -0,0 +1,233 @@
+//
+//  EncryptTests.swift
+//  DanaKitTests
+//
+//  Created by Bastiaan Verhaar on 06/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import XCTest
+@testable import DanaKit
+
+class EncryptionTests: XCTestCase {
+
+    func testEncodePumpCheckCommand() {
+        let param: EncryptParams = EncryptParams(
+            operationCode: DanaPacketType.OPCODE_ENCRYPTION__PUMP_CHECK,
+            data: nil,
+            deviceName: DEVICE_NAME,
+            enhancedEncryption: 0,
+            timeSecret: Data(),
+            passwordSecret: Data(),
+            passKeySecret: Data()
+        )
+        let result = encrypt(param)
+        XCTAssertTrue(result.isEncryptionMode)
+        XCTAssertEqual(result.data, Data([165, 165, 12, 233, 243, 217, 162, 187, 191, 216, 195, 190, 218, 181, 198, 84, 137, 90, 90]))
+    }
+
+    func testEncodeTimeInformationCommand() {
+        let param: EncryptParams = EncryptParams(
+            operationCode: DanaPacketType.OPCODE_ENCRYPTION__TIME_INFORMATION,
+            data: Data([0, 0, 0, 0]),
+            deviceName: DEVICE_NAME,
+            enhancedEncryption: 0,
+            timeSecret: Data(),
+            passwordSecret: Data(),
+            passKeySecret: Data()
+        )
+        let result = encrypt(param)
+        XCTAssertTrue(result.isEncryptionMode)
+        XCTAssertEqual(result.data, Data([165, 165, 6, 233, 242, 143, 232, 243, 143, 247, 28, 90, 90]))
+    }
+
+    func testEncodeTimeInformationCommandEnhancedEncryption2() {
+        let param: EncryptParams = EncryptParams(
+            operationCode: DanaPacketType.OPCODE_ENCRYPTION__TIME_INFORMATION,
+            data: Data([0, 0, 0, 0]),
+            deviceName: DEVICE_NAME,
+            enhancedEncryption: 2,
+            timeSecret: Data(),
+            passwordSecret: Data(),
+            passKeySecret: Data()
+        )
+        let result = encrypt(param)
+        XCTAssertTrue(result.isEncryptionMode)
+        XCTAssertEqual(result.data, Data([165, 165, 6, 233, 242, 143, 229, 226, 137, 183, 82, 90, 90]))
+    }
+    
+    func testEncodeTimeInformationCommandEmpty() {
+        let param: EncryptParams = EncryptParams(
+            operationCode: DanaPacketType.OPCODE_ENCRYPTION__TIME_INFORMATION,
+            data: Data(),
+            deviceName: DEVICE_NAME,
+            enhancedEncryption: 0,
+            timeSecret: Data(),
+            passwordSecret: Data(),
+            passKeySecret: Data()
+        )
+        let result = encrypt(param)
+        XCTAssertTrue(result.isEncryptionMode)
+        XCTAssertEqual(result.data, Data([165, 165, 2, 233, 242, 134, 120, 90, 90]))
+    }
+
+    func testEncodeGetPumpCheckCommand() {
+        let param: EncryptParams = EncryptParams(
+            operationCode: DanaPacketType.OPCODE_ENCRYPTION__GET_PUMP_CHECK,
+            data: Data(),
+            deviceName: DEVICE_NAME,
+            enhancedEncryption: 0,
+            timeSecret: Data(),
+            passwordSecret: Data(),
+            passKeySecret: Data()
+        )
+        let result = encrypt(param)
+        XCTAssertTrue(result.isEncryptionMode)
+        XCTAssertEqual(result.data, Data([165, 165, 2, 233, 0, 81, 109, 90, 90]))
+    }
+
+    func testEncodeGetEasyMenuCheckCommand() {
+        let param: EncryptParams = EncryptParams(
+            operationCode: DanaPacketType.OPCODE_ENCRYPTION__GET_EASYMENU_CHECK,
+            data: Data(),
+            deviceName: DEVICE_NAME,
+            enhancedEncryption: 0,
+            timeSecret: Data(),
+            passwordSecret: Data(),
+            passKeySecret: Data()
+        )
+        let result = encrypt(param)
+        XCTAssertTrue(result.isEncryptionMode)
+        XCTAssertEqual(result.data, Data([165, 165, 2, 233, 7, 33, 82, 90, 90]))
+    }
+
+    func testEncodePasskeyRequestCommand() {
+        let param: EncryptParams = EncryptParams(
+            operationCode: DanaPacketType.OPCODE_ENCRYPTION__PASSKEY_REQUEST,
+            data: Data(),
+            deviceName: DEVICE_NAME,
+            enhancedEncryption: 0,
+            timeSecret: Data(),
+            passwordSecret: Data(),
+            passKeySecret: Data()
+        )
+        let result = encrypt(param)
+        XCTAssertTrue(result.isEncryptionMode)
+        XCTAssertEqual(result.data, Data([165, 165, 2, 233, 34, 80, 77, 90, 90]))
+    }
+
+    func testEncodeCheckPasskeyCommand() {
+        let param: EncryptParams = EncryptParams(
+            operationCode: DanaPacketType.OPCODE_ENCRYPTION__CHECK_PASSKEY,
+            data: Data([1, 2]),
+            deviceName: DEVICE_NAME,
+            enhancedEncryption: 0,
+            timeSecret: Data(),
+            passwordSecret: Data(),
+            passKeySecret: Data()
+        )
+        let result = encrypt(param)
+        XCTAssertTrue(result.isEncryptionMode)
+        XCTAssertEqual(result.data, Data([165, 165, 4, 233, 35, 228, 128, 28, 180, 90, 90]))
+    }
+
+    func testEncodeNormalCommandEnhancedEncryption2() {
+        let param: EncryptParams = EncryptParams(
+            operationCode: DanaPacketType.OPCODE_BASAL__SET_TEMPORARY_BASAL,
+            data: Data([200, 1]),
+            deviceName: DEVICE_NAME,
+            enhancedEncryption: 2,
+            timeSecret: Data(),
+            passwordSecret: Data(),
+            passKeySecret: Data()
+        )
+        let result = encrypt(param)
+        XCTAssertFalse(result.isEncryptionMode)
+        XCTAssertEqual(result.data, Data([165, 165, 4, 73, 147, 71, 233, 137, 149, 90, 90]))
+    }
+
+    func testEncodeNormalCommandEmptyDataEnhancedEncryption2() {
+        let param: EncryptParams = EncryptParams(
+            operationCode: DanaPacketType.OPCODE_REVIEW__INITIAL_SCREEN_INFORMATION,
+            data: Data(),
+            deviceName: DEVICE_NAME,
+            enhancedEncryption: 2,
+            timeSecret: Data(),
+            passwordSecret: Data(),
+            passKeySecret: Data()
+        )
+        let result = encrypt(param)
+        XCTAssertFalse(result.isEncryptionMode)
+        XCTAssertEqual(result.data, Data([165, 165, 2, 73, 241, 235, 35, 90, 90]))
+    }
+    
+    // TODO: Need example keys from older Dana pumps
+    // func testEncodeNormalCommandEmptyDataEnhancedEncryption0() {}
+
+    func testEncodeNormalCommandEmptyDataEnhancedEncryption1() {
+        // DANA_PACKET_TYPE.ETC__KEEP_CONNECTION
+        let data: Data = Data([165, 165, 2, 65, 9, 176, 75, 90, 90])
+        let enhancedEncryption: UInt8 = 1
+        let pairingKey = Data([237, 241, 117, 95, 135, 61])
+        let randomPairingKey = Data([181, 201, 65])
+        
+        let randomSyncKey = initialRandomSyncKey(pairingKey: pairingKey)
+        
+        var params = EncryptSecondLevelParams(buffer: data, enhancedEncryption: enhancedEncryption, pairingKey: pairingKey, randomPairingKey: randomPairingKey, randomSyncKey: randomSyncKey, bleRandomKeys: Ble5Keys)
+        let result = encryptSecondLevel(&params)
+
+        XCTAssertEqual(result.randomSyncKey, 207)
+        XCTAssertEqual(result.buffer, Data([19, 203, 1, 47, 8, 203, 194, 168, 207]))
+    }
+    
+    func testEncodeNormalCommandEmptyDataEnhancedEncryption1MultipleMessages() {
+        // DANA_PACKET_TYPE.ETC__KEEP_CONNECTION
+        let dataKeepConnection: Data = Data([165, 165, 2, 65, 9, 176, 75, 90, 90])
+        let enhancedEncryption: UInt8 = 1
+        let pairingKey = Data([237, 241, 117, 95, 135, 61])
+        let randomPairingKey = Data([181, 201, 65])
+        
+        var randomSyncKey = initialRandomSyncKey(pairingKey: pairingKey)
+        
+        var paramsKeepConnection = EncryptSecondLevelParams(buffer: dataKeepConnection, enhancedEncryption: enhancedEncryption, pairingKey: pairingKey, randomPairingKey: randomPairingKey, randomSyncKey: randomSyncKey, bleRandomKeys: Ble5Keys)
+        let resultKeepConnection = encryptSecondLevel(&paramsKeepConnection)
+
+        XCTAssertEqual(resultKeepConnection.randomSyncKey, 207)
+        XCTAssertEqual(resultKeepConnection.buffer, Data([19, 203, 1, 47, 8, 203, 194, 168, 207]))
+        
+        randomSyncKey = resultKeepConnection.randomSyncKey
+        
+        // Decrypt ETC__KEEP_CONNECTION
+        let decryptKeepConnection = Data([83, 143, 118, 179, 100, 46, 5, 39, 50, 225])
+        
+        var paramsDecryptKeepConnection = DecryptSecondLevelParams(buffer: decryptKeepConnection, enhancedEncryption: enhancedEncryption, pairingKey: pairingKey, randomPairingKey: randomPairingKey, randomSyncKey: randomSyncKey, bleRandomKeys: Ble5Keys)
+        let resultDecryptKeepConnection = decryptSecondLevel(&paramsDecryptKeepConnection)
+        
+        XCTAssertEqual(resultDecryptKeepConnection.randomSyncKey, 225)
+        XCTAssertEqual(resultDecryptKeepConnection.buffer, Data([165, 165, 3, 82, 9, 136, 174, 2, 90, 90]))
+        
+        randomSyncKey = resultDecryptKeepConnection.randomSyncKey
+        
+        // DANA_PACKET_TYPE.REVIEW__GET_SHIPPING_INFORMATION
+        let dataGetShippingInformation: Data = Data([165, 165, 2, 65, 214, 138, 205, 90, 90])
+        
+        var paramsGetShippingInformation = EncryptSecondLevelParams(buffer: dataGetShippingInformation, enhancedEncryption: enhancedEncryption, pairingKey: pairingKey, randomPairingKey: randomPairingKey, randomSyncKey: randomSyncKey, bleRandomKeys: Ble5Keys)
+        let resultGetShippingInformation = encryptSecondLevel(&paramsGetShippingInformation)
+        
+        XCTAssertEqual(resultGetShippingInformation.randomSyncKey, 177)
+        XCTAssertEqual(resultGetShippingInformation.buffer, Data([70, 81, 52, 121, 145, 240, 177, 76, 177]))
+    }
+
+    func testEncodeSecondLevel() {
+        // DANA_PACKET_TYPE.OPCODE_REVIEW__INITIAL_SCREEN_INFORMATION
+        let data: Data = Data([165, 165, 2, 73, 241, 235, 35, 90, 90])
+        let enhancedEncryption: UInt8 = 2
+        let emptyKey: Data = Data([])
+
+        var params = EncryptSecondLevelParams(buffer: data, enhancedEncryption: enhancedEncryption, pairingKey: emptyKey, randomPairingKey: emptyKey, randomSyncKey: 0, bleRandomKeys: Ble5Keys)
+        let result = encryptSecondLevel(&params)
+
+        XCTAssertEqual(result.randomSyncKey, 0)
+        XCTAssertEqual(result.buffer, Data([126, 126, 235, 16, 154, 122, 245, 170, 170]))
+    }
+}
diff --git a/DanaKit/DanaKitTests/GeneratePacketTests.swift b/DanaKit/DanaKitTests/GeneratePacketTests.swift
new file mode 100644
index 0000000..f022681
--- /dev/null
+++ b/DanaKit/DanaKitTests/GeneratePacketTests.swift
@@ -0,0 +1,658 @@
+//
+//  GeneratePacketTests.swift
+//  DanaKitTests
+//
+//  Created by Bastiaan Verhaar on 13/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import XCTest
+@testable import DanaKit
+
+class GeneratePacketTests: XCTestCase {
+    
+    func testGenerateBasalCancelTemporary() {
+        let packet = generatePacketBasalCancelTemporary()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 98, data: nil)
+        
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+    
+    func testGenerateBasalGetProfileNumber() {
+        let packet = generatePacketBasalGetProfileNumber()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 101, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+    
+    func testGenerateBasalGetRate() {
+        let packet = generatePacketBasalGetRate()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 103, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateBasalSetProfileNumber() {
+        let options = PacketBasalSetProfileNumber(profileNumber: 0)
+        let packet = generatePacketBasalSetProfileNumber(options: options)
+        let expectedSnapshot = DanaGeneratePacket(opCode: 100, data: Data([0]))
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateBasalSetProfileRate() {
+        let profileBasalRate: [Double] = Array(repeating: 0.5, count: 24)
+        let options = PacketBasalSetProfileRate(profileNumber: 0, profileBasalRate: profileBasalRate)
+        
+        do {
+            let packet = try generatePacketBasalSetProfileRate(options: options)
+            let expectedData = Data([0] + Array(repeating: [50, 0], count: 24).flatMap{$0})
+            let expectedSnapshot = DanaGeneratePacket(opCode: 102, data: expectedData)
+            
+            XCTAssertEqual(packet.type, expectedSnapshot.type)
+            XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+            XCTAssertEqual(packet.data, expectedSnapshot.data)
+        } catch {
+            XCTFail()
+        }
+    }
+
+    func testGenerateBasalSetProfileRate_InvalidRateLength() {
+        let profileBasalRate: [Double] = Array(repeating: 0.5, count: 23)
+        let options = PacketBasalSetProfileRate(profileNumber: 0, profileBasalRate: profileBasalRate)
+        
+        XCTAssertThrowsError(try generatePacketBasalSetProfileRate(options: options))
+    }
+
+    func testGenerateBasalSetSuspendOff() {
+        let packet = generatePacketBasalSetSuspendOff()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 106, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateBasalSetSuspendOn() {
+        let packet = generatePacketBasalSetSuspendOn()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 105, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateBasalSetTemporary() {
+        let options = PacketBasalSetTemporary(temporaryBasalRatio: 200, temporaryBasalDuration: 1)
+        let packet = generatePacketBasalSetTemporary(options: options)
+        let expectedData = Data([200, 1])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 96, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+    
+    func testGenerateBolusCancelExtended() {
+        let packet = generatePacketBolusCancelExtended()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 73, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateBolusGet24Circf() {
+        let packet = generatePacketBolusGet24CIRCFArray()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 82, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateBolusGetCalculationInformation() {
+        let packet = generatePacketBolusGetCalculationInformation()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 75, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateBolusGetCircf() {
+        let packet = generatePacketBolusGetCIRCFArray()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 78, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateBolusGetOption() {
+        let packet = generatePacketBolusGetOption()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 80, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateBolusGetStepOptionInformation() {
+        let packet = generatePacketBolusGetStepInformation()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 64, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateBolusSet24Circf_mmolPerL() {
+        let options = PacketBolusSet24CIRCFArray(unit: 1, ic: Array(repeating: 0.5, count: 24), isf: Array(repeating: 1, count: 24))
+        do {
+            let packet = try generatePacketBolusSet24CIRCFArray(options: options)
+            let expectedData = Data(Array(repeating: [1, 0], count: 24).flatMap{$0} + Array(repeating: [100, 0], count: 24).flatMap{$0})
+            let expectedSnapshot = DanaGeneratePacket(opCode: 83, data: expectedData)
+
+            XCTAssertEqual(packet.type, expectedSnapshot.type)
+            XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+            XCTAssertEqual(packet.data, expectedSnapshot.data)
+        } catch {
+            XCTFail()
+        }
+    }
+
+    func testGenerateBolusSet24Circf() {
+        let options = PacketBolusSet24CIRCFArray(unit: 0, ic: Array(repeating: 0.5, count: 24), isf: Array(repeating: 1, count: 24))
+        do {
+            let packet = try generatePacketBolusSet24CIRCFArray(options: options)
+            let expectedData = Data(Array(repeating: [1, 0], count: 48).flatMap{$0})
+            let expectedSnapshot = DanaGeneratePacket(opCode: 83, data: expectedData)
+
+            XCTAssertEqual(packet.type, expectedSnapshot.type)
+            XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+            XCTAssertEqual(packet.data, expectedSnapshot.data)
+        } catch {
+            XCTFail()
+        }
+    }
+
+    func testGenerateBolusSet24Circf_InvalidInput() {
+        let optionsInvalidIc = PacketBolusSet24CIRCFArray(unit: 0, ic: Array(repeating: 0.5, count: 23), isf: Array(repeating: 1, count: 24))
+        let optionsInvalidIsf = PacketBolusSet24CIRCFArray(unit: 0, ic: Array(repeating: 0.5, count: 24), isf: Array(repeating: 1, count: 23))
+       
+        XCTAssertThrowsError(try generatePacketBolusSet24CIRCFArray(options: optionsInvalidIc))
+        XCTAssertThrowsError(try generatePacketBolusSet24CIRCFArray(options: optionsInvalidIsf))
+    }
+
+    func testGenerateBolusSetExtended() {
+        let options = PacketBolusSetExtended(extendedAmount: 5, extendedDurationInHalfHours: 4)
+        let packet = generatePacketBolusSetExtended(options: options)
+        let expectedData = Data([5, 0, 4])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 71, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateBolusSetOption() {
+        let options = PacketBolusSetOption(
+            extendedBolusOptionOnOff: 0,
+            bolusCalculationOption: 1,
+            missedBolusConfig: 1,
+            missedBolus01StartHour: 0,
+            missedBolus01StartMin: 0,
+            missedBolus01EndHour: 0,
+            missedBolus01EndMin: 0,
+            missedBolus02StartHour: 0,
+            missedBolus02StartMin: 0,
+            missedBolus02EndHour: 0,
+            missedBolus02EndMin: 0,
+            missedBolus03StartHour: 0,
+            missedBolus03StartMin: 0,
+            missedBolus03EndHour: 0,
+            missedBolus03EndMin: 0,
+            missedBolus04StartHour: 0,
+            missedBolus04StartMin: 0,
+            missedBolus04EndHour: 0,
+            missedBolus04EndMin: 0
+        )
+        let packet = generatePacketBolusSetOption(options: options)
+        let expectedData = Data([0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 81, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateBolusStart_Speed12() {
+        let options = PacketBolusStart(amount: 5, speed: .speed12)
+        let packet = generatePacketBolusStart(options: options)
+        let expectedData = Data([244, 1, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 74, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+    func testGenerateBolusStart_Speed30() {
+        let options = PacketBolusStart(amount: 5, speed: .speed30)
+        let packet = generatePacketBolusStart(options: options)
+        let expectedData = Data([244, 1, 1])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 74, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateBolusStart_Speed60() {
+        let options = PacketBolusStart(amount: 5, speed: .speed60)
+        let packet = generatePacketBolusStart(options: options)
+        let expectedData = Data([244, 1, 2])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 74, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+    
+    func testGenerateBolusStop() {
+        let packet = generatePacketBolusStop()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 68, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateGeneralAvgBolus() {
+        let packet = generatePacketGeneralAvgBolus()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 16, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateGeneralClearUserTimeChangeFlag() {
+        let packet = generatePacketGeneralClearUserTimeChangeFlag()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 35, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateGeneralGetDecRatio() {
+        let packet = generatePacketGeneralGetPumpDecRatio()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 128, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateGeneralGetInitialScreenInformation() {
+        let packet = generatePacketGeneralGetInitialScreenInformation()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 2, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateGeneralGetPumpCheck() {
+        let packet = generatePacketGeneralGetPumpCheck()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 33, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateGeneralGetPumpTime() {
+        let packet = generatePacketGeneralGetPumpTime()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 112, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateGeneralGetPumpTimeWithUtc() {
+        let packet = generatePacketGeneralGetPumpTimeUtcWithTimezone()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 120, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateGeneralGetShippingInformation() {
+        let packet = generatePacketGeneralGetShippingInformation()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 32, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateGeneralGetShippingVersion() {
+        let packet = generatePacketGeneralGetShippingVersion()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 129, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateGeneralGetUserOption() {
+        let packet = generatePacketGeneralGetUserOption()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 114, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateGeneralGetUserTimeChangeFlag() {
+        let packet = generatePacketGeneralGetUserTimeChangeFlag()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 34, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateGeneralKeepConnection() {
+        let packet = generatePacketGeneralKeepConnection()
+        let expectedSnapshot = DanaGeneratePacket(opCode: 255, data: nil)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateGeneralSaveHistory() {
+        let options = PacketGeneralSaveHistory(historyType: 1, historyDate: Date(timeIntervalSince1970: 1701774000), historyCode: 1, historyValue: 1)
+        let packet = generatePacketGeneralSaveHistory(options: options)
+        let expectedData = Data([1, 23, 12, 5, 11, 0, 0, 1, 1, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 224, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateGeneralSetHistoryUploadMode_TurnOff() {
+        let options = PacketGeneralSetHistoryUploadMode(mode: 0)
+        let packet = generatePacketGeneralSetHistoryUploadMode(options: options)
+        let expectedData = Data([0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 37, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateGeneralSetHistoryUploadMode_TurnOn() {
+        let options = PacketGeneralSetHistoryUploadMode(mode: 1)
+        let packet = generatePacketGeneralSetHistoryUploadMode(options: options)
+        let expectedData = Data([1])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 37, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateGeneralSetPumpTime() {
+        // 2023-12-05T11:00:00.000 UTC
+        let options = PacketGeneralSetPumpTime(time: Date(timeIntervalSince1970: 1701774000))
+        let packet = generatePacketGeneralSetPumpTime(options: options)
+        let expectedData = Data([23, 12, 5, 11, 0, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 113, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateGeneralSetPumpTimeWithTimezone() {
+        let options = PacketGeneralSetPumpTimeUtcWithTimezone(time: Date(timeIntervalSince1970: 1701774000), zoneOffset: 1)
+        let packet = generatePacketGeneralSetPumpTimeUtcWithTimezone(options: options)
+        let expectedData = Data([23, 12, 5, 11, 0, 0, 1])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 121, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+    
+    func testGenerateGeneralSetUserOption() {
+        let options = PacketGeneralSetUserOption(
+            isTimeDisplay24H: true,
+            isButtonScrollOnOff: true,
+            beepAndAlarm: 0,
+            lcdOnTimeInSec: 10,
+            backlightOnTimeInSec: 10,
+            selectedLanguage: 1,
+            units: 1,
+            shutdownHour: 0,
+            lowReservoirRate: 20,
+            cannulaVolume: 250,
+            refillAmount: 7,
+            targetBg: 55
+        )
+        let packet = generatePacketGeneralSetUserOption(options: options)
+        let expectedData = Data([0, 1, 0, 10, 10, 1, 1, 0, 20, 250, 0, 7, 0, 55, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 115, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateHistoryAlarmFromDate() {
+        let options = PacketHistoryBase(from: Date(timeIntervalSince1970: 1701774000))
+        let packet = generatePacketHistoryAlarm(options: options)
+        let expectedData = Data([23, 12, 5, 11, 0, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 25, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateHistoryAlarm() {
+        let options = PacketHistoryBase(from: nil)
+        let packet = generatePacketHistoryAlarm(options: options)
+        let expectedData = Data([0, 1, 1, 0, 0, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 25, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateHistoryAll() {
+        let options = PacketHistoryBase(from: nil)
+        let packet = generatePacketHistoryAll(options: options)
+        let expectedData = Data([0, 1, 1, 0, 0, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 31, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateHistoryBasal() {
+        let options = PacketHistoryBase(from: nil)
+        let packet = generatePacketHistoryBasal(options: options)
+        let expectedData = Data([0, 1, 1, 0, 0, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 26, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateHistoryBloodGlucose() {
+        let options = PacketHistoryBase(from: nil)
+        let packet = generatePacketHistoryBloodGlucose(options: options)
+        let expectedData = Data([0, 1, 1, 0, 0, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 21, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateHistoryBolus() {
+        let options = PacketHistoryBase(from: nil)
+        let packet = generatePacketHistoryBolus(options: options)
+        let expectedData = Data([0, 1, 1, 0, 0, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 17, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateHistoryCarbohydrates() {
+        let options = PacketHistoryBase(from: nil)
+        let packet = generatePacketHistoryCarbohydrates(options: options)
+        let expectedData = Data([0, 1, 1, 0, 0, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 22, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateHistoryDaily() {
+        let options = PacketHistoryBase(from: nil)
+        let packet = generatePacketHistoryDaily(options: options)
+        let expectedData = Data([0, 1, 1, 0, 0, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 18, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateHistoryPrime() {
+        let options = PacketHistoryBase(from: nil)
+        let packet = generatePacketHistoryPrime(options: options)
+        let expectedData = Data([0, 1, 1, 0, 0, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 19, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateHistoryRefill() {
+        let options = PacketHistoryBase(from: nil)
+        let packet = generatePacketHistoryRefill(options: options)
+        let expectedData = Data([0, 1, 1, 0, 0, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 20, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateHistorySuspend() {
+        let options = PacketHistoryBase(from: nil)
+        let packet = generatePacketHistorySuspend(options: options)
+        let expectedData = Data([0, 1, 1, 0, 0, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 24, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateHistoryTemporary() {
+        let options = PacketHistoryBase(from: nil)
+        let packet = generatePacketHistoryTemporary(options: options)
+        let expectedData = Data([0, 1, 1, 0, 0, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 23, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateLoopHistoryEventsFromDateInUTC() {
+        let options = PacketLoopHistoryEvents(from: Date(timeIntervalSince1970: 1701774000))
+        let packet = generatePacketLoopHistoryEvents(options: options)
+        let expectedData = Data([23, 12, 5, 11, 0, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 194, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateLoopHistoryEvents() {
+        let options = PacketLoopHistoryEvents(from: nil)
+        let packet = generatePacketLoopHistoryEvents(options: options)
+        let expectedData = Data([0, 1, 1, 0, 0, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 194, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateLoopSetHistoryEvent() {
+        let options = PacketLoopSetEventHistory(
+            packetType: LoopHistoryEvents.carbs,
+            time: Date(timeIntervalSince1970: 1701774000),
+            param1: 0,
+            param2: 0
+        )
+        let packet = generatePacketLoopSetEventHistory(options: options)
+        let expectedData = Data([14, 23, 12, 5, 11, 0, 0, 0, 0, 0, 0])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 195, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+
+    func testGenerateLoopSetTemporaryBasal() {
+        let options = PacketLoopSetTemporaryBasal(percent: 200, duration: .min30)
+        let packet = generatePacketLoopSetTemporaryBasal(options: options)
+        let expectedData = Data([200, 0, 160])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 193, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+    
+    func testGenerateLoopSetTemporaryBasalPercentGreaterThan500() {
+        let options = PacketLoopSetTemporaryBasal(percent: 750, duration: .min15)
+        let packet = generatePacketLoopSetTemporaryBasal(options: options)
+        let expectedData = Data([244, 1, 150])
+        let expectedSnapshot = DanaGeneratePacket(opCode: 193, data: expectedData)
+
+        XCTAssertEqual(packet.type, expectedSnapshot.type)
+        XCTAssertEqual(packet.opCode, expectedSnapshot.opCode)
+        XCTAssertEqual(packet.data, expectedSnapshot.data)
+    }
+}
diff --git a/DanaKit/DanaKitTests/Info.plist b/DanaKit/DanaKitTests/Info.plist
new file mode 100644
index 0000000..64d65ca
--- /dev/null
+++ b/DanaKit/DanaKitTests/Info.plist
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>CFBundleDevelopmentRegion</key>
+	<string>$(DEVELOPMENT_LANGUAGE)</string>
+	<key>CFBundleExecutable</key>
+	<string>$(EXECUTABLE_NAME)</string>
+	<key>CFBundleIdentifier</key>
+	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
+	<key>CFBundleInfoDictionaryVersion</key>
+	<string>6.0</string>
+	<key>CFBundleName</key>
+	<string>$(PRODUCT_NAME)</string>
+	<key>CFBundlePackageType</key>
+	<string>$(PRODUCT_BUNDLE_PACKAGE_TYPE)</string>
+	<key>CFBundleShortVersionString</key>
+	<string>1.0</string>
+	<key>CFBundleVersion</key>
+	<string>1</string>
+</dict>
+</plist>
diff --git a/DanaKit/DanaKitUI/DanaKitHUDProvider.swift b/DanaKit/DanaKitUI/DanaKitHUDProvider.swift
new file mode 100644
index 0000000..cc96ca2
--- /dev/null
+++ b/DanaKit/DanaKitUI/DanaKitHUDProvider.swift
@@ -0,0 +1,111 @@
+//
+//  DanaKitHUDProvider.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 18/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import UIKit
+import SwiftUI
+import LoopKit
+import LoopKitUI
+
+internal class DanaKitHUDProvider: NSObject, HUDProvider {
+    var managerIdentifier: String {
+        return pumpManager.managerIdentifier
+    }
+    
+    private let pumpManager: DanaKitPumpManager
+
+    private var reservoirView: DanaKitReservoirView?
+    
+    private let bluetoothProvider: BluetoothProvider
+
+    private let colorPalette: LoopUIColorPalette
+    
+    private var refreshTimer: Timer?
+    
+    private let allowedInsulinTypes: [InsulinType]
+    
+    var visible: Bool = true {
+        didSet {
+            if oldValue != visible && visible {
+                hudDidAppear()
+            }
+        }
+    }
+    
+    public init(pumpManager: DanaKitPumpManager, bluetoothProvider: BluetoothProvider, colorPalette: LoopUIColorPalette, allowedInsulinTypes: [InsulinType]) {
+        self.pumpManager = pumpManager
+        self.bluetoothProvider = bluetoothProvider
+        self.colorPalette = colorPalette
+        self.allowedInsulinTypes = allowedInsulinTypes
+        super.init()
+        self.pumpManager.addStateObserver(self, queue: .main)
+    }
+    
+    public func createHUDView() -> BaseHUDView? {
+        reservoirView = DanaKitReservoirView.instantiate()
+        updateReservoirView()
+
+        return reservoirView
+    }
+    
+    public var hudViewRawState: HUDProvider.HUDViewRawState {
+        var rawValue: HUDProvider.HUDViewRawState = [:]
+        
+        rawValue["lastStatusDate"] = self.pumpManager.rawState["lastStatusDate"]
+        rawValue["reservoirLevel"] = self.pumpManager.rawState["reservoirLevel"]
+
+        return rawValue
+    }
+    
+    public func didTapOnHUDView(_ view: BaseHUDView, allowDebugFeatures: Bool) -> HUDTapAction? {
+        return nil
+    }
+    
+    private func hudDidAppear() {
+        updateReservoirView()
+        self.pumpManager.ensureCurrentPumpData { _ in
+            DispatchQueue.main.async {
+                self.updateReservoirView()
+            }
+        }
+    }
+    
+    public static func createHUDView(rawValue: HUDProvider.HUDViewRawState) -> BaseHUDView? {
+        let reservoirView: DanaKitReservoirView?
+
+        if let lastStatusDate = rawValue["lastStatusDate"] as? Date {
+            reservoirView = DanaKitReservoirView.instantiate()
+            reservoirView!.update(level: rawValue["reservoirLevel"] as? Double, at: lastStatusDate)
+        } else {
+            reservoirView = nil
+        }
+
+        return reservoirView
+    }
+    
+    private func updateReservoirView() {
+        guard let reservoirView = reservoirView,
+              let lastStatusDate = self.pumpManager.rawState["lastStatusDate"] as? Date else
+        {
+            return
+        }
+            
+        reservoirView.update(level: (pumpManager.rawState["reservoirLevel"] as! Double), at: lastStatusDate)
+    }
+}
+
+extension DanaKitHUDProvider: StateObserver {
+    func deviceScanDidUpdate(_ device: DanaPumpScan) {
+        // Ble scan not needed here
+    }
+    
+    func stateDidUpdate(_ state: DanaKitPumpManagerState, _ oldState: DanaKitPumpManagerState) {
+        updateReservoirView()
+        
+        visible = state.deviceName != nil
+    }
+}
diff --git a/DanaKit/DanaKitUI/DanaKitPumpManager+UI.swift b/DanaKit/DanaKitUI/DanaKitPumpManager+UI.swift
new file mode 100644
index 0000000..d39dcf9
--- /dev/null
+++ b/DanaKit/DanaKitUI/DanaKitPumpManager+UI.swift
@@ -0,0 +1,98 @@
+//
+//  DanaPumpManager+UI.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 18/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import LoopKit
+import LoopKitUI
+import SwiftUI
+
+extension DanaKitPumpManager : PumpManagerUI {
+    public static func setupViewController(initialSettings settings: LoopKitUI.PumpManagerSetupSettings, bluetoothProvider: LoopKit.BluetoothProvider, colorPalette: LoopKitUI.LoopUIColorPalette, allowDebugFeatures: Bool, prefersToSkipUserInteraction: Bool, allowedInsulinTypes: [LoopKit.InsulinType]) -> LoopKitUI.SetupUIResult<LoopKitUI.PumpManagerViewController, LoopKitUI.PumpManagerUI> {
+        let vc = DanaUICoordinator(colorPalette: colorPalette, pumpManagerSettings: settings, allowDebugFeatures: allowDebugFeatures, allowedInsulinTypes: allowedInsulinTypes)
+        return .userInteractionRequired(vc)
+    }
+    
+    public func settingsViewController(bluetoothProvider: BluetoothProvider, colorPalette: LoopUIColorPalette, allowDebugFeatures: Bool, allowedInsulinTypes: [InsulinType]) -> PumpManagerViewController {
+        return DanaUICoordinator(pumpManager: self, colorPalette: colorPalette, allowDebugFeatures: allowDebugFeatures, allowedInsulinTypes: allowedInsulinTypes)
+    }
+    
+    public func deliveryUncertaintyRecoveryViewController(colorPalette: LoopUIColorPalette, allowDebugFeatures: Bool) -> (UIViewController & CompletionNotifying) {
+        return DanaUICoordinator(pumpManager: self, colorPalette: colorPalette, allowDebugFeatures: allowDebugFeatures)
+    }
+    
+    public func hudProvider(bluetoothProvider: BluetoothProvider, colorPalette: LoopUIColorPalette, allowedInsulinTypes: [InsulinType]) -> HUDProvider? {
+        return DanaKitHUDProvider(pumpManager: self, bluetoothProvider: bluetoothProvider, colorPalette: colorPalette, allowedInsulinTypes: allowedInsulinTypes)
+    }
+    
+    public static func createHUDView(rawValue: [String : Any]) -> BaseHUDView? {
+        return DanaKitHUDProvider.createHUDView(rawValue: rawValue)
+    }
+    
+    public static var onboardingImage: UIImage? {
+        return UIImage(named: "danai", in: Bundle(for: DanaKitHUDProvider.self), compatibleWith: nil)
+    }
+    
+    public var smallImage: UIImage? {
+        return UIImage(named: state.getDanaPumpImageName(), in: Bundle(for: DanaKitHUDProvider.self), compatibleWith: nil)
+    }
+    
+    public var pumpStatusHighlight: DeviceStatusHighlight? {
+        return buildPumpStatusHighlight()
+    }
+    
+    // Not needed
+    public var pumpLifecycleProgress: DeviceLifecycleProgress? {
+        return nil
+    }
+    
+    public var pumpStatusBadge: DeviceStatusBadge? {
+        return self.state.shouldShowTimeWarning() ? DanaStatusBadge.timeSyncNeeded : nil
+    }
+    
+    
+}
+
+extension DanaKitPumpManager {
+    private enum DanaStatusBadge: DeviceStatusBadge {
+        case timeSyncNeeded
+        
+        public var image: UIImage? {
+            switch self {
+            case .timeSyncNeeded:
+                return UIImage(systemName: "clock.fill")
+            }
+        }
+        
+        public var state: DeviceStatusBadgeState {
+            switch self {
+            case .timeSyncNeeded:
+                return .warning
+            }
+        }
+    }
+    
+    private func buildPumpStatusHighlight() -> DeviceStatusHighlight? {
+        if state.reservoirLevel < 1 {
+            return PumpStatusHighlight(
+                localizedMessage: LocalizedString("No Insulin", comment: "Status highlight that a pump is out of insulin."),
+                imageName: "exclamationmark.circle.fill",
+                state: .critical)
+        } else if self.state.isPumpSuspended {
+            return PumpStatusHighlight(
+                localizedMessage: LocalizedString("Insulin Suspended", comment: "Status highlight that insulin delivery was suspended."),
+                imageName: "pause.circle.fill",
+                state: .warning)
+        } else if Date.now.timeIntervalSince(state.lastStatusDate) > .minutes(12) {
+            return PumpStatusHighlight(
+                localizedMessage: LocalizedString("Signal Loss", comment: "Status highlight when communications with the pod haven't happened recently."),
+                imageName: "exclamationmark.circle.fill",
+                state: .critical)
+        }
+        
+        return nil
+    }
+}
diff --git a/DanaKit/DanaKitUI/DanaKitUI.xcassets/Contents.json b/DanaKit/DanaKitUI/DanaKitUI.xcassets/Contents.json
new file mode 100644
index 0000000..73c0059
--- /dev/null
+++ b/DanaKit/DanaKitUI/DanaKitUI.xcassets/Contents.json
@@ -0,0 +1,6 @@
+{
+  "info" : {
+    "author" : "xcode",
+    "version" : 1
+  }
+}
diff --git a/DanaKit/DanaKitUI/DanaKitUI.xcassets/danai.imageset/Contents.json b/DanaKit/DanaKitUI/DanaKitUI.xcassets/danai.imageset/Contents.json
new file mode 100644
index 0000000..569d13e
--- /dev/null
+++ b/DanaKit/DanaKitUI/DanaKitUI.xcassets/danai.imageset/Contents.json
@@ -0,0 +1,23 @@
+{
+  "images" : [
+    {
+      "filename" : "dana-i.png",
+      "idiom" : "universal",
+      "scale" : "1x"
+    },
+    {
+      "filename" : "dana-i@2x.png",
+      "idiom" : "universal",
+      "scale" : "2x"
+    },
+    {
+      "filename" : "dana-i@3x.png",
+      "idiom" : "universal",
+      "scale" : "3x"
+    }
+  ],
+  "info" : {
+    "author" : "xcode",
+    "version" : 1
+  }
+}
diff --git a/DanaKit/DanaKitUI/DanaKitUI.xcassets/danai.imageset/dana-i.png b/DanaKit/DanaKitUI/DanaKitUI.xcassets/danai.imageset/dana-i.png
new file mode 100644
index 0000000..848001e
Binary files /dev/null and b/DanaKit/DanaKitUI/DanaKitUI.xcassets/danai.imageset/dana-i.png differ
diff --git a/DanaKit/DanaKitUI/DanaKitUI.xcassets/danai.imageset/dana-i@2x.png b/DanaKit/DanaKitUI/DanaKitUI.xcassets/danai.imageset/dana-i@2x.png
new file mode 100644
index 0000000..848001e
Binary files /dev/null and b/DanaKit/DanaKitUI/DanaKitUI.xcassets/danai.imageset/dana-i@2x.png differ
diff --git a/DanaKit/DanaKitUI/DanaKitUI.xcassets/danai.imageset/dana-i@3x.png b/DanaKit/DanaKitUI/DanaKitUI.xcassets/danai.imageset/dana-i@3x.png
new file mode 100644
index 0000000..848001e
Binary files /dev/null and b/DanaKit/DanaKitUI/DanaKitUI.xcassets/danai.imageset/dana-i@3x.png differ
diff --git a/DanaKit/DanaKitUI/DanaKitUI.xcassets/danars.imageset/Contents.json b/DanaKit/DanaKitUI/DanaKitUI.xcassets/danars.imageset/Contents.json
new file mode 100644
index 0000000..6272936
--- /dev/null
+++ b/DanaKit/DanaKitUI/DanaKitUI.xcassets/danars.imageset/Contents.json
@@ -0,0 +1,23 @@
+{
+  "images" : [
+    {
+      "filename" : "danars.png",
+      "idiom" : "universal",
+      "scale" : "1x"
+    },
+    {
+      "filename" : "danars@2.png",
+      "idiom" : "universal",
+      "scale" : "2x"
+    },
+    {
+      "filename" : "danars@3.png",
+      "idiom" : "universal",
+      "scale" : "3x"
+    }
+  ],
+  "info" : {
+    "author" : "xcode",
+    "version" : 1
+  }
+}
diff --git a/DanaKit/DanaKitUI/DanaKitUI.xcassets/danars.imageset/danars.png b/DanaKit/DanaKitUI/DanaKitUI.xcassets/danars.imageset/danars.png
new file mode 100644
index 0000000..ae78758
Binary files /dev/null and b/DanaKit/DanaKitUI/DanaKitUI.xcassets/danars.imageset/danars.png differ
diff --git a/DanaKit/DanaKitUI/DanaKitUI.xcassets/danars.imageset/danars@2.png b/DanaKit/DanaKitUI/DanaKitUI.xcassets/danars.imageset/danars@2.png
new file mode 100644
index 0000000..ae78758
Binary files /dev/null and b/DanaKit/DanaKitUI/DanaKitUI.xcassets/danars.imageset/danars@2.png differ
diff --git a/DanaKit/DanaKitUI/DanaKitUI.xcassets/danars.imageset/danars@3.png b/DanaKit/DanaKitUI/DanaKitUI.xcassets/danars.imageset/danars@3.png
new file mode 100644
index 0000000..ae78758
Binary files /dev/null and b/DanaKit/DanaKitUI/DanaKitUI.xcassets/danars.imageset/danars@3.png differ
diff --git a/DanaKit/DanaKitUI/DanaKitUI.xcassets/pairing_request.imageset/Contents.json b/DanaKit/DanaKitUI/DanaKitUI.xcassets/pairing_request.imageset/Contents.json
new file mode 100644
index 0000000..0513c9b
--- /dev/null
+++ b/DanaKit/DanaKitUI/DanaKitUI.xcassets/pairing_request.imageset/Contents.json
@@ -0,0 +1,21 @@
+{
+  "images" : [
+    {
+      "filename" : "DanaRS_Pairing.jpg",
+      "idiom" : "universal",
+      "scale" : "1x"
+    },
+    {
+      "idiom" : "universal",
+      "scale" : "2x"
+    },
+    {
+      "idiom" : "universal",
+      "scale" : "3x"
+    }
+  ],
+  "info" : {
+    "author" : "xcode",
+    "version" : 1
+  }
+}
diff --git a/DanaKit/DanaKitUI/DanaKitUI.xcassets/pairing_request.imageset/DanaRS_Pairing.jpg b/DanaKit/DanaKitUI/DanaKitUI.xcassets/pairing_request.imageset/DanaRS_Pairing.jpg
new file mode 100644
index 0000000..95422ad
Binary files /dev/null and b/DanaKit/DanaKitUI/DanaKitUI.xcassets/pairing_request.imageset/DanaRS_Pairing.jpg differ
diff --git a/DanaKit/DanaKitUI/DanaKitUI.xcassets/reservoir.imageset/Contents.json b/DanaKit/DanaKitUI/DanaKitUI.xcassets/reservoir.imageset/Contents.json
new file mode 100644
index 0000000..7a65fb9
--- /dev/null
+++ b/DanaKit/DanaKitUI/DanaKitUI.xcassets/reservoir.imageset/Contents.json
@@ -0,0 +1,15 @@
+{
+  "images" : [
+    {
+      "filename" : "reservoir.pdf",
+      "idiom" : "universal"
+    }
+  ],
+  "info" : {
+    "author" : "xcode",
+    "version" : 1
+  },
+  "properties" : {
+    "template-rendering-intent" : "template"
+  }
+}
diff --git a/DanaKit/DanaKitUI/DanaKitUI.xcassets/reservoir.imageset/reservoir.pdf b/DanaKit/DanaKitUI/DanaKitUI.xcassets/reservoir.imageset/reservoir.pdf
new file mode 100644
index 0000000..9f1765b
Binary files /dev/null and b/DanaKit/DanaKitUI/DanaKitUI.xcassets/reservoir.imageset/reservoir.pdf differ
diff --git a/DanaKit/DanaKitUI/DanaKitUI.xcassets/reservoir_mask.imageset/Contents.json b/DanaKit/DanaKitUI/DanaKitUI.xcassets/reservoir_mask.imageset/Contents.json
new file mode 100644
index 0000000..e195986
--- /dev/null
+++ b/DanaKit/DanaKitUI/DanaKitUI.xcassets/reservoir_mask.imageset/Contents.json
@@ -0,0 +1,12 @@
+{
+  "images" : [
+    {
+      "filename" : "reservoir_mask.pdf",
+      "idiom" : "universal"
+    }
+  ],
+  "info" : {
+    "author" : "xcode",
+    "version" : 1
+  }
+}
diff --git a/DanaKit/DanaKitUI/DanaKitUI.xcassets/reservoir_mask.imageset/reservoir_mask.pdf b/DanaKit/DanaKitUI/DanaKitUI.xcassets/reservoir_mask.imageset/reservoir_mask.pdf
new file mode 100644
index 0000000..3d53399
Binary files /dev/null and b/DanaKit/DanaKitUI/DanaKitUI.xcassets/reservoir_mask.imageset/reservoir_mask.pdf differ
diff --git a/DanaKit/DanaKitUI/ViewController/ActivityViewController.swift b/DanaKit/DanaKitUI/ViewController/ActivityViewController.swift
new file mode 100644
index 0000000..f88dbf9
--- /dev/null
+++ b/DanaKit/DanaKitUI/ViewController/ActivityViewController.swift
@@ -0,0 +1,24 @@
+//
+//  ActivityViewController.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 30/03/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import UIKit
+import SwiftUI
+
+struct ActivityViewController: UIViewControllerRepresentable {
+
+    var activityItems: [Any]
+    var applicationActivities: [UIActivity]? = nil
+
+    func makeUIViewController(context: UIViewControllerRepresentableContext<ActivityViewController>) -> UIActivityViewController {
+        let controller = UIActivityViewController(activityItems: activityItems, applicationActivities: applicationActivities)
+        return controller
+    }
+
+    func updateUIViewController(_ uiViewController: UIActivityViewController, context: UIViewControllerRepresentableContext<ActivityViewController>) {}
+
+}
diff --git a/DanaKit/DanaKitUI/ViewController/DanaUICoordinator.swift b/DanaKit/DanaKitUI/ViewController/DanaUICoordinator.swift
new file mode 100644
index 0000000..b7b810c
--- /dev/null
+++ b/DanaKit/DanaKitUI/ViewController/DanaUICoordinator.swift
@@ -0,0 +1,232 @@
+//
+//  DanaUICoordinator.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 18/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import UIKit
+import SwiftUI
+import Combine
+import LoopKit
+import LoopKitUI
+
+enum DanaUIScreen {
+    case debugView
+    case firstRunScreen
+    case danarsv1Explaination
+    case danarsv1Password
+    case danarsv3Explaination
+    case danaiExplaination
+    case insulinConfirmationScreen
+    case bolusSpeedScreen
+    case deviceScanningScreen
+    case setupComplete
+    case settings
+    
+    func next() -> DanaUIScreen? {
+        switch self {
+        case .debugView:
+            return .firstRunScreen
+        case .firstRunScreen:
+            return nil
+        case .danarsv1Explaination:
+            return .danarsv1Password
+        case .danarsv1Password:
+            return .insulinConfirmationScreen
+        case .danarsv3Explaination:
+            return .insulinConfirmationScreen
+        case .danaiExplaination:
+            return .insulinConfirmationScreen
+        case .insulinConfirmationScreen:
+            return .bolusSpeedScreen
+        case .bolusSpeedScreen:
+            return .deviceScanningScreen
+        case .deviceScanningScreen:
+            return .setupComplete
+        case .setupComplete:
+            return nil
+        case .settings:
+            return nil
+        }
+    }
+}
+
+protocol DanaUINavigator: AnyObject {
+    func navigateTo(_ screen: DanaUIScreen)
+}
+
+class DanaUICoordinator: UINavigationController, PumpManagerOnboarding, CompletionNotifying, UINavigationControllerDelegate {
+    var pumpManagerOnboardingDelegate: PumpManagerOnboardingDelegate?
+    
+    var completionDelegate: CompletionDelegate?
+    
+    var screenStack = [DanaUIScreen]()
+    var currentScreen: DanaUIScreen {
+        return screenStack.last!
+    }
+    
+    private let colorPalette: LoopUIColorPalette
+
+    private var pumpManager: DanaKitPumpManager?
+    
+    private var allowedInsulinTypes: [InsulinType]
+    
+    private var allowDebugFeatures: Bool
+    
+    init(pumpManager: DanaKitPumpManager? = nil, colorPalette: LoopUIColorPalette, pumpManagerSettings: PumpManagerSetupSettings? = nil, allowDebugFeatures: Bool, allowedInsulinTypes: [InsulinType] = [])
+    {
+        if pumpManager == nil && pumpManagerSettings == nil {
+            self.pumpManager = DanaKitPumpManager(state: DanaKitPumpManagerState(rawValue: [:]))
+        } else if pumpManager == nil && pumpManagerSettings != nil {
+            let basal = DanaKitPumpManagerState.convertBasal(pumpManagerSettings!.basalSchedule.items)
+            self.pumpManager = DanaKitPumpManager(state: DanaKitPumpManagerState(basalSchedule: basal))
+        } else {
+            self.pumpManager = pumpManager
+        }
+        
+        self.colorPalette = colorPalette
+
+        self.allowDebugFeatures = allowDebugFeatures
+        
+        self.allowedInsulinTypes = allowedInsulinTypes
+        
+        super.init(navigationBarClass: UINavigationBar.self, toolbarClass: UIToolbar.self)
+    }
+    
+    required init?(coder aDecoder: NSCoder) {
+        fatalError("init(coder:) has not been implemented")
+    }
+    
+    override func viewWillAppear(_ animated: Bool) {
+        super.viewWillAppear(animated)
+
+        if screenStack.isEmpty {
+            screenStack = [getInitialScreen()]
+            let viewController = viewControllerForScreen(currentScreen)
+            viewController.isModalInPresentation = false
+            setViewControllers([viewController], animated: false)
+        }
+    }
+    
+    private func hostingController<Content: View>(rootView: Content) -> DismissibleHostingController<some View> {
+        let rootView = rootView
+            .environment(\.appName, Bundle.main.bundleDisplayName)
+        return DismissibleHostingController(content: rootView, colorPalette: colorPalette)
+    }
+    
+    private func viewControllerForScreen(_ screen: DanaUIScreen) -> UIViewController {
+        switch(screen) {
+        case .debugView:
+            let viewModel = DanaKitDebugViewModel(self.pumpManager)
+            return hostingController(rootView: DanaKitDebugView(viewModel: viewModel))
+        case .firstRunScreen:
+            let view = DanaKitSetupView(nextAction: self.goToExplaination, debugAction: { self.navigateTo(.debugView) }) //self.allowDebugFeatures ? { self.navigateTo(.debugView) } : {})
+            return hostingController(rootView: view)
+        case .danarsv1Explaination:
+            let view = DanaRSv1Explaination(nextAction: self.stepFinished)
+            return hostingController(rootView: view)
+        case .danarsv1Password:
+            let view = DanaRSv1Password(nextAction: { password in
+                guard let pumpManager = self.pumpManager else {
+                    self.stepFinished()
+                    return
+                }
+                
+                pumpManager.state.devicePassword = password
+                self.stepFinished()
+            })
+            return hostingController(rootView: view)
+        case .danarsv3Explaination:
+            let view = DanaRSv3Explaination(nextAction: self.stepFinished)
+            return hostingController(rootView: view)
+        case .danaiExplaination:
+            let view = DanaIExplainationView(nextAction: self.stepFinished)
+            return hostingController(rootView: view)
+        case .insulinConfirmationScreen:
+            let confirm: (InsulinType) -> Void = { confirmedType in
+                self.pumpManager?.state.insulinType = confirmedType
+                self.stepFinished()
+            }
+            let view = InsulinTypeConfirmation(initialValue: self.allowedInsulinTypes[0], supportedInsulinTypes: self.allowedInsulinTypes, didConfirm: confirm)
+            return hostingController(rootView: view)
+        case .bolusSpeedScreen:
+            let next: (BolusSpeed) -> Void = { bolusSpeed in
+                self.pumpManager?.state.bolusSpeed = bolusSpeed
+                self.stepFinished()
+            }
+            let view = DanaKitPumpSpeed(next: next)
+            
+            return hostingController(rootView: view)
+        case .deviceScanningScreen:
+            self.pumpManager?.state.isOnBoarded = true
+            self.pumpManager?.notifyStateDidChange()
+            self.pumpManagerOnboardingDelegate?.pumpManagerOnboarding(didOnboardPumpManager: self.pumpManager!)
+            
+            let viewModel = DanaKitScanViewModel(self.pumpManager, nextStep: self.stepFinished)
+            return hostingController(rootView: DanaKitScanView(viewModel: viewModel))
+        case .setupComplete:
+            let nextStep: () -> Void = {
+                self.pumpManagerOnboardingDelegate?.pumpManagerOnboarding(didCreatePumpManager: self.pumpManager!)
+                self.stepFinished()
+            }
+
+            let view = DanaKitSetupCompleteView(finish: nextStep, friendlyPumpModelName: self.pumpManager?.state.getFriendlyDeviceName() ?? "", imageName: self.pumpManager?.state.getDanaPumpImageName() ?? "danai")
+            return hostingController(rootView: view)
+        case .settings:
+            let view = DanaKitSettingsView(viewModel: DanaKitSettingsViewModel(self.pumpManager, self.stepFinished), supportedInsulinTypes: self.allowedInsulinTypes, imageName: self.pumpManager?.state.getDanaPumpImageName() ?? "danai")
+            return hostingController(rootView: view)
+        }
+    }
+    
+    func stepFinished() {
+        if let nextStep = currentScreen.next() {
+            navigateTo(nextStep)
+        } else {
+            completionDelegate?.completionNotifyingDidComplete(self)
+        }
+    }
+    
+    func getInitialScreen() -> DanaUIScreen {
+        guard let pumpManager = self.pumpManager else {
+            return .firstRunScreen
+        }
+        
+        if (pumpManager.isOnboarded) {
+            return .settings
+        }
+        
+        if (pumpManager.state.insulinType != nil) {
+            return .deviceScanningScreen
+        }
+        
+        return .firstRunScreen
+    }
+    
+    func goToExplaination(_ index: Int) {
+        switch (index) {
+        case 0:
+            navigateTo(.danarsv1Explaination)
+            return
+        case 1:
+            navigateTo(.danarsv3Explaination)
+            return
+        case 2:
+            navigateTo(.danaiExplaination)
+            return
+        default:
+            return
+        }
+    }
+}
+
+extension DanaUICoordinator: DanaUINavigator {
+    func navigateTo(_ screen: DanaUIScreen) {
+        screenStack.append(screen)
+        let viewController = viewControllerForScreen(screen)
+        viewController.isModalInPresentation = false
+        self.pushViewController(viewController, animated: true)
+        viewController.view.layoutSubviews()
+    }
+}
diff --git a/DanaKit/DanaKitUI/ViewModels/BasalProfileViewModel.swift b/DanaKit/DanaKitUI/ViewModels/BasalProfileViewModel.swift
new file mode 100644
index 0000000..d5daec6
--- /dev/null
+++ b/DanaKit/DanaKitUI/ViewModels/BasalProfileViewModel.swift
@@ -0,0 +1,38 @@
+//
+//  BasalProfileViewModel.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 05/03/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+import LoopKit
+
+class BasalProfileViewModel : ObservableObject {
+    @Published var basalProfileNumber: UInt8 = 0
+    @Published var loading: Bool = false
+    
+    private let pumpManager: DanaKitPumpManager?
+        
+    init(_ pumpManager: DanaKitPumpManager?) {
+        self.pumpManager = pumpManager
+        
+        self.basalProfileNumber = pumpManager?.state.basalProfileNumber ?? 0
+    }
+    
+    func basalProfileNumberChanged(completion: @escaping () -> Void) {
+        guard let pumpManager = self.pumpManager else {
+            return
+        }
+        
+        self.loading = true
+        pumpManager.state.basalProfileNumber = self.basalProfileNumber
+        pumpManager.switchBasalProfileSlot(basal: pumpManager.state.basalSchedule, completion: { _ in
+            DispatchQueue.main.async {
+                self.loading = false
+                completion()
+            }
+        })
+    }
+}
diff --git a/DanaKit/DanaKitUI/ViewModels/DanaKitDebugViewModel.swift b/DanaKit/DanaKitUI/ViewModels/DanaKitDebugViewModel.swift
new file mode 100644
index 0000000..34d0e94
--- /dev/null
+++ b/DanaKit/DanaKitUI/ViewModels/DanaKitDebugViewModel.swift
@@ -0,0 +1,211 @@
+//
+//  DanaKitDebugViewModel.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 19/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+import LoopKit
+
+class DanaKitDebugViewModel : ObservableObject {
+    @Published var scannedDevices: [DanaPumpScan] = []
+    
+    @Published var isPresentingTempBasalAlert = false
+    @Published var isPresentingScanAlert = false
+    @Published var isPresentingBolusAlert = false
+    @Published var isPresentingScanningErrorAlert = false
+    @Published var isPromptingPincode = false
+    @Published var pinCodePromptError: String?
+    @Published var scanningErrorMessage = ""
+    @Published var connectedDeviceName = ""
+    @Published var messageScanAlert = ""
+    @Published var isConnected = false
+    @Published var isConnectionError = false
+    @Published var connectionErrorMessage: String?
+    
+    @Published var pin1 = ""
+    @Published var pin2 = ""
+    
+    private let log = DanaLogger(category: "DebugView")
+    private var pumpManager: DanaKitPumpManager?
+    private var connectedDevice: DanaPumpScan?
+    
+    init(_ pumpManager: DanaKitPumpManager? = nil) {
+        self.pumpManager = pumpManager
+        
+        self.pumpManager?.addScanDeviceObserver(self, queue: .main)
+        self.pumpManager?.addStateObserver(self, queue: .main)
+    }
+    
+    func scan() {
+        do {
+            try self.pumpManager?.startScan()
+        } catch {
+            self.isPresentingScanningErrorAlert = true
+            self.scanningErrorMessage = error.localizedDescription
+        }
+    }
+    
+    func connect() {
+        guard let device = scannedDevices.last else {
+            log.error("No view or device...")
+            return
+        }
+        
+        self.pumpManager?.stopScan()
+        self.pumpManager?.connect(device.peripheral, connectCompletion)
+        self.connectedDevice = device
+    }
+    
+    func connectCompletion(_ result: ConnectionResult) {
+        switch result {
+        case .success:
+            self.isConnected = true
+            
+        case .failure(let error):
+            self.isConnectionError = true
+            self.connectionErrorMessage = error.localizedDescription
+            
+        case .invalidBle5Keys:
+            self.isConnectionError = true
+            self.connectionErrorMessage = LocalizedString("Failed to pair to ", comment: "Dana-i failed to pair p1") + (self.pumpManager?.state.deviceName ?? "<NO_NAME>") + LocalizedString(". Please go to your bluetooth settings, forget this device, and try again", comment: "Dana-i failed to pair p2")
+            
+        case .requestedPincode(let message):
+            self.isPromptingPincode = true
+            self.pinCodePromptError = message
+        }
+    }
+    
+    func cancelPinPrompt() {
+        self.isPromptingPincode = false
+        self.pumpManager?.disconnect()
+    }
+    
+    func processPinPrompt() {
+        guard pin1.count == 12, pin2.count == 8 else {
+            self.pinCodePromptError = LocalizedString("Received invalid pincode lengths. Try again", comment: "Dana-RS v3 pincode prompt error invalid length")
+            self.isPromptingPincode = true
+            return
+        }
+        
+        guard let pin1 = Data(hexString: pin1), let pin2 = Data(hexString: pin2) else {
+            self.pinCodePromptError = LocalizedString("Received invalid hex strings. Try again", comment: "Dana-RS v3 pincode prompt error invalid hex")
+            self.isPromptingPincode = true
+            return
+        }
+        
+        let randomPairingKey = pin2.prefix(3)
+        let checkSum = pin2.dropFirst(3).prefix(1)
+        
+        var pairingKeyCheckSum: UInt8 = 0
+        for byte in pin1 {
+            pairingKeyCheckSum ^= byte
+        }
+        
+        for byte in randomPairingKey {
+            pairingKeyCheckSum ^= byte
+        }
+        
+        guard checkSum.first == pairingKeyCheckSum else {
+            self.pinCodePromptError = LocalizedString("Checksum failed. Try again", comment: "Dana-RS v3 pincode prompt error checksum failed")
+            self.isPromptingPincode = true
+            return
+        }
+        
+        self.pumpManager?.finishV3Pairing(pin1, randomPairingKey)
+    }
+    
+    func bolusModal() {
+        self.isPresentingBolusAlert = true
+    }
+    
+    func bolus() {
+        self.pumpManager?.enactBolus(units: 5.0, activationType: .manualNoRecommendation, completion: bolusCompletion)
+        self.isPresentingBolusAlert = false
+    }
+    
+    func bolusCompletion(_ error: PumpManagerError?) {
+        if (error == nil) {
+            return
+        }
+        
+        log.error("Bolus failed...")
+    }
+    
+    func stopBolus() {
+        self.pumpManager?.cancelBolus(completion: bolusCancelCompletion)
+    }
+    
+    func bolusCancelCompletion(_ result: PumpManagerResult<DoseEntry?>) {
+        if case .success = result {
+            return
+        } else {
+            log.error("Cancel failed...")
+        }
+    }
+    
+    func tempBasalModal() {
+        self.isPresentingTempBasalAlert = true
+    }
+
+    func tempBasal() {
+        // 200% temp basal for 2 hours
+        self.pumpManager?.enactTempBasal(unitsPerHour: 1, for: 7200, completion: tempBasalCompletion)
+        self.isPresentingTempBasalAlert = false
+    }
+    
+    func tempBasalCompletion(_ error: PumpManagerError?) {
+        if (error == nil) {
+            return
+        }
+        
+        log.error("Temp basal failed...")
+    }
+    
+    func stopTempBasal() {
+        self.pumpManager?.enactTempBasal(unitsPerHour: 0, for: 0, completion: tempBasalCompletion)
+    }
+    
+    func basal() {
+        let basal = Array(0..<24).map({ RepeatingScheduleValue<Double>(startTime: TimeInterval(60 * 30 * $0), value: 0.5) })
+        self.pumpManager?.syncBasalRateSchedule(items: basal, completion: basalCompletion)
+    }
+    
+    func basalCompletion(_ result: Result<DailyValueSchedule<Double>, any Error>) {
+        if case .success = result {
+            return
+        } else {
+            log.error("Cancel failed...")
+        }
+    }
+    
+    func disconnect() {
+        guard let device = self.connectedDevice else {
+            return
+        }
+        
+        self.pumpManager?.disconnect(device.peripheral)
+    }
+    
+    func getLogs() -> [URL] {
+        return log.getDebugLogs()
+    }
+}
+
+extension DanaKitDebugViewModel: StateObserver {
+    func deviceScanDidUpdate(_ device: DanaPumpScan) {
+        log.info("Found device \(device.name)")
+        self.scannedDevices.append(device)
+        
+        messageScanAlert = "Do you want to connect to: " + device.name + " (" + device.bleIdentifier + ")"
+        isPresentingScanAlert = true
+        
+    }
+    
+    func stateDidUpdate(_ state: DanaKitPumpManagerState, _ oldState: DanaKitPumpManagerState) {
+        self.isConnected = state.isConnected
+        self.connectedDeviceName = state.deviceName ?? ""
+    }
+}
diff --git a/DanaKit/DanaKitUI/ViewModels/DanaKitScanViewModel.swift b/DanaKit/DanaKitUI/ViewModels/DanaKitScanViewModel.swift
new file mode 100644
index 0000000..f43f2dc
--- /dev/null
+++ b/DanaKit/DanaKitUI/ViewModels/DanaKitScanViewModel.swift
@@ -0,0 +1,144 @@
+//
+//  DanaKitScanViewModel.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 28/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+import LoopKit
+import CoreBluetooth
+
+struct ScanResultItem: Identifiable {
+    let id = UUID()
+    var name: String
+    let bleIdentifier: String
+}
+
+class DanaKitScanViewModel : ObservableObject {
+    @Published var scannedDevices: [ScanResultItem] = []
+    @Published var isScanning = false
+    @Published var isConnecting = false
+    @Published var connectingTo: String? = nil
+    @Published var isPromptingPincode = false
+    @Published var pinCodePromptError: String?
+    @Published var isConnectionError = false
+    @Published var connectionErrorMessage: String?
+    
+    @Published var pin1 = ""
+    @Published var pin2 = ""
+     
+    private let log = DanaLogger(category: "ScanView")
+    private var pumpManager: DanaKitPumpManager?
+    private var nextStep: () -> Void
+    private var foundDevices: [String:CBPeripheral] = [:]
+    
+    init(_ pumpManager: DanaKitPumpManager? = nil, nextStep: @escaping () -> Void) {
+        self.pumpManager = pumpManager
+        self.nextStep = nextStep
+        
+        self.pumpManager?.addScanDeviceObserver(self, queue: .main)
+        self.pumpManager?.addStateObserver(self, queue: .main)
+        
+        do {
+            try self.pumpManager?.startScan()
+            self.isScanning = true
+        } catch {
+            log.error("\(#function): Failed to start scan action: \(error.localizedDescription)")
+        }
+    }
+    
+    func connect(_ item: ScanResultItem) {
+        guard let device = self.foundDevices[item.bleIdentifier] else {
+            log.error("No view or device...")
+            return
+        }
+        
+        self.stopScan()
+        self.connectingTo = item.name
+        
+        self.pumpManager?.connect(device) { result in
+            DispatchQueue.main.async {
+                self.connectComplete(result, device)
+            }
+        }
+        self.isConnecting = true
+    }
+    
+    func connectComplete(_ result: ConnectionResult, _ peripheral: CBPeripheral) {
+        switch result {
+        case .success:
+            self.pumpManager?.disconnect(peripheral)
+            self.nextStep()
+            
+        case .failure(let e):
+            self.isConnecting = false
+            self.connectionErrorMessage = e.localizedDescription
+            
+        case .invalidBle5Keys:
+            self.isConnecting = false
+            self.connectionErrorMessage = LocalizedString("Failed to pair to ", comment: "Dana-i failed to pair p1") + (self.pumpManager?.state.deviceName ?? "<NO_NAME>") + LocalizedString(". Please go to your bluetooth settings, forget this device, and try again", comment: "Dana-i failed to pair p2")
+            
+        case .requestedPincode(let message):
+            self.isConnecting = true
+            self.isPromptingPincode = true
+            self.pinCodePromptError = message
+        }
+    }
+    
+    func stopScan() {
+        self.pumpManager?.stopScan()
+        self.isScanning = false
+    }
+    
+    func cancelPinPrompt() {
+        self.isPromptingPincode = false
+        self.pumpManager?.disconnect()
+    }
+    
+    func processPinPrompt() {
+        guard pin1.count == 12, pin2.count == 8 else {
+            self.pinCodePromptError = LocalizedString("Received invalid pincode lengths. Try again", comment: "Dana-RS v3 pincode prompt error invalid length")
+            self.isPromptingPincode = true
+            return
+        }
+        
+        guard let pin1 = Data(hexString: pin1), let pin2 = Data(hexString: pin2) else {
+            self.pinCodePromptError = LocalizedString("Received invalid hex strings. Try again", comment: "Dana-RS v3 pincode prompt error invalid hex")
+            self.isPromptingPincode = true
+            return
+        }
+        
+        let randomPairingKey = pin2.prefix(3)
+        let checkSum = pin2.dropFirst(3).prefix(1)
+        
+        var pairingKeyCheckSum: UInt8 = 0
+        for byte in pin1 {
+            pairingKeyCheckSum ^= byte
+        }
+        
+        for byte in randomPairingKey {
+            pairingKeyCheckSum ^= byte
+        }
+        
+        guard checkSum.first == pairingKeyCheckSum else {
+            self.pinCodePromptError = LocalizedString("Checksum failed. Try again", comment: "Dana-RS v3 pincode prompt error checksum failed")
+            self.isPromptingPincode = true
+            return
+        }
+        
+        self.pumpManager?.finishV3Pairing(pin1, randomPairingKey)
+    }
+}
+
+extension DanaKitScanViewModel: StateObserver {
+    func deviceScanDidUpdate(_ device: DanaPumpScan) {
+        self.scannedDevices.append(ScanResultItem(name: device.name, bleIdentifier: device.bleIdentifier))
+        self.foundDevices[device.bleIdentifier] = device.peripheral
+    }
+    
+    func stateDidUpdate(_ state: DanaKitPumpManagerState, _ oldState: DanaKitPumpManagerState) {
+        // Not needed
+    }
+}
diff --git a/DanaKit/DanaKitUI/ViewModels/DanaKitSettingsViewModel.swift b/DanaKit/DanaKitUI/ViewModels/DanaKitSettingsViewModel.swift
new file mode 100644
index 0000000..0039612
--- /dev/null
+++ b/DanaKit/DanaKitUI/ViewModels/DanaKitSettingsViewModel.swift
@@ -0,0 +1,324 @@
+//
+//  DanaKitSettingsViewModel.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 03/01/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+import LoopKit
+import HealthKit
+
+class DanaKitSettingsViewModel : ObservableObject {
+    @Published var showingDeleteConfirmation = false
+    @Published var showingTimeSyncConfirmation = false
+    @Published var basalButtonText: String = ""
+    @Published var bolusSpeed: BolusSpeed
+    @Published var isUpdatingPumpState: Bool = false
+    @Published var isSyncing: Bool = false
+    @Published var lastSync: Date? = nil
+    @Published var batteryLevel: Double = 0
+    @Published var showingSilentTone: Bool = false
+    @Published var silentTone: Bool = false
+    @Published var basalProfileNumber: UInt8 = 0
+    @Published var cannulaAge: String? = nil
+    @Published var reservoirAge: String? = nil
+    
+    @Published var showPumpTimeSyncWarning: Bool = false
+    @Published var pumpTime: Date? = nil
+    
+    @Published var reservoirLevelWarning: Double
+    @Published var reservoirLevel: Double?
+    @Published var isSuspended: Bool = false
+    @Published var basalRate: Double?
+    
+    private let log = DanaLogger(category: "SettingsView")
+    private(set) var insulineType: InsulinType
+    private(set) var pumpManager: DanaKitPumpManager?
+    private var didFinish: (() -> Void)?
+    private(set) var userOptionsView: DanaKitUserSettingsView
+    private(set) var basalProfileView: BasalProfileView
+
+    public var pumpModel: String {
+        self.pumpManager?.state.getFriendlyDeviceName() ?? ""
+    }
+
+    public var deviceName: String? {
+        self.pumpManager?.state.deviceName
+    }
+    
+    public var hardwareModel: UInt8? {
+        self.pumpManager?.state.hwModel
+    }
+    
+    public var firmwareVersion: UInt8? {
+        self.pumpManager?.state.pumpProtocol
+    }
+    
+    public var isTempBasal: Bool {
+        guard let pumpManager = self.pumpManager else {
+            return false
+        }
+        
+        return pumpManager.state.basalDeliveryOrdinal == .tempBasal && pumpManager.state.tempBasalEndsAt > Date.now
+    }
+
+    
+    let basalRateFormatter: NumberFormatter = {
+        let numberFormatter = NumberFormatter()
+        numberFormatter.numberStyle = .decimal
+        numberFormatter.minimumFractionDigits = 1
+        numberFormatter.minimumIntegerDigits = 1
+        return numberFormatter
+    }()
+    
+    let reservoirVolumeFormatter: QuantityFormatter = {
+        let formatter = QuantityFormatter(for: .internationalUnit())
+        formatter.numberFormatter.maximumFractionDigits = 1
+        return formatter
+    }()
+    
+    private let dateFormatter = {
+        let formatter = DateFormatter()
+        formatter.timeStyle = .short
+        return formatter
+    }()
+    
+    public init(_ pumpManager: DanaKitPumpManager?, _ didFinish: (() -> Void)?) {
+        self.pumpManager = pumpManager
+        self.didFinish = didFinish
+        
+        self.userOptionsView = DanaKitUserSettingsView(viewModel: DanaKitUserSettingsViewModel(self.pumpManager))
+        self.basalProfileView = BasalProfileView(viewModel: BasalProfileViewModel(self.pumpManager))
+        
+        self.insulineType = self.pumpManager?.state.insulinType ?? .novolog
+        self.bolusSpeed = self.pumpManager?.state.bolusSpeed ?? .speed12
+        self.lastSync = self.pumpManager?.state.lastStatusDate
+        self.reservoirLevel = self.pumpManager?.state.reservoirLevel
+        self.isSuspended = self.pumpManager?.state.isPumpSuspended ?? false
+        self.pumpTime = self.pumpManager?.state.pumpTime
+        self.batteryLevel = self.pumpManager?.state.batteryRemaining ?? 0
+        self.silentTone = self.pumpManager?.state.useSilentTones ?? false
+        self.reservoirLevelWarning = Double(self.pumpManager?.state.lowReservoirRate ?? 20)
+        self.basalProfileNumber = self.pumpManager?.state.basalProfileNumber ?? 0
+        self.showPumpTimeSyncWarning = self.pumpManager?.state.shouldShowTimeWarning() ?? false
+        updateBasalRate()
+        
+        if let cannulaDate = self.pumpManager?.state.cannulaDate {
+            self.cannulaAge = "\(String(format: "%.1f", -cannulaDate.timeIntervalSinceNow / .days(1))) \(LocalizedString("day(s)", comment: "Text for Day unit"))"
+        }
+        
+        if let reservoirDate = self.pumpManager?.state.reservoirDate {
+            self.reservoirAge = "\(String(format: "%.1f", -reservoirDate.timeIntervalSinceNow / .days(1))) \(LocalizedString("day(s)", comment: "Text for Day unit"))"
+        }
+        
+        self.basalButtonText = self.updateBasalButtonText()
+        
+        self.pumpManager?.addStateObserver(self, queue: .main)
+    }
+    
+    func stopUsingDana() {
+        self.pumpManager?.notifyDelegateOfDeactivation {
+            DispatchQueue.main.async {
+                self.didFinish?()
+            }
+        }
+    }
+    
+    func didChangeInsulinType(_ newType: InsulinType?) {
+        guard let type = newType else {
+            return
+        }
+        
+        self.pumpManager?.state.insulinType = type
+        self.insulineType = type
+    }
+    
+    func getLogs() -> [URL] {
+        return log.getDebugLogs()
+    }
+    
+    func formatDate(_ date: Date?) -> String {
+        guard let date = date else {
+            return ""
+        }
+        
+        return self.dateFormatter.string(from: date)
+    }
+    
+    func didBolusSpeedChanged(_ bolusSpeed: BolusSpeed) {
+        self.pumpManager?.state.bolusSpeed = bolusSpeed
+        self.pumpManager?.notifyStateDidChange()
+        self.bolusSpeed = bolusSpeed
+    }
+    
+    func syncData() {
+        guard let pumpManager = self.pumpManager else {
+            return
+        }
+        
+        DispatchQueue.main.async {
+            self.isSyncing = true
+        }
+        
+        pumpManager.syncPump { date in
+            DispatchQueue.main.async {
+                self.isSyncing = false
+                self.lastSync = date
+            }
+        }
+    }
+    
+    func syncPumpTime() {
+        guard let pumpManager = self.pumpManager else {
+            return
+        }
+        
+        self.isSyncing = true
+        pumpManager.syncPumpTime(completion: { error in
+            self.syncData()
+        })
+    }
+    
+    func reservoirText(for units: Double) -> String {
+        let quantity = HKQuantity(unit: .internationalUnit(), doubleValue: units)
+        return reservoirVolumeFormatter.string(from: quantity) ?? ""
+    }
+    
+    func toggleSilentTone() {
+        guard let pumpManager = self.pumpManager else {
+            return
+        }
+        
+        pumpManager.state.useSilentTones = !self.silentTone
+        self.silentTone = pumpManager.state.useSilentTones
+    }
+    
+    func transformBasalProfile(_ index: UInt8) -> String {
+        if index == 0 {
+            return "A"
+        } else if index == 1 {
+            return "B"
+        } else if index == 2 {
+            return "C"
+        } else {
+            return "D"
+        }
+    }
+    
+    func suspendResumeButtonPressed() {
+        guard let pumpManager = self.pumpManager else {
+            return
+        }
+        
+        self.isUpdatingPumpState = true
+        
+        if pumpManager.state.isPumpSuspended {
+            self.pumpManager?.resumeDelivery{ error in
+                DispatchQueue.main.async {
+                    self.basalButtonText = self.updateBasalButtonText()
+                    self.isUpdatingPumpState = false
+                }
+                
+                // Check if action failed, otherwise skip state sync
+                guard error == nil else {
+                    self.log.error("\(#function): failed to resume delivery. Error: \(error!.localizedDescription)")
+                    return
+                }
+            }
+            
+            return
+        }
+        
+        if isTempBasal {
+            // Stop temp basal
+            self.pumpManager?.enactTempBasal(unitsPerHour: 0, for: 0, completion: { error in
+                DispatchQueue.main.async {
+                    self.basalButtonText = self.updateBasalButtonText()
+                    self.isUpdatingPumpState = false
+                }
+                
+                // Check if action failed, otherwise skip state sync
+                guard error == nil else {
+                    self.log.error("\(#function): failed to stop temp basal. Error: \(error!.localizedDescription)")
+                    return
+                }
+            })
+            
+            return
+        }
+        
+        pumpManager.suspendDelivery(completion: { error in
+            DispatchQueue.main.async {
+                self.basalButtonText = self.updateBasalButtonText()
+                self.isUpdatingPumpState = false
+            }
+            
+            // Check if action failed, otherwise skip state sync
+            guard error == nil else {
+                self.log.error("\(#function): failed to suspend delivery. Error: \(error!.localizedDescription)")
+                return
+            }
+        })
+    }
+    
+    private func updateBasalButtonText() -> String {
+        guard let pumpManager = self.pumpManager else {
+            return LocalizedString("Suspend delivery", comment: "Dana settings suspend delivery")
+        }
+        
+        if pumpManager.state.isPumpSuspended {
+            return LocalizedString("Resume delivery", comment: "Dana settings resume delivery")
+        }
+        
+        if isTempBasal {
+            return LocalizedString("Stop temp basal", comment: "Dana settings stop temp basal")
+        }
+        
+        return LocalizedString("Suspend delivery", comment: "Dana settings suspend delivery")
+    }
+    
+    private func updateBasalRate() {
+        guard let pumpManager = self.pumpManager else {
+            self.basalRate = 0
+            return
+        }
+        
+        if pumpManager.state.basalDeliveryOrdinal == .tempBasal && pumpManager.state.tempBasalEndsAt > Date.now {
+            self.basalRate = pumpManager.state.tempBasalUnits ?? pumpManager.currentBaseBasalRate
+        } else {
+            self.basalRate = pumpManager.currentBaseBasalRate
+        }
+    }
+}
+
+extension DanaKitSettingsViewModel: StateObserver {
+    func stateDidUpdate(_ state: DanaKitPumpManagerState, _ oldState: DanaKitPumpManagerState) {
+        self.insulineType = state.insulinType ?? .novolog
+        self.bolusSpeed = state.bolusSpeed
+        self.lastSync = state.lastStatusDate
+        self.reservoirLevel = state.reservoirLevel
+        self.isSuspended = state.isPumpSuspended
+        self.pumpTime = state.pumpTime
+        self.batteryLevel = state.batteryRemaining
+        self.silentTone = state.useSilentTones
+        self.basalProfileNumber = state.basalProfileNumber
+        self.showPumpTimeSyncWarning = state.shouldShowTimeWarning()
+        updateBasalRate()
+        
+        self.basalButtonText = self.updateBasalButtonText()
+        
+        if let cannulaDate = state.cannulaDate {
+            self.cannulaAge = "\(String(format: "%.1f", -cannulaDate.timeIntervalSinceNow / .days(1))) \(LocalizedString("day(s)", comment: "Text for Day unit"))"
+        }
+        
+        if let reservoirDate = state.reservoirDate {
+            self.reservoirAge = "\(String(format: "%.1f", -reservoirDate.timeIntervalSinceNow / .days(1))) \(LocalizedString("day(s)", comment: "Text for Day unit"))"
+        }
+    }
+    
+    func deviceScanDidUpdate(_ device: DanaPumpScan) {
+        // Don't do anything here. We are not scanning for a new pump
+    }
+}
diff --git a/DanaKit/DanaKitUI/ViewModels/DanaKitUserSettingsViewModel.swift b/DanaKit/DanaKitUI/ViewModels/DanaKitUserSettingsViewModel.swift
new file mode 100644
index 0000000..0dce6e0
--- /dev/null
+++ b/DanaKit/DanaKitUI/ViewModels/DanaKitUserSettingsViewModel.swift
@@ -0,0 +1,61 @@
+//
+//  DanaKitUserSettingsViewModel.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 29/01/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import Foundation
+import LoopKit
+
+class DanaKitUserSettingsViewModel : ObservableObject {
+    @Published var storingUseroption = false
+    @Published var lowReservoirRate: UInt8
+    @Published var isTimeDisplay24H: Bool
+    @Published var isButtonScrollOnOff: Bool
+    @Published var beepAndAlarm: BeepAlarmType
+    @Published var lcdOnTimeInSec: UInt8
+    @Published var backlightOnTimeInSec: UInt8
+    
+    private let pumpManager: DanaKitPumpManager?
+    
+    init(_ pumpManager: DanaKitPumpManager?) {
+        self.pumpManager = pumpManager
+        
+        self.lowReservoirRate = self.pumpManager?.state.lowReservoirRate ?? 0
+        self.isTimeDisplay24H = self.pumpManager?.state.isTimeDisplay24H ?? false
+        self.isButtonScrollOnOff = self.pumpManager?.state.isButtonScrollOnOff ?? false
+        self.beepAndAlarm = self.pumpManager?.state.beepAndAlarm ?? .sound
+        self.lcdOnTimeInSec = self.pumpManager?.state.lcdOnTimeInSec ?? 0
+        self.backlightOnTimeInSec = self.pumpManager?.state.backlightOnTimInSec ?? 0
+    }
+    
+    func storeUserOption() {
+        guard let pumpManager = self.pumpManager else {
+            return
+        }
+        
+        self.storingUseroption = true
+        let model = PacketGeneralSetUserOption(
+            isTimeDisplay24H: self.isTimeDisplay24H,
+            isButtonScrollOnOff: self.isButtonScrollOnOff,
+            beepAndAlarm: self.beepAndAlarm.rawValue,
+            lcdOnTimeInSec: self.lcdOnTimeInSec,
+            backlightOnTimeInSec: self.backlightOnTimeInSec,
+            selectedLanguage: pumpManager.state.selectedLanguage,
+            units: pumpManager.state.units,
+            shutdownHour: pumpManager.state.shutdownHour,
+            lowReservoirRate: self.lowReservoirRate,
+            cannulaVolume: pumpManager.state.cannulaVolume,
+            refillAmount: pumpManager.state.refillAmount,
+            targetBg: pumpManager.state.targetBg
+        )
+        
+        pumpManager.setUserSettings(data: model, completion: { err in
+            DispatchQueue.main.async {
+                self.storingUseroption = false
+            }
+        })
+    }
+}
diff --git a/DanaKit/DanaKitUI/Views/ContinueButton.swift b/DanaKit/DanaKitUI/Views/ContinueButton.swift
new file mode 100644
index 0000000..594c5d5
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/ContinueButton.swift
@@ -0,0 +1,58 @@
+//
+//  ContinueButton.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 03/03/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import LoopKitUI
+import SwiftUI
+
+struct ContinueButton: View {
+    let action: () -> Void
+    var text = LocalizedString("Continue", comment: "Text for continue button")
+    var loading: Binding<Bool> = .constant(false)
+    
+    init(loading: Binding<Bool>, text: String, action: @escaping () -> Void) {
+        self.loading = loading
+        self.text = text
+        self.action = action
+    }
+    
+    init(loading: Binding<Bool>, action: @escaping () -> Void) {
+        self.loading = loading
+        self.action = action
+    }
+    
+    init(text: String, action: @escaping () -> Void) {
+        self.text = text
+        self.action = action
+    }
+    
+    init(action: @escaping () -> Void) {
+        self.action = action
+    }
+    
+    var body: some View {
+        VStack(spacing: 0) {
+            Button(action: action) {
+                if loading.wrappedValue {
+                    ActivityIndicator(isAnimating: .constant(true), style: .medium)
+                } else {
+                    Text(text)
+                }
+            }
+            .buttonStyle(ActionButtonStyle())
+            .padding([.bottom, .horizontal])
+            .disabled(loading.wrappedValue)
+        }
+            .padding(.vertical, 10)
+            .background(Color(.secondarySystemGroupedBackground)
+            .shadow(radius: 5))
+    }
+}
+
+#Preview {
+    ContinueButton(action: {})
+}
diff --git a/DanaKit/DanaKitUI/Views/DanaKitReservoirView.swift b/DanaKit/DanaKitUI/Views/DanaKitReservoirView.swift
new file mode 100644
index 0000000..fd49899
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/DanaKitReservoirView.swift
@@ -0,0 +1,72 @@
+//
+//  DanaKitReservoirView.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 18/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import UIKit
+import LoopKitUI
+
+public final class DanaKitReservoirView: LevelHUDView, NibLoadable {
+    override public var orderPriority: HUDViewOrderPriority {
+        return 11
+    }
+    
+    @IBOutlet private weak var volumeLabel: UILabel!
+    
+    private var reservoirLevel: Double?
+    private var lastUpdateDate: Date?
+    
+    public class func instantiate() -> DanaKitReservoirView {
+        return nib().instantiate(withOwner: nil, options: nil)[0] as! DanaKitReservoirView
+    }
+
+    override public func awakeFromNib() {
+        super.awakeFromNib()
+
+        volumeLabel.isHidden = true
+    }
+    
+    private lazy var timeFormatter: DateFormatter = {
+        let formatter = DateFormatter()
+        formatter.dateStyle = .none
+        formatter.timeStyle = .short
+
+        return formatter
+    }()
+
+    private lazy var numberFormatter: NumberFormatter = {
+        let formatter = NumberFormatter()
+        formatter.numberStyle = .decimal
+        formatter.maximumFractionDigits = 0
+
+        return formatter
+    }()
+    
+    private func updateViews() {
+        if let reservoirLevel = reservoirLevel, let date = lastUpdateDate {
+            level = reservoirLevel / 300
+            let units = NSString(format: "%.0f", reservoirLevel)
+
+            let time = timeFormatter.string(from: date)
+            caption?.text = time
+            
+            volumeLabel.isHidden = false
+            volumeLabel.text = String(format: LocalizedString("%@U", comment: "Format string for reservoir volume. (1: The localized volume)"), units)
+
+            accessibilityValue = String(format: LocalizedString("%1$@ units remaining at %2$@", comment: "Accessibility format string for (1: localized volume)(2: time)"), units, time)
+        } else {
+            level = 0
+            volumeLabel.isHidden = true
+        }
+    }
+    
+    public func update(level: Double?, at date: Date) {
+        self.reservoirLevel = level
+        self.lastUpdateDate = date
+        updateViews()
+    }
+    
+}
diff --git a/DanaKit/DanaKitUI/Views/DanaKitReservoirView.xib b/DanaKit/DanaKitUI/Views/DanaKitReservoirView.xib
new file mode 100644
index 0000000..f7fd3e5
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/DanaKitReservoirView.xib
@@ -0,0 +1,78 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<document type="com.apple.InterfaceBuilder3.CocoaTouch.XIB" version="3.0" toolsVersion="22505" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" colorMatched="YES">
+    <device id="retina4_7" orientation="portrait" appearance="light"/>
+    <dependencies>
+        <deployment identifier="iOS"/>
+        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="22504"/>
+        <capability name="System colors in document resources" minToolsVersion="11.0"/>
+        <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
+    </dependencies>
+    <objects>
+        <placeholder placeholderIdentifier="IBFilesOwner" id="-1" userLabel="File's Owner"/>
+        <placeholder placeholderIdentifier="IBFirstResponder" id="-2" customClass="UIResponder"/>
+        <view contentMode="scaleToFill" id="Fgu-h0-N6n" customClass="DanaKitReservoirView" customModule="DanaKit" customModuleProvider="target">
+            <rect key="frame" x="0.0" y="0.0" width="42" height="44"/>
+            <autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMaxY="YES"/>
+            <subviews>
+                <view clipsSubviews="YES" contentMode="center" horizontalHuggingPriority="1000" verticalHuggingPriority="1000" translatesAutoresizingMaskIntoConstraints="NO" id="sSE-Jz-j8k">
+                    <rect key="frame" x="0.0" y="5" width="42" height="34"/>
+                    <subviews>
+                        <view contentMode="scaleAspectFit" horizontalHuggingPriority="1000" verticalHuggingPriority="1000" translatesAutoresizingMaskIntoConstraints="NO" id="UOD-1q-wHA" customClass="LevelMaskView" customModule="LoopKitUI">
+                            <rect key="frame" x="10" y="5" width="22" height="29"/>
+                            <constraints>
+                                <constraint firstAttribute="height" constant="29" id="gdu-Kp-mV8"/>
+                            </constraints>
+                            <userDefinedRuntimeAttributes>
+                                <userDefinedRuntimeAttribute type="image" keyPath="maskImage" value="reservoir_mask"/>
+                            </userDefinedRuntimeAttributes>
+                        </view>
+                        <imageView userInteractionEnabled="NO" contentMode="scaleAspectFit" horizontalHuggingPriority="1000" verticalHuggingPriority="1000" image="reservoir" translatesAutoresizingMaskIntoConstraints="NO" id="zcH-tM-6Pm">
+                            <rect key="frame" x="10" y="0.0" width="22" height="34"/>
+                            <constraints>
+                                <constraint firstAttribute="width" constant="22" id="27G-w5-6JR"/>
+                                <constraint firstAttribute="height" constant="34" id="iHS-ze-rHu"/>
+                            </constraints>
+                        </imageView>
+                    </subviews>
+                    <constraints>
+                        <constraint firstItem="UOD-1q-wHA" firstAttribute="centerX" secondItem="zcH-tM-6Pm" secondAttribute="centerX" id="2qh-7U-U7N"/>
+                        <constraint firstItem="UOD-1q-wHA" firstAttribute="width" secondItem="zcH-tM-6Pm" secondAttribute="width" id="PWW-DH-nVr"/>
+                        <constraint firstItem="zcH-tM-6Pm" firstAttribute="centerX" secondItem="sSE-Jz-j8k" secondAttribute="centerX" id="WDC-Uo-EVH"/>
+                        <constraint firstItem="UOD-1q-wHA" firstAttribute="top" secondItem="zcH-tM-6Pm" secondAttribute="top" constant="5" id="hKN-SU-NsT"/>
+                        <constraint firstItem="zcH-tM-6Pm" firstAttribute="centerY" secondItem="sSE-Jz-j8k" secondAttribute="centerY" id="orx-zV-Uqu"/>
+                        <constraint firstAttribute="height" constant="34" id="r0H-AZ-Q6h"/>
+                    </constraints>
+                </view>
+                <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="44U" textAlignment="center" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="g9J-nS-4US">
+                    <rect key="frame" x="11" y="14.5" width="20.5" height="11"/>
+                    <fontDescription key="fontDescription" type="system" weight="heavy" pointSize="9"/>
+                    <color key="textColor" systemColor="systemBlueColor"/>
+                    <nil key="highlightedColor"/>
+                </label>
+            </subviews>
+            <accessibility key="accessibilityConfiguration" label="Reservoir Volume">
+                <bool key="isElement" value="YES"/>
+            </accessibility>
+            <constraints>
+                <constraint firstItem="sSE-Jz-j8k" firstAttribute="width" secondItem="Fgu-h0-N6n" secondAttribute="width" id="587-U6-odp"/>
+                <constraint firstItem="sSE-Jz-j8k" firstAttribute="centerY" secondItem="Fgu-h0-N6n" secondAttribute="centerY" id="7BA-aC-c4z"/>
+                <constraint firstItem="g9J-nS-4US" firstAttribute="centerX" secondItem="sSE-Jz-j8k" secondAttribute="centerX" id="ADM-vN-GBJ"/>
+                <constraint firstItem="g9J-nS-4US" firstAttribute="centerY" secondItem="sSE-Jz-j8k" secondAttribute="centerY" constant="-2" id="NeR-1T-w3W"/>
+                <constraint firstItem="sSE-Jz-j8k" firstAttribute="centerX" secondItem="Fgu-h0-N6n" secondAttribute="centerX" id="VWt-od-IHu"/>
+            </constraints>
+            <freeformSimulatedSizeMetrics key="simulatedDestinationMetrics"/>
+            <connections>
+                <outlet property="levelMaskView" destination="UOD-1q-wHA" id="nsX-iI-myz"/>
+                <outlet property="volumeLabel" destination="g9J-nS-4US" id="5ki-bV-jMd"/>
+            </connections>
+            <point key="canvasLocation" x="-12.800000000000001" y="-136.28185907046478"/>
+        </view>
+    </objects>
+    <resources>
+        <image name="reservoir" width="28" height="44"/>
+        <image name="reservoir_mask" width="28" height="39"/>
+        <systemColor name="systemBlueColor">
+            <color red="0.0" green="0.47843137254901963" blue="1" alpha="1" colorSpace="custom" customColorSpace="sRGB"/>
+        </systemColor>
+    </resources>
+</document>
diff --git a/DanaKit/DanaKitUI/Views/Image.swift b/DanaKit/DanaKitUI/Views/Image.swift
new file mode 100644
index 0000000..093eb0a
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/Image.swift
@@ -0,0 +1,15 @@
+//
+//  Image.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 02/03/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+
+extension Image {
+    init(danaImage: String) {
+        self.init(uiImage: UIImage(named: danaImage, in: Bundle(for: DanaKitHUDProvider.self), compatibleWith: nil)!)
+    }
+}
diff --git a/DanaKit/DanaKitUI/Views/LoadingModal.swift b/DanaKit/DanaKitUI/Views/LoadingModal.swift
new file mode 100644
index 0000000..ef3ecfc
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/LoadingModal.swift
@@ -0,0 +1,60 @@
+//
+//  LoadingModal.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 03/01/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+// Source: https://blog.appdeco.ca/2020/07/27/create-progressview-modal-in-swiftui/
+
+import SwiftUI
+
+struct LoadingModal<Content>: View where Content: View {
+
+    @Environment(\.colorScheme) var colorScheme
+    
+    @Binding var isShowing: Bool
+    var text: String?
+    var content: () -> Content
+    
+    var body: some View {
+        GeometryReader { geometry in
+            ZStack(alignment: .center) {
+                content()
+                    .disabled(isShowing)
+                    .blur(radius: isShowing ? 2 : 0)
+                
+                if isShowing {
+                    // this Rectangle is a semi-transparent black overlay
+                    Rectangle()
+                        .fill(Color.black).opacity(isShowing ? 0.3 : 0)
+                        .edgesIgnoringSafeArea(.all)
+
+                    VStack(spacing: 24) {
+                        ProgressView()
+                        Text(text ?? LocalizedString("loading", comment: "Generic loading text")).font(.headline)
+                    }
+                    .frame(width: 250, height: 200)
+                    .background(colorScheme == .light ? Color.white : Color.black)
+                    .foregroundColor(Color.primary)
+                    .cornerRadius(16)
+                }
+            }
+        }
+    }
+}
+#Preview {
+    @State var loadingViewShowing = false
+    
+    return LoadingModal(isShowing: $loadingViewShowing) {
+            Button(action: {
+                loadingViewShowing = true
+                // Mock some network request or other task
+                DispatchQueue.main.asyncAfter(deadline: .now() + 3) {
+                    loadingViewShowing = false
+                }
+            }, label: {
+                Text("Tap Me!")
+            })
+        }
+}
diff --git a/DanaKit/DanaKitUI/Views/Onboarding/DanaIExplainationView.swift b/DanaKit/DanaKitUI/Views/Onboarding/DanaIExplainationView.swift
new file mode 100644
index 0000000..3e6a049
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/Onboarding/DanaIExplainationView.swift
@@ -0,0 +1,69 @@
+//
+//  DanaIExplaination.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 02/03/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+import LoopKitUI
+
+struct DanaIExplainationView: View {
+    @Environment(\.dismissAction) private var dismiss
+    @Environment(\.appName) var appName
+    
+    let nextAction: () -> Void
+    
+    var body: some View {
+        VStack(alignment: .leading) {
+            title
+
+            ScrollView {
+                VStack(alignment: .leading) {
+                    Text(String(format: LocalizedString("After setting up the insulin type and bolus speed, you will see all the found Dana pumps. Select the pump you want to link with %1$@.", comment: "General subtext for dana (1: appName)"), appName))
+                    
+                    HStack {
+                        Spacer()
+                        Image(danaImage: "pairing_request")
+                            .resizable()
+                            .scaledToFit()
+                            .frame(height: 150)
+                        Spacer()
+                    }
+                    .padding(.vertical, 10)
+                    
+                    Text(String(format: LocalizedString("During the pairing process, your Dana-i will show a pairing prompt while your iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i", comment: "Subtext for dana-i (1: appName)"), appName))
+                    
+                    Spacer()
+                }
+                .padding(.horizontal)
+            }
+            
+            ContinueButton(action: nextAction)
+        }
+        .edgesIgnoringSafeArea(.bottom)
+        .navigationBarHidden(false)
+        .toolbar {
+            ToolbarItem(placement: .navigationBarTrailing) {
+                Button(LocalizedString("Cancel", comment: "Cancel button title"), action: {
+                    self.dismiss()
+                })
+            }
+        }
+    }
+    
+    @ViewBuilder
+    private var title: some View {
+        Text(LocalizedString("Setting up Dana-i", comment: "Title for dana-i explaination"))
+            .font(.title)
+            .bold()
+            .padding(.horizontal)
+        Divider()
+            .padding(.bottom)
+    }
+}
+
+#Preview {
+    DanaIExplainationView(nextAction: {})
+}
diff --git a/DanaKit/DanaKitUI/Views/Onboarding/DanaKitDebugView.swift b/DanaKit/DanaKitUI/Views/Onboarding/DanaKitDebugView.swift
new file mode 100644
index 0000000..3728c9f
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/Onboarding/DanaKitDebugView.swift
@@ -0,0 +1,130 @@
+//
+//  DanaKitDebugView.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 18/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+
+struct DanaKitDebugView: View {
+    @Environment(\.openURL) var openURL
+    @ObservedObject var viewModel: DanaKitDebugViewModel
+    @State private var isSharePresented: Bool = false
+    
+    var body: some View {
+        VStack {
+            HStack {
+                Button("Scan", action: viewModel.scan)
+                    .frame(width: 100, height: 100)
+
+                Button("Connect", action: viewModel.connect)
+                    .disabled(viewModel.scannedDevices.count == 0)
+                    .frame(width: 100, height: 100)
+            }
+            
+            HStack {
+                Button("Do bolus", action: viewModel.bolusModal)
+                    .disabled(viewModel.isConnected == false)
+                    .frame(width: 100, height: 100)
+
+                Button("Stop bolus", action: viewModel.stopBolus)
+                    .disabled(viewModel.isConnected == false)
+                    .frame(width: 100, height: 100)
+            }
+            
+            HStack {
+                Button("temp basal", action: viewModel.tempBasalModal)
+                    .disabled(viewModel.isConnected == false)
+                    .frame(width: 100, height: 100)
+
+                Button("Stop temp basal", action: viewModel.stopTempBasal)
+                    .disabled(viewModel.isConnected == false)
+                    .frame(width: 100, height: 100)
+            }
+            
+            HStack {
+                Button("Basal", action: viewModel.basal)
+                    .disabled(viewModel.isConnected == false)
+                    .frame(width: 100, height: 100)
+
+                Button("Disconnect", action: viewModel.disconnect)
+                    .disabled(viewModel.isConnected == false)
+                    .frame(width: 100, height: 100)
+            }
+            
+            HStack {
+                Button(LocalizedString("Share Dana pump logs", comment: "DanaKit share logs")) {
+                    self.isSharePresented = true
+                }
+                .sheet(isPresented: $isSharePresented, onDismiss: { }, content: {
+                    ActivityViewController(activityItems: viewModel.getLogs())
+                })
+            }
+        }
+        .alert("Device found!",
+               isPresented: $viewModel.isPresentingScanAlert,
+               presenting: viewModel.messageScanAlert,
+               actions: { detail in
+                Button("No", action: {})
+                Button("Yes", action: viewModel.connect)
+               },
+               message: { detail in Text(detail) }
+        )
+        .alert("Error while starting scanning for devices...",
+               isPresented: $viewModel.isPresentingScanningErrorAlert,
+               presenting: viewModel.scanningErrorMessage,
+               actions: { detail in
+                Button("Oke", action: {})
+               },
+               message: { detail in Text(detail) }
+        )
+        .alert(LocalizedString("Error while connecting to device", comment: "Connection error message"),
+               isPresented: $viewModel.isConnectionError,
+               presenting: $viewModel.connectionErrorMessage,
+               actions: { detail in
+                Button("Oke", action: {})
+               },
+               message: { detail in Text(detail.wrappedValue ?? "") }
+        )
+        .alert("DEBUG: Bolus action",
+               isPresented: $viewModel.isPresentingBolusAlert,
+               actions: {
+                Button("No", action: {})
+                Button("Yes", action: viewModel.bolus)
+               },
+               message: { Text("Are you sure you want to bolus 5E?") }
+        )
+        .alert("DEBUG: Temp basal action",
+               isPresented: $viewModel.isPresentingTempBasalAlert,
+               actions: {
+                Button("No", action: {})
+                Button("Yes", action: viewModel.tempBasal)
+               },
+               message: { Text("Are you sure you want to set the temp basal to 200% for 1 hour?") }
+        )
+        .alert(
+            LocalizedString("Dana-RS v3 found!", comment: "Dana-RS v3 found"),
+           isPresented: $viewModel.isPromptingPincode
+        ) {
+            Button(LocalizedString("Cancel", comment: "Cancel button title"), role: .cancel) {
+                viewModel.cancelPinPrompt()
+            }
+            Button(LocalizedString("Oke", comment: "Dana-RS v3 pincode prompt oke"), action: {
+                viewModel.processPinPrompt()
+            })
+            
+            TextField(LocalizedString("Pin 1", comment: "Dana-RS v3 pincode prompt pin 1"), text: $viewModel.pin1)
+            TextField(LocalizedString("Pin 2", comment: "Dana-RS v3 pincode prompt pin 2"), text: $viewModel.pin2)
+        } message: {
+            if let message = $viewModel.pinCodePromptError.wrappedValue {
+                Text(message)
+            }
+        }
+    }
+}
+
+#Preview {
+    DanaKitDebugView(viewModel: DanaKitDebugViewModel())
+}
diff --git a/DanaKit/DanaKitUI/Views/Onboarding/DanaKitPumpSpeed.swift b/DanaKit/DanaKitUI/Views/Onboarding/DanaKitPumpSpeed.swift
new file mode 100644
index 0000000..4a3326c
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/Onboarding/DanaKitPumpSpeed.swift
@@ -0,0 +1,68 @@
+//
+//  DanaKitPumpSpeed.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 06/01/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+import LoopKitUI
+
+struct DanaKitPumpSpeed: View {
+    @Environment(\.dismissAction) private var dismiss
+    
+    let speedsAllowed = BolusSpeed.all()
+    @State var speedDefault = Int(BolusSpeed.speed12.rawValue)
+    
+    var next: ((BolusSpeed) -> Void)?
+    
+    var body: some View {
+        VStack(alignment: .leading) {
+            title
+            
+            VStack(alignment: .leading) {
+                Spacer()
+                ResizeablePicker(selection: $speedDefault,
+                                         data: self.speedsAllowed,
+                                 formatter: { BolusSpeed.init(rawValue: UInt8($0))!.format() })
+                Spacer()
+            }
+            .padding(.horizontal)
+            
+            ContinueButton(action: {
+                guard let speed = BolusSpeed(rawValue: UInt8($speedDefault.wrappedValue)) else {
+                    return
+                }
+                
+                next?(speed)
+            })
+        }
+        .edgesIgnoringSafeArea(.bottom)
+        .navigationBarHidden(false)
+        .toolbar {
+            ToolbarItem(placement: .navigationBarTrailing) {
+                Button(LocalizedString("Cancel", comment: "Cancel button title"), action: {
+                    self.dismiss()
+                })
+            }
+        }
+    }
+    
+    @ViewBuilder
+    private var title: some View {
+        Text(LocalizedString("Delivery speed", comment: "Title for delivery speed"))
+            .font(.title)
+            .bold()
+            .padding(.horizontal)
+        Text(LocalizedString("The Dana pumps support different delivery speeds. You can set it up here, but also in the settings menu", comment: "Dana delivery speed body"))
+            .fixedSize(horizontal: false, vertical: true)
+            .padding(.horizontal)
+        
+        Divider()
+    }
+}
+
+#Preview {
+    DanaKitPumpSpeed()
+}
diff --git a/DanaKit/DanaKitUI/Views/Onboarding/DanaKitScanView.swift b/DanaKit/DanaKitUI/Views/Onboarding/DanaKitScanView.swift
new file mode 100644
index 0000000..fffec4b
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/Onboarding/DanaKitScanView.swift
@@ -0,0 +1,104 @@
+//
+//  DanaKitScanView.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 28/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+import LoopKitUI
+
+struct DanaKitScanView: View {
+    @Environment(\.isPresented) var isPresented
+    @Environment(\.dismissAction) private var dismiss
+
+    @ObservedObject var viewModel: DanaKitScanViewModel
+    
+    var body: some View {
+        VStack(alignment: .leading) {
+            Text(LocalizedString("Found Dana-i/RS pumps", comment: "Title for DanaKitScanView"))
+                .font(.title)
+                .bold()
+                .padding(.horizontal)
+            
+            HStack(alignment: .center, spacing: 0) {
+                Text(!$viewModel.isConnecting.wrappedValue ?
+                        LocalizedString("Scanning", comment: "Scanning text") :
+                        LocalizedString("Connecting", comment: "Connecting text"))
+                Spacer()
+                ActivityIndicator(isAnimating: .constant(true), style: .medium)
+            }
+                .padding(.horizontal)
+            
+            Divider()
+            content
+        }
+        
+        .navigationBarHidden(false)
+        .toolbar {
+            ToolbarItem(placement: .navigationBarTrailing) {
+                Button(LocalizedString("Cancel", comment: "Cancel button title"), action: {
+                    viewModel.stopScan()
+                    self.dismiss()
+                })
+            }
+        }
+        .onChange(of: isPresented) { newValue in
+            if !newValue {
+                viewModel.stopScan()
+            }
+        }
+        .alert(LocalizedString("Error while connecting to device", comment: "Connection error message"),
+               isPresented: $viewModel.isConnectionError,
+               presenting: $viewModel.connectionErrorMessage,
+               actions: { detail in
+                Button(LocalizedString("Oke", comment: "Dana-RS v3 pincode prompt oke"), action: {})
+               },
+               message: { detail in Text(detail.wrappedValue ?? "") }
+        )
+        .alert(
+            LocalizedString("Dana-RS v3 found!", comment: "Dana-RS v3 found"),
+           isPresented: $viewModel.isPromptingPincode
+        ) {
+            Button(LocalizedString("Cancel", comment: "Cancel button title"), role: .cancel) {
+                viewModel.cancelPinPrompt()
+            }
+            Button(LocalizedString("Oke", comment: "Dana-RS v3 pincode prompt oke")) {
+                viewModel.processPinPrompt()
+            }
+            
+            TextField(LocalizedString("Pin 1", comment: "Dana-RS v3 pincode prompt pin 1"), text: $viewModel.pin1)
+            TextField(LocalizedString("Pin 2", comment: "Dana-RS v3 pincode prompt pin 2"), text: $viewModel.pin2)
+        } message: {
+            if let message = $viewModel.pinCodePromptError.wrappedValue {
+                Text(message)
+            }
+        }
+    }
+    
+    @ViewBuilder
+    private var content: some View {
+        List ($viewModel.scannedDevices) { $result in
+            Button(action: { viewModel.connect($result.wrappedValue) }) {
+                HStack {
+                    Text($result.name.wrappedValue)
+                    Spacer()
+                    if !$viewModel.isConnecting.wrappedValue {
+                        NavigationLink.empty
+                    } else if $result.name.wrappedValue == viewModel.connectingTo {
+                        ActivityIndicator(isAnimating: .constant(true), style: .medium)
+                    }
+                }
+                .padding(.horizontal)
+            }
+            .disabled($viewModel.isConnecting.wrappedValue)
+            .buttonStyle(.plain)
+        }
+        .listStyle(.plain)
+    }
+}
+
+#Preview {
+    DanaKitScanView(viewModel: DanaKitScanViewModel(nextStep: {}))
+}
diff --git a/DanaKit/DanaKitUI/Views/Onboarding/DanaKitSetupCompleteView.swift b/DanaKit/DanaKitUI/Views/Onboarding/DanaKitSetupCompleteView.swift
new file mode 100644
index 0000000..55b2686
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/Onboarding/DanaKitSetupCompleteView.swift
@@ -0,0 +1,58 @@
+//
+//  DanaKitSetupCompleteView.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 06/01/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+import LoopKitUI
+
+struct DanaKitSetupCompleteView: View {
+    var finish: (() -> Void)?
+    var friendlyPumpModelName: String
+    var imageName: String
+    
+    var body: some View {
+        VStack(alignment: .leading) {
+            title
+            VStack(alignment: .leading) {
+                Text(LocalizedString("Your ", comment: "Dana setup complete p1") + friendlyPumpModelName + LocalizedString(" is ready to be used!", comment: "Dana setup complete p2"))
+                
+                HStack {
+                    Spacer()
+                    Image(danaImage: imageName)
+                        .resizable()
+                        .scaledToFit()
+                        .frame(height: 200)
+                    Spacer()
+                }
+                .padding(.vertical)
+                
+                Text(LocalizedString("Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor", comment: "Dana setup SMB setting"))
+            }
+            .padding(.horizontal)
+            Spacer()
+            
+            ContinueButton(text: LocalizedString("Finish", comment: "Text for finish button"), action: { finish?() })
+        }
+        .edgesIgnoringSafeArea(.bottom)
+        .navigationBarHidden(false)
+    }
+    
+    @ViewBuilder
+    private var title: some View {
+        Text(LocalizedString("Setup Complete", comment: "Title for setup complete"))
+            .font(.title)
+            .bold()
+            .padding(.horizontal)
+        
+        Divider()
+            .padding(.bottom)
+    }
+}
+
+#Preview {
+    DanaKitSetupCompleteView(finish: {}, friendlyPumpModelName: "Dana-i", imageName: "danai")
+}
diff --git a/DanaKit/DanaKitUI/Views/Onboarding/DanaKitSetupView.swift b/DanaKit/DanaKitUI/Views/Onboarding/DanaKitSetupView.swift
new file mode 100644
index 0000000..7be3fd7
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/Onboarding/DanaKitSetupView.swift
@@ -0,0 +1,97 @@
+//
+//  DanaKitSetupView.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 26/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+import LoopKit
+import LoopKitUI
+
+typealias DebugFunction = () -> Void
+struct DanaKitSetupView: View {
+    @Environment(\.dismissAction) private var dismiss
+    
+    let nextAction: (Int) -> Void
+    let debugAction: DebugFunction?
+    
+    @State var value: Int = 2
+    private var currentValue: Binding<Int> {
+        Binding(
+            get: { value },
+            set: { newValue in
+                self.value = newValue
+            }
+       )
+    }
+    
+    private let allowedOptions: [Int] = [1, 2]
+    
+    var body: some View {
+        VStack(alignment: .leading) {
+            title
+                .onLongPressGesture(minimumDuration: 2) {
+                    didLongPressOnTitle()
+                }
+            
+            VStack(alignment: .leading) {
+                Spacer()
+                
+                ResizeablePicker(selection: currentValue,
+                                 data: self.allowedOptions,
+                                 formatter: { formatter($0) })
+                
+                Spacer()
+            }
+            .padding(.horizontal)
+            
+            ContinueButton(action: { nextAction(value) })
+        }
+        .edgesIgnoringSafeArea(.bottom)
+        .navigationBarHidden(false)
+        .toolbar {
+            ToolbarItem(placement: .navigationBarTrailing) {
+                Button(LocalizedString("Cancel", comment: "Cancel button title"), action: {
+                    self.dismiss()
+                })
+            }
+        }
+    }
+
+    @ViewBuilder
+    private var title: some View {
+        Text(LocalizedString("Dana-i/RS Setup", comment: "Title for DanaKitSetupView"))
+            .font(.largeTitle)
+            .bold()
+            .padding(.horizontal)
+        Text(LocalizedString("Select your pump", comment: "Subtitle for DanaKitSetupView"))
+            .fixedSize(horizontal: false, vertical: true)
+            .padding(.horizontal)
+        
+        Divider()
+    }
+    
+    private func formatter(_ index: Int) -> String {
+        switch (index) {
+        case 0:
+            // UNSUPPORTED ATM
+            return LocalizedString("DanaRS-v1", comment: "danaRS v1 option text for DanaKitSetupView")
+        case 1:
+            return LocalizedString("DanaRS-v3", comment: "danaRS v3 option text for DanaKitSetupView")
+        case 2:
+            return LocalizedString("Dana-i", comment: "dana-i option text for DanaKitSetupView")
+        default:
+            return ""
+        }
+    }
+    
+    private func didLongPressOnTitle() {
+        self.debugAction?()
+    }
+}
+
+#Preview {
+    DanaKitSetupView(nextAction: { _ in }, debugAction: nil)
+}
diff --git a/DanaKit/DanaKitUI/Views/Onboarding/DanaRSv1Explaination.swift b/DanaKit/DanaKitUI/Views/Onboarding/DanaRSv1Explaination.swift
new file mode 100644
index 0000000..24c1c86
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/Onboarding/DanaRSv1Explaination.swift
@@ -0,0 +1,72 @@
+//
+//  DanaRSv1Explaination.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 02/03/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+import LoopKitUI
+
+struct DanaRSv1Explaination: View {
+    @Environment(\.dismissAction) private var dismiss
+    @Environment(\.appName) private var appName
+    
+    let nextAction: () -> Void
+    
+    var body: some View {
+        VStack(alignment: .leading) {
+            title
+            
+            ScrollView {
+                VStack(alignment: .leading) {
+                    Text(LocalizedString("Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it", comment: "check password text for danars v1"))
+                        .padding(.bottom)
+                    
+                    Text(String(format: LocalizedString("After setting up the insulin type and bolus speed, you will see all the found Dana pumps. Select the pump you want to link with %1$@.", comment: "General subtext for dana (1: appName)"), appName))
+                    
+                    HStack {
+                        Spacer()
+                        Image(danaImage: "pairing_request")
+                            .resizable()
+                            .scaledToFit()
+                            .frame(height: 150)
+                        Spacer()
+                    }
+                    .padding(.vertical, 10)
+                    
+                    Text(String(format: LocalizedString("During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, %1$@ is ready to communicate with your DanaRS v1", comment: "Subtext for danars v1 (1: appName)"), appName))
+                    
+                    Spacer()
+                }
+                .padding(.horizontal)
+            }
+            
+            ContinueButton(action: nextAction)
+        }
+        .edgesIgnoringSafeArea(.bottom)
+        .navigationBarHidden(false)
+        .toolbar {
+            ToolbarItem(placement: .navigationBarTrailing) {
+                Button(LocalizedString("Cancel", comment: "Cancel button title"), action: {
+                    self.dismiss()
+                })
+            }
+        }
+    }
+    
+    @ViewBuilder
+    private var title: some View {
+        Text(LocalizedString("Setting up DanaRS v1", comment: "Title for danars v1 explaination"))
+            .font(.title)
+            .bold()
+            .padding(.horizontal)
+        Divider()
+            .padding(.bottom)
+    }
+}
+
+#Preview {
+    DanaRSv1Explaination(nextAction: {})
+}
diff --git a/DanaKit/DanaKitUI/Views/Onboarding/DanaRSv1Password.swift b/DanaKit/DanaKitUI/Views/Onboarding/DanaRSv1Password.swift
new file mode 100644
index 0000000..0113ece
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/Onboarding/DanaRSv1Password.swift
@@ -0,0 +1,57 @@
+//
+//  DanaRSv1Password.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 03/03/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+import LoopKitUI
+import Combine
+
+struct DanaRSv1Password: View {
+    @Environment(\.dismissAction) private var dismiss
+    
+    @State var password: UInt16?
+    
+    let nextAction: (UInt16) -> Void
+    
+    var body: some View {
+        VStack(alignment: .leading) {
+            VStack(alignment: .leading) {
+                title
+                TextField(LocalizedString("Fill in password", comment: "password placeholder danars v1"), value: $password, format: .number)
+                    .keyboardType(.numberPad)
+                    .padding(.horizontal)
+                Spacer()
+            }
+            .padding(.horizontal)
+            
+            ContinueButton(action: { nextAction(password ?? 0) })
+        }
+        .edgesIgnoringSafeArea(.bottom)
+        .navigationBarHidden(false)
+        .toolbar {
+            ToolbarItem(placement: .navigationBarTrailing) {
+                Button(LocalizedString("Cancel", comment: "Cancel button title"), action: {
+                    self.dismiss()
+                })
+            }
+        }
+    }
+    
+    @ViewBuilder
+    private var title: some View {
+        Text(LocalizedString("Password DanaRS v1", comment: "Title for danars v1 password"))
+            .font(.title)
+            .bold()
+            .padding(.horizontal)
+        Divider()
+            .padding(.bottom)
+    }
+}
+
+#Preview {
+    DanaRSv1Password(nextAction: { _ in })
+}
diff --git a/DanaKit/DanaKitUI/Views/Onboarding/DanaRSv3Explaination.swift b/DanaKit/DanaKitUI/Views/Onboarding/DanaRSv3Explaination.swift
new file mode 100644
index 0000000..a93ed57
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/Onboarding/DanaRSv3Explaination.swift
@@ -0,0 +1,69 @@
+//
+//  DanaRSv3Explaination.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 02/03/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+import LoopKitUI
+
+struct DanaRSv3Explaination: View {
+    @Environment(\.dismissAction) private var dismiss
+    @Environment(\.appName) var appName
+
+    let nextAction: () -> Void
+    
+    var body: some View {
+        VStack(alignment: .leading) {
+            title
+            
+            ScrollView {
+                VStack(alignment: .leading) {
+                    Text(String(format: LocalizedString("After setting up the insulin type and bolus speed, you will see all the found Dana pumps. Select the pump you want to link with %1$@.", comment: "General subtext for dana (1: appName)"), appName))
+                    
+                    HStack {
+                        Spacer()
+                        Image(danaImage: "pairing_request")
+                            .resizable()
+                            .scaledToFit()
+                            .frame(height: 150)
+                        Spacer()
+                    }
+                    .padding(.vertical, 10)
+                    
+                    Text(String(format: LocalizedString("During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, %1$@ is ready to communicate with your DanaRS v3", comment: "Subtext for danars v3 (1: appName)"), appName))
+                    
+                    Spacer()
+                }
+                .padding(.horizontal)
+            }
+            
+            ContinueButton(action: nextAction)
+        }
+        .edgesIgnoringSafeArea(.bottom)
+        .navigationBarHidden(false)
+        .toolbar {
+            ToolbarItem(placement: .navigationBarTrailing) {
+                Button(LocalizedString("Cancel", comment: "Cancel button title"), action: {
+                    self.dismiss()
+                })
+            }
+        }
+    }
+    
+    @ViewBuilder
+    private var title: some View {
+        Text(LocalizedString("Setting up DanaRS v3", comment: "Title for danars v3 explaination"))
+            .font(.title)
+            .bold()
+            .padding(.horizontal)
+        Divider()
+            .padding(.bottom)
+    }
+}
+
+#Preview {
+    DanaRSv3Explaination(nextAction: {})
+}
diff --git a/DanaKit/DanaKitUI/Views/Onboarding/InsulinTypeConfirmation.swift b/DanaKit/DanaKitUI/Views/Onboarding/InsulinTypeConfirmation.swift
new file mode 100644
index 0000000..cb7e97c
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/Onboarding/InsulinTypeConfirmation.swift
@@ -0,0 +1,75 @@
+//
+//  InsulinTypeConfirmation.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 28/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+import LoopKit
+import LoopKitUI
+
+struct InsulinTypeConfirmation: View {
+    @Environment(\.dismissAction) private var dismiss
+    
+    @State private var insulinType: InsulinType?
+    private var supportedInsulinTypes: [InsulinType]
+    private var didConfirm: (InsulinType) -> Void
+    
+    init(initialValue: InsulinType, supportedInsulinTypes: [InsulinType], didConfirm: @escaping (InsulinType) -> Void) {
+        self._insulinType = State(initialValue: initialValue)
+        self.supportedInsulinTypes = supportedInsulinTypes
+        self.didConfirm = didConfirm
+    }
+    
+    var body: some View {
+        VStack(alignment: .leading) {
+            title
+            
+            ScrollView {
+                InsulinTypeChooser(insulinType: $insulinType, supportedInsulinTypes: supportedInsulinTypes)
+                    .padding(.horizontal)
+            }
+            
+            Spacer()
+            
+            ContinueButton(action: {
+                guard let insulinType = insulinType else {
+                    return
+                }
+                didConfirm(insulinType)
+            })
+        }
+        .edgesIgnoringSafeArea(.bottom)
+        .navigationBarHidden(false)
+        .toolbar {
+            ToolbarItem(placement: .navigationBarTrailing) {
+                Button(LocalizedString("Cancel", comment: "Cancel button title"), action: {
+                    self.dismiss()
+                })
+            }
+        }
+    }
+    
+    @ViewBuilder
+    private var title: some View {
+        Text(LocalizedString("Select insulin type", comment: "Title for insulin type"))
+            .font(.title)
+            .bold()
+            .padding([.bottom, .horizontal])
+        
+        Text(LocalizedString("Select the type of insulin that you will be using in this pump.", comment: "Title text for insulin type confirmation page"))
+            .fixedSize(horizontal: false, vertical: true)
+            .padding(.horizontal)
+        
+        Divider()
+            .padding(.vertical)
+    }
+}
+
+struct InsulinTypeConfirmation_Previews: PreviewProvider {
+    static var previews: some View {
+        InsulinTypeConfirmation(initialValue: .novolog, supportedInsulinTypes: InsulinType.allCases, didConfirm: { (newType) in })
+    }
+}
diff --git a/DanaKit/DanaKitUI/Views/ReservoirView.swift b/DanaKit/DanaKitUI/Views/ReservoirView.swift
new file mode 100644
index 0000000..ba2316e
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/ReservoirView.swift
@@ -0,0 +1,62 @@
+//
+//  ReservoirView.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 17/01/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+
+struct ReservoirView: View {
+
+    let reservoirLevel: Double
+    let fillColor: Color
+
+    // mask height to reservoir height ratio
+    let maskHeightRatio = 0.887
+
+    let reservoirAspectRatio = 28.0 / 44.0
+
+    func reservoirSize(in frame: CGSize) -> CGSize {
+        let frameAspectRatio = frame.width / frame.height
+        if frameAspectRatio > reservoirAspectRatio {
+            return CGSize(
+                width: frame.height * reservoirAspectRatio,
+                height: frame.height)
+        } else {
+            return CGSize(
+                width: frame.width,
+                height: frame.width / reservoirAspectRatio)
+        }
+    }
+
+    var body: some View {
+        ZStack(alignment: Alignment(horizontal: .center, vertical: .center)) {
+            GeometryReader { geometry in
+                let reservoirSize = reservoirSize(in: geometry.size)
+                let frameCenterX = geometry.size.width / 2
+                let frameCenterY = geometry.size.height / 2
+                let maskHeight = reservoirSize.height * maskHeightRatio
+                let fillHeight = maskHeight * (reservoirLevel / 300)
+                let maskOffset = (reservoirSize.height - maskHeight) / 2
+
+                Rectangle()
+                    .fill(fillColor)
+                    .mask(
+                        Image(danaImage: "reservoir_mask")
+                            .resizable()
+                            .scaledToFit()
+                            .frame(height: maskHeight)
+                            .position(x:frameCenterX, y:frameCenterY+maskOffset)
+                    )
+                    .mask(
+                        Rectangle().path(in: CGRect(x:0, y: frameCenterY+maskHeight/2 - fillHeight + maskOffset, width: geometry.size.width, height: fillHeight))
+                    )
+            }
+            Image(danaImage: "reservoir")
+                .resizable()
+                .scaledToFit()
+        }
+    }
+}
diff --git a/DanaKit/DanaKitUI/Views/Settings/BasalProfileView.swift b/DanaKit/DanaKitUI/Views/Settings/BasalProfileView.swift
new file mode 100644
index 0000000..94b2d3c
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/Settings/BasalProfileView.swift
@@ -0,0 +1,91 @@
+//
+//  BasalProfileView.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 05/03/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+import LoopKitUI
+
+struct BasalProfileView: View {
+    @Environment(\.presentationMode) var presentationMode: Binding<PresentationMode>
+    @Environment(\.appName) var appName
+    
+    private var currentValue: Binding<Int> {
+        Binding(
+            get: { Int(viewModel.basalProfileNumber) },
+            set: { newValue in
+                viewModel.basalProfileNumber = UInt8(newValue)
+            }
+       )
+    }
+    
+    let allowedOptions = Array(0..<4)
+    @ObservedObject var viewModel: BasalProfileViewModel
+    
+    
+    var body: some View {
+        VStack(alignment: .leading) {
+            titleView
+            
+            VStack(alignment: .leading) {
+                Spacer()
+                
+                ResizeablePicker(selection: currentValue,
+                                 data: self.allowedOptions,
+                                 formatter: { formatter($0) })
+                    .padding(.horizontal)
+                
+                Spacer()
+                
+                
+            }
+            .padding(.horizontal)
+            
+            ContinueButton(loading: $viewModel.loading, action: {
+                viewModel.basalProfileNumberChanged() {
+                    // Go back action
+                    presentationMode.wrappedValue.dismiss()
+                }
+            })
+        }
+        .edgesIgnoringSafeArea(.bottom)
+        .navigationBarHidden(false)
+    }
+    
+    @ViewBuilder
+    private var titleView: some View {
+        Text(LocalizedString("Basal profile", comment: "Text for Basal profile"))
+            .font(.title)
+            .bold()
+            .padding(.horizontal)
+        
+        Text(String(format: LocalizedString("Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@", comment: "Description for basal profile number (1: appName)"), appName))
+            .fixedSize(horizontal: false, vertical: true)
+            .padding(.horizontal)
+        
+        Divider()
+    }
+    
+    private func didChange() {
+        
+    }
+    
+    private func formatter(_ index: Int) -> String {
+        if index == 0 {
+            return "A"
+        } else if index == 1 {
+            return "B"
+        } else if index == 2 {
+            return "C"
+        } else {
+            return "D"
+        }
+    }
+}
+
+#Preview {
+    BasalProfileView(viewModel: BasalProfileViewModel(nil))
+}
diff --git a/DanaKit/DanaKitUI/Views/Settings/DanaKitSettingsPumpSpeed.swift b/DanaKit/DanaKitUI/Views/Settings/DanaKitSettingsPumpSpeed.swift
new file mode 100644
index 0000000..5e9dcc9
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/Settings/DanaKitSettingsPumpSpeed.swift
@@ -0,0 +1,66 @@
+//
+//  DanaKitSettingsPumpSpeed.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 17/01/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+import LoopKitUI
+
+struct DanaKitSettingsPumpSpeed: View {
+    @Environment(\.presentationMode) var presentationMode: Binding<PresentationMode>
+    
+    let speedsAllowed = BolusSpeed.all()
+    @State var value: Int
+    
+    private var currentValue: Binding<Int> {
+        Binding(
+            get: { value },
+            set: { newValue in
+                self.value = newValue
+            }
+       )
+    }
+    
+    var didChange: ((BolusSpeed) -> Void)?
+    
+    var body: some View {
+        VStack(alignment: .leading) {
+            VStack(alignment: .leading) {
+                title
+                Text(LocalizedString("The Dana pumps support different delivery speeds. You can set it up here", comment: "Dana delivery speed body")).fixedSize(horizontal: false, vertical: true)
+                
+                Divider()
+                Spacer()
+                ResizeablePicker(selection: currentValue,
+                                         data: self.speedsAllowed,
+                                         formatter: { BolusSpeed.init(rawValue: UInt8($0))!.format() })
+                
+                Spacer()
+            }
+            .padding(.horizontal)
+            
+            ContinueButton(action: {
+                didChange?(BolusSpeed(rawValue: UInt8(value))!)
+                
+                // Go back action
+                presentationMode.wrappedValue.dismiss()
+            })
+        }
+        .edgesIgnoringSafeArea(.bottom)
+        .navigationBarHidden(false)
+    }
+    
+    @ViewBuilder
+    private var title: some View {
+        Text(LocalizedString("Delivery speed", comment: "Title for delivery speed"))
+            .font(.title)
+            .bold()
+    }
+}
+
+#Preview {
+    DanaKitSettingsPumpSpeed(value: 0)
+}
diff --git a/DanaKit/DanaKitUI/Views/Settings/DanaKitSettingsView.swift b/DanaKit/DanaKitUI/Views/Settings/DanaKitSettingsView.swift
new file mode 100644
index 0000000..15a8110
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/Settings/DanaKitSettingsView.swift
@@ -0,0 +1,339 @@
+//
+//  DanaKitSettingsView.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 03/01/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+import LoopKit
+import LoopKitUI
+
+struct DanaKitSettingsView: View {
+    @Environment(\.openURL) private var openURL
+    @Environment(\.guidanceColors) private var guidanceColors
+    @Environment(\.dismissAction) private var dismiss
+    @Environment(\.insulinTintColor) var insulinTintColor
+    
+    @ObservedObject var viewModel: DanaKitSettingsViewModel
+    @State private var isSharePresented: Bool = false
+    
+    var supportedInsulinTypes: [InsulinType]
+    var imageName: String
+    
+    var removePumpManagerActionSheet: ActionSheet {
+        ActionSheet(title: Text(LocalizedString("Remove Pump", comment: "Title for Dana-i/RS PumpManager deletion action sheet.")),
+                    message: Text(LocalizedString("Are you sure you want to stop using Dana-i/RS?", comment: "Message for Dana-i/RS PumpManager deletion action sheet")),
+                    buttons: [
+                        .destructive(Text(LocalizedString("Delete pump", comment: "Button text to confirm Dana-i/RS PumpManager deletion"))) {
+                            viewModel.stopUsingDana()
+                        },
+                        .cancel()
+        ])
+    }
+    
+    var syncPumpTime: ActionSheet {
+        ActionSheet(title: Text(LocalizedString("Time Change Detected", comment: "Title for pod sync time action sheet.")),
+                    message: Text(LocalizedString("The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?", comment: "Message for pod sync time action sheet")), buttons: [
+            .default(Text(LocalizedString("Yes, Sync to Current Time", comment: "Button text to confirm pump time sync"))) {
+                self.viewModel.syncPumpTime()
+            },
+            .cancel(Text(LocalizedString("No, Keep Pump As Is", comment: "Button text to cancel pump time sync")))
+        ])
+    }
+    
+    var silentTone: ActionSheet {
+        ActionSheet(title: Text(LocalizedString("Toggle silent tone?", comment: "Title for silent tone action sheet")),
+                    buttons: [
+                        .default(Text(viewModel.silentTone ?
+                                      LocalizedString("Yes, Disable silent tones", comment: "Button text to disable silent tone") :
+                                      LocalizedString("Yes, Enable silent tones", comment: "Button text to enable silent tone")
+                                 )) {
+                            self.viewModel.toggleSilentTone()
+                        },
+                        .cancel(Text(LocalizedString("No, Keep as is", comment: "Button text to cancel silent tone")))
+                    ])
+    }
+    
+    var body: some View {
+        List {
+            Section() {
+                HStack(){
+                    Spacer()
+                    Image(uiImage: UIImage(named: imageName, in: Bundle(for: DanaKitHUDProvider.self), compatibleWith: nil)!)
+                        .resizable()
+                        .scaledToFit()
+                        .padding(.horizontal)
+                        .frame(height: 200)
+                    Spacer()
+                }
+                
+                HStack(alignment: .top) {
+                    deliveryStatus
+                    Spacer()
+                    reservoirStatus
+                }
+                .padding(.bottom, 5)
+                
+                if viewModel.showPumpTimeSyncWarning {
+                    VStack(alignment: .leading, spacing: 4) {
+                        Text(LocalizedString("Time Change Detected", comment: "title for time change detected notice"))
+                            .font(Font.subheadline.weight(.bold))
+                        Text(LocalizedString("The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump.", comment: "description for time change detected notice"))
+                            .font(Font.footnote.weight(.semibold))
+                    }.padding(.vertical, 8)
+                }
+            }
+            
+            Section {
+                Button(action: {
+                    viewModel.suspendResumeButtonPressed()
+                }) {
+                    HStack {
+                        Text($viewModel.basalButtonText.wrappedValue)
+                        Spacer()
+                        if viewModel.isUpdatingPumpState {
+                            ActivityIndicator(isAnimating: .constant(true), style: .medium)
+                        }
+                    }
+                }
+                .disabled(viewModel.isUpdatingPumpState || viewModel.isSyncing)
+                
+                Button(action: {
+                    viewModel.syncData()
+                }) {
+                    HStack {
+                        Text(LocalizedString("Sync pump data", comment: "DanaKit sync pump"))
+                        Spacer()
+                        if viewModel.isSyncing {
+                            ActivityIndicator(isAnimating: .constant(true), style: .medium)
+                        }
+                    }
+                }
+                .disabled(viewModel.isUpdatingPumpState || viewModel.isSyncing)
+                
+                HStack {
+                    Text(LocalizedString("Last sync", comment: "Text for last sync")).foregroundColor(Color.primary)
+                    Spacer()
+                    Text(String(viewModel.formatDate(viewModel.lastSync)))
+                        .foregroundColor(.secondary)
+                }
+                
+                if (viewModel.reservoirAge != nil) {
+                    HStack {
+                        Text(LocalizedString("Reservoir age", comment: "Text for reservoir age")).foregroundColor(Color.primary)
+                        Spacer()
+                        Text(String(viewModel.reservoirAge!))
+                            .foregroundColor(.secondary)
+                    }
+                }
+                
+                if (viewModel.cannulaAge != nil) {
+                    HStack {
+                        Text(LocalizedString("Cannula age", comment: "Text for cannula age")).foregroundColor(Color.primary)
+                        Spacer()
+                        Text(String(viewModel.cannulaAge!))
+                            .foregroundColor(.secondary)
+                    }
+                }
+            }
+            
+            Section(header: SectionHeader(label: LocalizedString("Configuration", comment: "The title of the configuration section in DanaKit settings")))
+            {
+                NavigationLink(destination: InsulinTypeView(initialValue: viewModel.insulineType, supportedInsulinTypes: supportedInsulinTypes, didConfirm: viewModel.didChangeInsulinType)) {
+                    HStack {
+                        Text(LocalizedString("Insulin Type", comment: "Text for confidence reminders navigation link")).foregroundColor(Color.primary)
+                        Spacer()
+                        Text(viewModel.insulineType.brandName)
+                            .foregroundColor(.secondary)
+                        }
+                }
+                NavigationLink(destination: DanaKitSettingsPumpSpeed(value: Int(viewModel.bolusSpeed.rawValue), didChange: viewModel.didBolusSpeedChanged)) {
+                    HStack {
+                        Text(LocalizedString("Delivery speed", comment: "Title for delivery speed")).foregroundColor(Color.primary)
+                        Spacer()
+                        Text(viewModel.bolusSpeed.format())
+                            .foregroundColor(.secondary)
+                        }
+                }
+                NavigationLink(destination: viewModel.basalProfileView) {
+                    HStack {
+                        Text(LocalizedString("Basal profile", comment: "Text for Basal profile")).foregroundColor(Color.primary)
+                        Spacer()
+                        Text(viewModel.transformBasalProfile(viewModel.basalProfileNumber))
+                            .foregroundColor(.secondary)
+                    }
+                }
+                NavigationLink(destination: viewModel.userOptionsView) {
+                    Text(LocalizedString("User options", comment: "Title for user options"))
+                        .foregroundColor(Color.primary)
+                }
+            }
+            
+            Section(header: SectionHeader(label: LocalizedString("Pump information", comment: "The title of the pump information section in DanaKit settings"))) {
+                HStack {
+                    Text(LocalizedString("Pump name", comment: "Text for Dana pump name")).foregroundColor(Color.primary)
+                    Spacer()
+                    Text(viewModel.deviceName ?? "")
+                        .foregroundColor(.secondary)
+                }
+                .onLongPressGesture(perform: {
+                    viewModel.showingSilentTone = true
+                })
+                .actionSheet(isPresented: $viewModel.showingSilentTone) {
+                    silentTone
+                }
+                HStack {
+                    Text(LocalizedString("Hardware model", comment: "Text for hardware model")).foregroundColor(Color.primary)
+                    Spacer()
+                    Text(String(viewModel.hardwareModel ?? 0))
+                        .foregroundColor(.secondary)
+                }
+                HStack {
+                    Text(LocalizedString("Firmware version", comment: "Text for firmware version")).foregroundColor(Color.primary)
+                    Spacer()
+                    Text(String(viewModel.firmwareVersion ?? 0))
+                        .foregroundColor(.secondary)
+                }
+                HStack {
+                    Text(LocalizedString("Battery level", comment: "Text for Battery level")).foregroundColor(Color.primary)
+                    Spacer()
+                    Text(String(viewModel.batteryLevel) + "%")
+                        .foregroundColor(.secondary)
+                }
+                HStack {
+                    Text(LocalizedString("Pump time", comment: "Text for pump time")).foregroundColor(Color.primary)
+                    Spacer()
+                    if viewModel.showPumpTimeSyncWarning {
+                        Image(systemName: "clock.fill")
+                            .foregroundColor(guidanceColors.warning)
+                    }
+                    Text(String(viewModel.formatDate(viewModel.pumpTime)))
+                        .foregroundColor(viewModel.showPumpTimeSyncWarning ? guidanceColors.warning : .secondary)
+                }
+                
+                Button(action: {
+                    viewModel.showingTimeSyncConfirmation = true
+                }) {
+                    Text(LocalizedString("Sync Pump time", comment: "Label for syncing the time on the pump"))
+                        .foregroundColor(.accentColor)
+                }
+                .disabled(viewModel.isSyncing)
+                .actionSheet(isPresented: $viewModel.showingTimeSyncConfirmation) {
+                    syncPumpTime
+                }
+                
+                Button(LocalizedString("Share Dana pump logs", comment: "DanaKit share logs")) {
+                    self.isSharePresented = true
+                }
+                .sheet(isPresented: $isSharePresented, onDismiss: { }, content: {
+                    ActivityViewController(activityItems: viewModel.getLogs())
+                })
+            }
+            
+            Section() {
+                Button(action: {
+                    viewModel.showingDeleteConfirmation = true
+                }) {
+                    Text(LocalizedString("Delete Pump", comment: "Label for PumpManager deletion button"))
+                        .foregroundColor(guidanceColors.critical)
+                }
+                .actionSheet(isPresented: $viewModel.showingDeleteConfirmation) {
+                    removePumpManagerActionSheet
+                }
+            }
+        }
+        .listStyle(InsetGroupedListStyle())
+        .navigationBarItems(trailing: doneButton)
+        .navigationBarTitle(viewModel.pumpModel)
+    }
+    
+    private var doneButton: some View {
+        Button("Done", action: {
+            dismiss()
+        })
+    }
+    
+    var reservoirStatus: some View {
+        VStack(alignment: .leading, spacing: 5) {
+            Text(LocalizedString("Insulin Remaining", comment: "Header for insulin remaining on pod settings screen"))
+                .foregroundColor(Color(UIColor.secondaryLabel))
+            if let reservoirLevel = viewModel.reservoirLevel {
+                HStack {
+                    ReservoirView(reservoirLevel: reservoirLevel, fillColor: reservoirColor(reservoirLevel))
+                        .frame(width: 23, height: 32)
+                    Text(viewModel.reservoirText(for: reservoirLevel))
+                        .font(.system(size: 28))
+                        .fontWeight(.heavy)
+                        .fixedSize()
+                }
+            }
+        }
+    }
+    
+    var deliveryStatus: some View {
+        VStack(alignment: .leading, spacing: 5) {
+            Text(deliverySectionTitle)
+                .foregroundColor(Color(UIColor.secondaryLabel))
+            if viewModel.isSuspended {
+                HStack(alignment: .center) {
+                    Image(systemName: "pause.circle.fill")
+                        .font(.system(size: 34))
+                        .fixedSize()
+                        .foregroundColor(viewModel.isSuspended ? guidanceColors.warning : Color.accentColor)
+                    Text(LocalizedString("Insulin\nSuspended", comment: "Text shown in insulin delivery space when insulin suspended"))
+                        .fontWeight(.bold)
+                        .fixedSize()
+                }
+            } else if let basalRate = $viewModel.basalRate.wrappedValue {
+                HStack(alignment: .center) {
+                    HStack(alignment: .lastTextBaseline, spacing: 3) {
+                        Text(viewModel.basalRateFormatter.string(from: basalRate) ?? "")
+                            .font(.system(size: 28))
+                            .fontWeight(.heavy)
+                            .fixedSize()
+                        Text(LocalizedString("U/hr", comment: "Units for showing temp basal rate"))
+                            .foregroundColor(.secondary)
+                    }
+                }
+            } else {
+                HStack(alignment: .center) {
+                    Image(systemName: "x.circle.fill")
+                        .font(.system(size: 34))
+                        .fixedSize()
+                        .foregroundColor(guidanceColors.warning)
+                    Text(LocalizedString("Unknown", comment: "Text shown in basal rate space when delivery status is unknown"))
+                        .fontWeight(.bold)
+                        .fixedSize()
+                }
+            }
+        }
+    }
+    
+    var deliverySectionTitle: String {
+        if self.viewModel.isSuspended {
+            return LocalizedString("Insulin Delivery", comment: "Title of insulin delivery section")
+        } else if viewModel.isTempBasal {
+            return LocalizedString("Temp Basal", comment: "Pump Event title for UnfinalizedDose with doseType of .tempBasal")
+        } else {
+            return LocalizedString("Scheduled Basal", comment: "Title of insulin delivery section")
+        }
+    }
+    
+    private func reservoirColor(_ reservoirLevel: Double) -> Color {
+        if reservoirLevel > viewModel.reservoirLevelWarning {
+            return insulinTintColor
+        }
+        
+        if reservoirLevel > 0 {
+            return guidanceColors.warning
+        }
+        
+        return guidanceColors.critical
+    }
+}
+
+#Preview {
+    DanaKitSettingsView(viewModel: DanaKitSettingsViewModel(nil, nil), supportedInsulinTypes: InsulinType.allCases, imageName: "danai")
+}
diff --git a/DanaKit/DanaKitUI/Views/Settings/DanaKitUserSettingsView.swift b/DanaKit/DanaKitUI/Views/Settings/DanaKitUserSettingsView.swift
new file mode 100644
index 0000000..2a9bb2f
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/Settings/DanaKitUserSettingsView.swift
@@ -0,0 +1,158 @@
+//
+//  DanaKitUserSettingsView.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 29/01/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+import LoopKitUI
+
+struct DanaKitUserSettingsView: View {
+    @ObservedObject var viewModel: DanaKitUserSettingsViewModel
+    
+    private var revervoirWarningView: PickerView {
+        PickerView(
+            value: Int(viewModel.lowReservoirRate),
+            allowedOptions: Array(5...40),
+            formatter: { value in String(value) + LocalizedString("U", comment: "Insulin unit")},
+            didChange: { value in viewModel.lowReservoirRate = UInt8(value) },
+            title: LocalizedString("Low reservoir reminder", comment: "Text for low reservoir reminder"),
+            description: LocalizedString("The pump reminds you when the amount of insulin in the pump reaches this level", comment: "Description for low reservoir reminder")
+        )
+    }
+    
+    private var time24hView: PickerView {
+        PickerView(
+            value: viewModel.isTimeDisplay24H ? 1 : 0,
+            allowedOptions: [0, 1],
+            formatter: { value in value == 1 ? LocalizedString("24h notation", comment: "24h notation") : LocalizedString("12h notation", comment: "12h notation")},
+            didChange: { value in viewModel.isTimeDisplay24H = value == 1 },
+            title: LocalizedString("24h display", comment: "Text for 24h display"),
+            description: LocalizedString("Should time be display in 12h or 24h", comment: "Description for 24h display")
+        )
+    }
+    
+    private var buttonScrollOnOffView: PickerView {
+        PickerView(
+            value: viewModel.isButtonScrollOnOff ? 1 : 0,
+            allowedOptions: [0, 1],
+            formatter: { value in value == 1 ? LocalizedString("On", comment: "text on") : LocalizedString("Off", comment: "text off")},
+            didChange: { value in viewModel.isButtonScrollOnOff = value == 1 },
+            title: LocalizedString("Scroll function", comment: "Text for Scroll function")
+        )
+    }
+    
+    private var backlightOnTimeInSecView: PickerView {
+        PickerView(
+            value: Int(viewModel.backlightOnTimeInSec),
+            allowedOptions: Array(0...48).map({ $0 * 5 }),
+            formatter: { value in "\(value) \(LocalizedString("sec", comment: "text for second"))"},
+            didChange: { value in viewModel.backlightOnTimeInSec = UInt8(value) },
+            title: LocalizedString("Backlight on time", comment: "backlightOnTime")
+        )
+    }
+    
+    private var lcdOnTimeInSecView: PickerView {
+        PickerView(
+            value: Int(viewModel.lcdOnTimeInSec),
+            allowedOptions: Array(0...48).map({ $0 * 5 }),
+            formatter: { value in "\(value) \(LocalizedString("sec", comment: "text for second"))"},
+            didChange: { value in viewModel.lcdOnTimeInSec = UInt8(value) },
+            title: LocalizedString("Lcd on time", comment: "lcdOnTime")
+        )
+    }
+    
+    private var beepAlarmView: PickerView {
+        PickerView(
+            value: Int(viewModel.beepAndAlarm.rawValue),
+            allowedOptions: BeepAlarmType.all(),
+            formatter: beepFormatter,
+            didChange: { value in viewModel.beepAndAlarm = BeepAlarmType(rawValue: UInt8(value)) ?? .sound },
+            title: LocalizedString("Alarm beeps", comment: "beepAndAlarm")
+        )
+    }
+    
+    @ViewBuilder
+    var body: some View {
+        VStack {
+            List {
+                NavigationLink(destination: revervoirWarningView) {
+                    HStack {
+                        Text(LocalizedString("Low reservoir reminder", comment: "Text for low reservoir reminder"))
+                            .foregroundColor(Color.primary)
+                        Spacer()
+                        Text(String(viewModel.lowReservoirRate) + LocalizedString("U", comment: "Insulin unit"))
+                    }
+                }
+                NavigationLink(destination: time24hView) {
+                    HStack {
+                        Text(LocalizedString("24h display", comment: "Text for 24h display"))
+                            .foregroundColor(Color.primary)
+                        Spacer()
+                        Text(viewModel.isTimeDisplay24H ? LocalizedString("24h notation", comment: "24h notation") : LocalizedString("12h notation", comment: "12h notation"))
+                    }
+                }
+                NavigationLink(destination: buttonScrollOnOffView) {
+                    HStack {
+                        Text(LocalizedString("Scroll function", comment: "Text for Scroll function"))
+                            .foregroundColor(Color.primary)
+                        Spacer()
+                        Text(viewModel.isButtonScrollOnOff ? LocalizedString("On", comment: "text on") : LocalizedString("Off", comment: "text off"))
+                    }
+                }
+                NavigationLink(destination: backlightOnTimeInSecView) {
+                    HStack {
+                        Text(LocalizedString("Backlight on time", comment: "backlightOnTime"))
+                            .foregroundColor(Color.primary)
+                        Spacer()
+                        Text("\(viewModel.backlightOnTimeInSec) \(LocalizedString("sec", comment: "text for second"))")
+                    }
+                }
+                NavigationLink(destination: lcdOnTimeInSecView) {
+                    HStack {
+                        Text(LocalizedString("Lcd on time", comment: "lcdOnTime"))
+                            .foregroundColor(Color.primary)
+                        Spacer()
+                        Text("\(viewModel.lcdOnTimeInSec) \(LocalizedString("sec", comment: "text for second"))")
+                    }
+                }
+                NavigationLink(destination: beepAlarmView) {
+                    HStack {
+                        Text(LocalizedString("Alarm beeps", comment: "beepAndAlarm"))
+                            .foregroundColor(Color.primary)
+                        Spacer()
+                        Text(beepFormatter(value: Int(viewModel.beepAndAlarm.rawValue)))
+                    }
+                }
+            }
+            Spacer()
+            
+            ContinueButton(
+                loading: $viewModel.storingUseroption,
+                text: LocalizedString("Save", comment: "Text for save button"),
+                action: { viewModel.storeUserOption() }
+            )
+        }
+        .edgesIgnoringSafeArea(.bottom)
+        .navigationBarTitle(LocalizedString("User options", comment: "Title for user options"))
+    }
+    
+    private func beepFormatter(value: Int) -> String {
+        switch value {
+        case 1:
+            return LocalizedString("Sound", comment: "beepAndAlarm.sound")
+        case 2:
+            return LocalizedString("Vibration", comment: "beepAndAlarm.vibration")
+        case 3:
+            return LocalizedString("Both", comment: "beepAndAlarm.both")
+        default:
+            return ""
+        }
+    }
+}
+
+#Preview {
+    DanaKitUserSettingsView(viewModel: DanaKitUserSettingsViewModel(nil))
+}
diff --git a/DanaKit/DanaKitUI/Views/Settings/InsulinTypeView.swift b/DanaKit/DanaKitUI/Views/Settings/InsulinTypeView.swift
new file mode 100644
index 0000000..8bb8310
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/Settings/InsulinTypeView.swift
@@ -0,0 +1,71 @@
+//
+//  InsulinTypeView.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 28/12/2023.
+//  Copyright © 2023 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+import LoopKit
+import LoopKitUI
+
+struct InsulinTypeView: View {
+    @Environment(\.dismissAction) private var dismiss
+    
+    @State private var insulinType: InsulinType?
+    private var supportedInsulinTypes: [InsulinType]
+    private var didConfirm: (InsulinType) -> Void
+    
+    init(initialValue: InsulinType, supportedInsulinTypes: [InsulinType], didConfirm: @escaping (InsulinType) -> Void) {
+        self._insulinType = State(initialValue: initialValue)
+        self.supportedInsulinTypes = supportedInsulinTypes
+        self.didConfirm = didConfirm
+    }
+    
+    func continueWithType(_ insulinType: InsulinType?) {
+        if let insulinType = insulinType {
+            didConfirm(insulinType)
+        } else {
+            assertionFailure()
+        }
+    }
+    
+    var body: some View {
+        VStack(alignment: .leading) {
+            title
+            
+            ScrollView {
+                InsulinTypeChooser(insulinType: $insulinType, supportedInsulinTypes: supportedInsulinTypes)
+                    .padding(.horizontal)
+            }
+            
+            Spacer()
+            
+            ContinueButton(action: { self.continueWithType(insulinType) })
+        }
+        .edgesIgnoringSafeArea(.bottom)
+        .navigationBarHidden(false)
+    }
+    
+    @ViewBuilder
+    private var title: some View {
+        Text(LocalizedString("Select insulin type", comment: "Title for insulin type"))
+            .font(.title)
+            .bold()
+            .padding(.horizontal)
+        
+        Text(LocalizedString("Select the type of insulin that you will be using in this pump.", comment: "Title text for insulin type confirmation page"))
+            .fixedSize(horizontal: false, vertical: true)
+            .padding(.horizontal)
+        
+        Divider()
+            .padding(.vertical)
+    }
+}
+
+struct InsulinTypeView_Previews: PreviewProvider {
+    static var previews: some View {
+        InsulinTypeView(initialValue: .novolog, supportedInsulinTypes: InsulinType.allCases, didConfirm: { (newType) in })
+    }
+}
diff --git a/DanaKit/DanaKitUI/Views/Settings/PickerView.swift b/DanaKit/DanaKitUI/Views/Settings/PickerView.swift
new file mode 100644
index 0000000..0c0b273
--- /dev/null
+++ b/DanaKit/DanaKitUI/Views/Settings/PickerView.swift
@@ -0,0 +1,77 @@
+//
+//  PickerView.swift
+//  DanaKit
+//
+//  Created by Bastiaan Verhaar on 29/01/2024.
+//  Copyright © 2024 Randall Knutson. All rights reserved.
+//
+
+import SwiftUI
+import LoopKitUI
+
+struct PickerView: View {
+    @Environment(\.presentationMode) var presentationMode: Binding<PresentationMode>
+    
+    @State var value: Int
+    
+    private var currentValue: Binding<Int> {
+        Binding(
+            get: { value },
+            set: { newValue in
+                self.value = newValue
+            }
+       )
+    }
+    
+    var allowedOptions: [Int]
+    var formatter: (Int) -> String
+    var didChange: ((Int) -> Void)?
+    
+    var title: String
+    var description: String?
+    
+    
+    var body: some View {
+        VStack(alignment: .leading) {
+            VStack(alignment: .leading) {
+                titleView
+                if description != nil {
+                    Text(description!).fixedSize(horizontal: false, vertical: true)
+                }
+                
+                Divider()
+                Spacer()
+                
+                ResizeablePicker(selection: currentValue,
+                                 data: self.allowedOptions,
+                                 formatter: { formatter($0) })
+                    .padding(.horizontal)
+                
+                Spacer()
+                
+                
+            }
+            .padding(.horizontal)
+            
+            ContinueButton(action: {
+                didChange?(value)
+                
+                // Go back action
+                presentationMode.wrappedValue.dismiss()
+            })
+        }
+        .edgesIgnoringSafeArea(.bottom)
+        .navigationBarHidden(false)
+    }
+    
+    @ViewBuilder
+    private var titleView: some View {
+        Text(title)
+            .font(.title)
+            .bold()
+    }
+}
+
+#Preview {
+    PickerView(value: 0, allowedOptions: [0, 1, 2, 3], formatter: { _ in ""}, didChange: { _ in }, title: "Preview Title", description: "Preview description")
+}
diff --git a/DanaKit/DanaKitUI/blank.wav b/DanaKit/DanaKitUI/blank.wav
new file mode 100755
index 0000000..ed75ded
Binary files /dev/null and b/DanaKit/DanaKitUI/blank.wav differ
diff --git a/DanaKit/LICENSE b/DanaKit/LICENSE
new file mode 100644
index 0000000..8fdc171
--- /dev/null
+++ b/DanaKit/LICENSE
@@ -0,0 +1,21 @@
+MIT License
+
+Copyright (c) 2021 Randall Knutson
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
diff --git a/DanaKit/Localization/ar.lproj/Localizable.strings b/DanaKit/Localization/ar.lproj/Localizable.strings
new file mode 100644
index 0000000..c2af7e1
--- /dev/null
+++ b/DanaKit/Localization/ar.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "تحميل"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "إعداد دانا-i/RS"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "اختر المضخة الخاصة بك"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "دانا آر إس-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "دانا آر إس-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "دانا ط"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "إعداد DanaRS v1"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "أثناء عملية الاقتران، سيُظهر DanaRS v3 الخاص بك مطالبة الاقتران بينما سيُظهر iPhone الخاص بك مطالبة برمز الاقتران. على المضخة، حدد &quot;موافق&quot; واكتب الرمز على جهاز iPhone الخاص بك. بعد ذلك، يصبح Loop جاهزًا للتواصل مع DanaRS v1"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "قبل البدء بعملية الاقتران، يوصى بالتحقق من كلمة مرور المضخة وتحديثها إذا لزم الأمر. يمكنك القيام بذلك عن طريق الانتقال إلى إعدادات المضخة -&gt; إعدادات المستخدم -&gt; كلمة المرور. كلمة المرور الافتراضية هي 1234، إذا كانت هذه هي كلمة المرور الخاصة بك، يرجى التفكير في تغييرها"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "كلمة المرور DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "املأ كلمة المرور"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "إعداد DanaRS v3"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "أثناء عملية الاقتران، سيُظهر DanaRS v3 الخاص بك مطالبة الاقتران بينما سيُظهر iPhone الخاص بك مطالبة برمزي الاقتران. على المضخة الخاصة بك، حدد &quot;موافق&quot; واكتب الرمزين على جهاز iPhone الخاص بك. بعد ذلك، يصبح Loop جاهزًا للتواصل مع DanaRS v3"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "إعداد دانا ط"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "بعد ضبط نوع الأنسولين وسرعة البلعة، ستظهر لك شاشة تحتوي على جميع مضخات دانا الموجودة. حدد المضخة التي تريد ربطها بـ%1$@."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "أثناء عملية الاقتران، سيُظهر جهاز Dana-i الخاص بك مطالبة الاقتران بينما سيُظهر جهاز iPhone الخاص بك مطالبة برمز الاقتران. عند الضخ، حدد &quot;موافق&quot; واكتب الرمز المكون من 6 أرقام في الشاشة على جهاز iPhone الخاص بك. بعد ذلك، %1$@ جاهز للتواصل مع Dana-i الخاص بك"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "خطأ: فشل في إقران الجهاز"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "نعم"
+
+/* Cancel button title */
+"Cancel" = "يلغي"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "يتم المسح"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "توصيل"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "حدد نوع الأنسولين الذي ستستخدمه في هذه المضخة"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "إزالة المضخة"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "هل أنت متأكد أنك تريد التوقف عن استخدام Dana-i/RS؟"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "حذف المضخة"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "حذف المضخة"
+
+/* Connection error message */
+"Error while connecting to device" = "حدث خطأ أثناء الاتصال بالجهاز"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "تم العثور على Dana-RS v3!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "مطلوب الرمز السري"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "دبوس 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "دبوس 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "تم استلام أطوال رمز سري غير صالحة. حاول ثانية"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "تم تلقي سلاسل سداسية عشرية غير صالحة. حاول ثانية"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "فشل المجموع الاختباري. حاول ثانية"
+
+/* Title for delivery speed */
+"Delivery speed" = "سرعة التسليم"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 ثانية/ش"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 ثانية/ش"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 ثانية/ش"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "تدعم مضخات دانا سرعات توصيل مختلفة. يمكنك إعداده هنا"
+
+/* Text for finish button */
+"Finish" = "ينهي"
+
+/* Dana setup complete p1 */
+"Your " = "لك "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " جاهز للاستخدام!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "ملاحظة: تحتوي مضخة Dana على إعداد خاص يسمح لك بإسكات أصوات مضخة Dana الخاصة بك. لتمكين هذا، يرجى الاتصال بموزع Dana الخاص بك"
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "فشل في إجراء اتصال"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "فشل في ضبط درجة الحرارة الأساسية"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "فشل في ضبط التعليق"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "فشل في إنشاء برنامج Dana الأساسي"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "فشل في ضبط القاعدة"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "فشل في ضبط وقت المضخة"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "إعداد درجة الحرارة الأساسية غير مدعوم في الوقت الحالي"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "تم تعليق تسليم الأنسولين. العمل: فشل"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "تم إلغاء الإجراء، لأن المضخة مشغولة"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "مهلة الجرعة نشطة. لا يمكن إكمال دورة الحلقة حتى تصبح المهلة غير نشطة"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "تم الوصول إلى الحد الأقصى للبلعة. يرجى تجربة مبلغ أقل أو زيادة الحد"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "تم الوصول إلى الحد الأقصى اليومي للأنسولين. يرجى تجربة مبلغ أقل أو زيادة الحد"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "يتم دعم الجرعة التلقائية فقط"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "يرجى النظر في تغيير استراتيجية الجرعات الخاصة بك في قائمة الإعداد"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "استئناف التسليم"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "تعليق التسليم"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "وقف درجة الحرارة القاعدية"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "نوع الأنسولين"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "بصل المقرر";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "تسليم الأنسولين";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "الأنسولين\nمعلق";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "مجهول";
+
+/* Units for showing temp basal rate */
+"U/hr" = "ش / ساعة";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "الأنسولين المتبقي";
+
+/* Text for Dana pump name */
+"Pump name" = "اسم المضخة"
+
+/* Text for hardware model */
+"Hardware model" = "نموذج الأجهزة"
+
+/* Text for firmware version */
+"Firmware version" = "نسخة برنامج ثابت"
+
+/* DanaKit sync pump */
+"Sync pump data" = "مزامنة بيانات المضخة"
+
+/* Text for last sync */
+"Last sync" = "آخر مزامنة"
+
+/* Text for pump time */
+"Pump time" = "وقت المضخة"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "مزامنة وقت المضخة"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "تم اكتشاف تغيير الوقت"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "يختلف الوقت في المضخة عن الوقت الحالي. هل تريد تحديث الوقت على المضخة الخاصة بك إلى الوقت الحالي؟"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "يختلف الوقت في المضخة عن الوقت الحالي. يتحكم وقت المضخة في إعدادات العلاج المجدولة. قم بالتمرير لأسفل إلى صف &quot;وقت المضخة&quot; لمراجعة فارق التوقيت وتكوين المضخة الخاصة بك.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "نعم، المزامنة مع الوقت الحالي"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "لا، احتفظ بالمضخة كما هي"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "مضغة";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "درجة الحرارة القاعدية";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "بصل";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "سيرة ذاتية";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "تعليق";
+
+/* Title for user options */
+"User options" = "خيارات المستخدم"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "مشاركة سجلات مضخة دانا"
+
+/* Loading */
+"Loading" = "تحميل"
+
+/* Text for save button */
+"Save" = "يحفظ"
+
+/* Text for 24h display */
+"24h display" = "عرض 24 ساعة"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "يجب أن يتم عرض الوقت في 12 ساعة أو 24 ساعة"
+
+/* text on */
+"On" = "على"
+
+/* text off */
+"Off" = "عن"
+
+/* 12h */
+"12h notation" = "تدوين 12H"
+
+/* 24h */
+"24h notation" = "تدوين 24 ساعة"
+
+/* Text for Scroll function */
+"Scroll function" = "وظيفة التمرير"
+
+/* text for second */
+"sec" = "ثانية"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "الإضاءة الخلفية في الوقت المحدد"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "شاشات الكريستال السائل في الوقت المحدد"
+
+/* beepAndAlarm */
+"Alarm beeps" = "صفارات الإنذار"
+
+/* beepAndAlarm.sound */
+"Sound" = "صوت"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "اهتزاز"
+
+/* beepAndAlarm.both */
+"Both" = "كلاهما"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "بطارية المضخة 0%"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "بطارية المضخة فارغة. استبدله الآن!"
+
+/* Alert title for pumpError */
+"Pump error" = "خطأ في المضخة"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "افحص المضخة وحاول مرة أخرى"
+
+/* Alert title for occlusion */
+"Occlusion" = "الانسداد"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "تحقق من الخزان والتسريب وحاول مرة أخرى"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "بطارية مضخة منخفضة"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "يجب استبدال بطارية المضخة قريبًا"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "اغلاق المضخة"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "لم يكن هناك أي تفاعلات مع المضخة لفترة طويلة. قم إما بتعطيل هذه الوظيفة في المضخة أو التفاعل مع المضخة"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "مقارنة القاعدية"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "قياس نسبة الجلوكوز في الدم"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "مستوى الأنسولين المتبقي"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "خزان فارغ"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "الخزان فارغ. استبدله الآن!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "تحقق من العمود"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "اكتشفت المضخة مشكلة في عمودها. يرجى إزالة الخزان والتحقق من كل شيء والمحاولة مرة أخرى"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "تم الوصول إلى الحد الأساسي"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "لقد تم الوصول إلى الحد الأساسي اليومي الخاص بك. يرجى الاتصال بموزع Dana الخاص بك لزيادة الحد"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "تم الوصول إلى الحد اليومي"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "لقد تم الوصول إلى الحد اليومي للأنسولين. يرجى الاتصال بموزع Dana الخاص بك لزيادة الحد"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "تغيب عن فحص نسبة الجلوكوز في الدم"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "تم إعداد تذكير بفحص مستوى السكر في الدم في مضختك ويتم تشغيله. يرجى إزالته أو إعطاء مستوى الجلوكوز للمضخة"
+
+/* Alert title for unknown */
+"Unknown error" = "خطأ غير معروف"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "حدث خطأ غير معروف أثناء معالجة التنبيه الصادر من المضخة. يرجى الإبلاغ عن هذا"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "وجه المعلومات إلى"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "تبديل النغمة الصامتة؟"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "لا، يبقى كما هو"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "نعم، قم بتعطيل النغمات الصامتة"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "نعم، تمكين النغمات الصامتة"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "قم بتعيين الملف الأساسي الذي يجب أن تستخدمه المضخة. لاحظ أنه سيتم استبدال ملف التعريف الموجود في المضخة بالملف الموجود في %1$@"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "لا الأنسولين"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "الأنسولين معلق"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "فقدان الإشارة"
+
+/* Text for Day unit */
+"day(s)" = "أيام)"
+
+/* Text for cannula age */
+"Cannula age" = "عمر القنية"
+
+/* Text for reservoir age */
+"Reservoir age" = "عمر الخزان"
diff --git a/DanaKit/Localization/cs.lproj/Localizable.strings b/DanaKit/Localization/cs.lproj/Localizable.strings
new file mode 100644
index 0000000..9c0eb06
--- /dev/null
+++ b/DanaKit/Localization/cs.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "načítání"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Nastavení Dana-i/RS"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "Vyberte čerpadlo"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "DanaRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "DanaRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "Dana-i"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "Nastavení DanaRS v1"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "Během procesu párování váš DanaRS v3 zobrazí výzvu k párování, zatímco váš iPhone zobrazí výzvu k zadání párovacího kódu. Na pumpě vyberte OK a zadejte kód na svém iPhone. Poté je Loop připraven komunikovat s vaším DanaRS v1"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "Před zahájením procesu párování se doporučuje zkontrolovat a v případě potřeby aktualizovat heslo pumpy. Můžete to udělat tak, že přejdete do nastavení pumpy -&gt; uživatelská nastavení -&gt; heslo. Výchozí heslo je 1234, pokud je toto vaše heslo, zvažte jeho změnu"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "Heslo DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "Vyplňte heslo"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "Nastavení DanaRS v3"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "Během procesu párování váš DanaRS v3 zobrazí výzvu k párování, zatímco váš iPhone zobrazí výzvu k zadání dvou párovacích kódů. Na pumpě vyberte OK a zadejte dva kódy na svém iPhone. Poté je Loop připraven komunikovat s vaším DanaRS v3"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "Nastavení Dana-i"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "Po nastavení typu inzulínu a rychlosti bolusu se zobrazí obrazovka se všemi nalezenými pumpami Dana. Vyberte čerpadlo, které chcete propojit s %1$@."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "Během procesu párování váš Dana-i zobrazí výzvu k párování, zatímco váš iPhone zobrazí výzvu k zadání párovacího kódu. Na pumpě vyberte OK a zadejte 6místný kód na obrazovce vašeho iPhone. Poté je %1$@ připraveno komunikovat s vaším Dana-i"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "CHYBA: Párování zařízení se nezdařilo"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "OK"
+
+/* Cancel button title */
+"Cancel" = "zrušení"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "Snímání"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "Spojovací"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "Vyberte typ inzulinu, který budete v této pumpě používat"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "Vyjměte čerpadlo"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "Opravdu chcete přestat používat Dana-i/RS?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "Smazat pumpu"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "Smazat pumpu"
+
+/* Connection error message */
+"Error while connecting to device" = "Chyba při připojování k zařízení"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "Dana-RS v3 nalezen!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "Je vyžadován kód PIN"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "Pin 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "Pin 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "Byly přijaty neplatné délky kódu PIN. Zkus to znovu"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "Přijaté neplatné hexadecimální řetězce. Zkus to znovu"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "Kontrolní součet se nezdařil. Zkus to znovu"
+
+/* Title for delivery speed */
+"Delivery speed" = "Rychlost dodání"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 s/U"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 s/U"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 s/U"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "Čerpadla Dana podporují různé rychlosti podávání. Můžete to nastavit zde"
+
+/* Text for finish button */
+"Finish" = "Dokončit"
+
+/* Dana setup complete p1 */
+"Your " = "Vaše "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " je připraven k použití!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "Poznámka: Vaše pumpa Dana má speciální nastavení, které vám umožňuje ztišit pípání pumpy Dana. Chcete-li to povolit, kontaktujte svého distributora Dana"
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "Připojení se nezdařilo"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "Nepodařilo se upravit bazální teplotu"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "Nepodařilo se nastavit odpružení"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "Vygenerování bazálního programu Dana se nezdařilo"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "Nepodařilo se upravit bazál"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "Nepodařilo se nastavit čas čerpadla"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "Nastavení dočasné bazální hodnoty není v současné době podporováno"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "Výdej inzulínu byl pozastaven. Akce se nezdařila"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "Akce byla zrušena, protože čerpadlo je zaneprázdněné"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "Je aktivní časový limit bolusu. Cyklus smyčky nelze dokončit, dokud není časový limit neaktivní"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "Byl dosažen limit maximálního bolusu. Zkuste prosím nižší částku nebo zvyšte limit"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "Je dosažen maximální denní limit inzulinu. Zkuste prosím nižší částku nebo zvyšte limit"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "Podporován je pouze automatický bolus"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "Zvažte prosím změnu strategie dávkování v nabídce nastavení"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "Obnovit doručení"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "Pozastavit doručení"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "Zastavit temp bazál"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "Typ inzulínu"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "Plánovaná bazální";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "Dodávka inzulínu";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "Inzulín\nSuspendován";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "Neznámý";
+
+/* Units for showing temp basal rate */
+"U/hr" = "U/hod";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "Zbývající inzulín";
+
+/* Text for Dana pump name */
+"Pump name" = "Název čerpadla"
+
+/* Text for hardware model */
+"Hardware model" = "Hardwarový model"
+
+/* Text for firmware version */
+"Firmware version" = "Verze firmwaru"
+
+/* DanaKit sync pump */
+"Sync pump data" = "Synchronizujte data pumpy"
+
+/* Text for last sync */
+"Last sync" = "Poslední synchronizace"
+
+/* Text for pump time */
+"Pump time" = "Doba pumpy"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "Synchronizovat čas čerpadla"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "Zjištěna změna času"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "Čas na pumpě se liší od aktuálního času. Chcete aktualizovat čas na pumpě na aktuální čas?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "Čas na pumpě se liší od aktuálního času. Čas pumpy řídí nastavení naplánované terapie. Přejděte dolů na řádek Čas pumpy, abyste si prohlédli časový rozdíl a nakonfigurovali pumpu.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "Ano, synchronizovat s aktuálním časem"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "Ne, ponechte čerpadlo tak, jak je"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "Bolus";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "Temp Basal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "Bazální";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "Životopis";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "Pozastavit";
+
+/* Title for user options */
+"User options" = "Uživatelské možnosti"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "Sdílejte protokoly čerpadla Dana"
+
+/* Loading */
+"Loading" = "načítání"
+
+/* Text for save button */
+"Save" = "Uložit"
+
+/* Text for 24h display */
+"24h display" = "24h displej"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "Čas by se měl zobrazovat za 12 nebo 24 hodin"
+
+/* text on */
+"On" = "Na"
+
+/* text off */
+"Off" = "Vypnuto"
+
+/* 12h */
+"12h notation" = "12h notace"
+
+/* 24h */
+"24h notation" = "24h notace"
+
+/* Text for Scroll function */
+"Scroll function" = "Funkce rolování"
+
+/* text for second */
+"sec" = "sek"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "Podsvícení na čas"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "LCD na čas"
+
+/* beepAndAlarm */
+"Alarm beeps" = "Alarm pípá"
+
+/* beepAndAlarm.sound */
+"Sound" = "Zvuk"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "Vibrace"
+
+/* beepAndAlarm.both */
+"Both" = "Oba"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "Baterie pumpy 0%"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "Baterie pumpy je prázdná. Vyměňte to hned!"
+
+/* Alert title for pumpError */
+"Pump error" = "Chyba čerpadla"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "Zkontrolujte čerpadlo a zkuste to znovu"
+
+/* Alert title for occlusion */
+"Occlusion" = "Okluze"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "Zkontrolujte nádržku a infuzi a zkuste to znovu"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "Slabá baterie čerpadla"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "Baterii čerpadla je třeba brzy vyměnit"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "Vypnutí čerpadla"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "Příliš dlouho nedošlo k žádné interakci s čerpadlem. Buď tuto funkci v pumpě deaktivujte, nebo s pumpou interagujte"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "Bazální Porovnej"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "Měření glukózy v krvi"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "Zbývající hladina inzulínu"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "Prázdná nádrž"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "Nádrž je prázdná. Vyměňte to hned!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "Zkontrolujte chaft"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "Čerpadlo zjistilo problém s hřídelí. Vyjměte zásobník, zkontrolujte vše a zkuste to znovu"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "Bylo dosaženo bazálního limitu"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "Váš denní bazální limit byl dosažen. Chcete-li limit zvýšit, kontaktujte svého distributora Dana"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "Dosaženo denního limitu"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "Váš denní limit inzulinu byl dosažen. Chcete-li limit zvýšit, kontaktujte svého distributora Dana"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "Zmeškaná kontrola glykémie"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "Ve vaší pumpě bylo nastaveno připomenutí kontroly glykémie a je spuštěno. Odstraňte ji nebo dejte pumpě hladinu glukózy"
+
+/* Alert title for unknown */
+"Unknown error" = "Neznámá chyba"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "Během zpracování výstrahy z pumpy došlo k neznámé chybě. Nahlaste to prosím"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "Informace o čerpadle"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "Přepnout tichý tón?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "Ne, ponechat tak, jak je"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "Ano, Zakázat tiché tóny"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "Ano, Povolit tiché tóny"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "Nastavte bazální profil, který má pumpa používat. Pamatujte, že přepíše profil, který je v pumpě, profilem v %1$@"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "Žádný inzulín"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "Inzulin pozastaven"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "Ztráta signálu"
+
+/* Text for Day unit */
+"day(s)" = "dny"
+
+/* Text for cannula age */
+"Cannula age" = "Stáří kanyly"
+
+/* Text for reservoir age */
+"Reservoir age" = "Stáří nádrže"
diff --git a/DanaKit/Localization/da.lproj/Localizable.strings b/DanaKit/Localization/da.lproj/Localizable.strings
new file mode 100644
index 0000000..16d70d6
--- /dev/null
+++ b/DanaKit/Localization/da.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "Indlæser"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Dana-i/RS opsætning"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "Vælg din pumpe"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "DanaRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "DanaRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "Dana-i"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "Opsætning af DanaRS v1"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "Under parringsprocessen vil din DanaRS v3 vise en parringsprompt, mens din iPhone vil vise en prompt om en parringskode. På din pumpe skal du vælge OK og indtaste koden på din iPhone. Herefter er Loop klar til at kommunikere med din DanaRS v1"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "Før du starter med parringsprocessen, anbefales det at kontrollere og om nødvendigt opdatere pumpens adgangskode. Du kan gøre dette ved at gå til pumpeindstillinger -&gt; brugerindstillinger -&gt; adgangskode. Standardadgangskoden er 1234, hvis dette er din adgangskode, skal du overveje at ændre den"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "Adgangskode DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "Udfyld adgangskode"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "Opsætning af DanaRS v3"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "Under parringsprocessen vil din DanaRS v3 vise en parringsprompt, mens din iPhone viser en prompt om to parringskoder. På din pumpe skal du vælge OK og indtaste de to koder på din iPhone. Herefter er Loop klar til at kommunikere med din DanaRS v3"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "Opsætning af Dana-i"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "Efter opsætning af insulintype og bolushastighed, vil du se en skærm med alle fundne Dana-pumper. Vælg den pumpe, du vil linke til %1$@."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "Under parringsprocessen vil din Dana-i vise en parringsprompt, mens din iPhone viser en prompt om en parringskode. På din pumpe skal du vælge OK og indtaste den 6-cifrede kode på skærmen på din iPhone. Derefter er %1$@ klar til at kommunikere med din Dana-i"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "FEJL: Enheden kunne ikke parres"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "Okay"
+
+/* Cancel button title */
+"Cancel" = "Afbestille"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "Scanning"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "Tilslutning"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "Vælg den type insulin, du vil bruge i denne pumpe"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "Fjern pumpen"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "Er du sikker på, at du vil stoppe med at bruge Dana-i/RS?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "Slet pumpe"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "Slet pumpe"
+
+/* Connection error message */
+"Error while connecting to device" = "Fejl under tilslutning til enheden"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "Dana-RS v3 fundet!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "Pinkode påkrævet"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "Pin 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "Pin 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "Modtaget ugyldige pinkodelængder. Prøv igen"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "Modtog ugyldige hex-strenge. Prøv igen"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "Kontrolsum mislykkedes. Prøv igen"
+
+/* Title for delivery speed */
+"Delivery speed" = "Leveringshastighed"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 sek/U"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 sek/U"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 sek/U"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "Dana-pumperne understøtter forskellige leveringshastigheder. Du kan sætte det op her"
+
+/* Text for finish button */
+"Finish" = "Afslut"
+
+/* Dana setup complete p1 */
+"Your " = "Din "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " er klar til at blive brugt!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "Bemærk: Din Dana-pumpe har en speciel indstilling, som giver dig mulighed for at dæmpe din Dana-pumpe-bip. Kontakt din Dana-forhandler for at aktivere dette"
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "Kunne ikke oprette forbindelse"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "Kunne ikke justere temp basal"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "Kunne ikke justere affjedringen"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "Kunne ikke generere Dana basalprogram"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "Kunne ikke justere basal"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "Kunne ikke justere pumpetiden"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "Indstilling af temp basal understøttes ikke på nuværende tidspunkt"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "Insulintilførslen er blevet suspenderet. Handlingen mislykkedes"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "Handlingen er blevet annulleret, fordi pumpen er optaget"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "En bolus-timeout er aktiv. Sløjfecyklussen kan ikke afsluttes, før timeout er inaktiv"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "Den maksimale bolusgrænse er nået. Prøv venligst et lavere beløb eller øg grænsen"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "Den maksimale daglige insulingrænse er nået. Prøv venligst et lavere beløb eller øg grænsen"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "Kun automatisk bolus understøttes"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "Overvej venligst at ændre din doseringsstrategi i indstillingsmenuen"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "Genoptag levering"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "Afbryd levering"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "Stop temp basal"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "Insulin type"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "Planlagt Basal";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "Insulintilførsel";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "Insulin\nsuspenderet";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "Ukendt";
+
+/* Units for showing temp basal rate */
+"U/hr" = "U/t";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "Insulin tilbage";
+
+/* Text for Dana pump name */
+"Pump name" = "Pumpens navn"
+
+/* Text for hardware model */
+"Hardware model" = "Hardware model"
+
+/* Text for firmware version */
+"Firmware version" = "Firmware version"
+
+/* DanaKit sync pump */
+"Sync pump data" = "Synkroniser pumpedata"
+
+/* Text for last sync */
+"Last sync" = "Sidste synkronisering"
+
+/* Text for pump time */
+"Pump time" = "Pumpetid"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "Synkroniser pumpetid"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "Tidsændring registreret"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "Tiden på din pumpe er forskellig fra den aktuelle tid. Vil du opdatere tiden på din pumpe til det aktuelle tidspunkt?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "Tiden på din pumpe er forskellig fra den aktuelle tid. Din pumpes tid styrer dine planlagte behandlingsindstillinger. Rul ned til rækken Pumpetid for at se tidsforskellen og konfigurere din pumpe.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "Ja, Synkroniser til aktuel tid"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "Nej, behold pumpen som den er"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "Bolus";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "Temp Basal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "Basal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "Genoptag";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "Suspendere";
+
+/* Title for user options */
+"User options" = "Brugermuligheder"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "Del Dana pumpe logs"
+
+/* Loading */
+"Loading" = "Indlæser"
+
+/* Text for save button */
+"Save" = "Gemme"
+
+/* Text for 24h display */
+"24h display" = "24 timers visning"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "Skal tiden vises om 12 timer eller 24 timer"
+
+/* text on */
+"On" = "På"
+
+/* text off */
+"Off" = "Af"
+
+/* 12h */
+"12h notation" = "12 timers notation"
+
+/* 24h */
+"24h notation" = "24 timers notation"
+
+/* Text for Scroll function */
+"Scroll function" = "Scroll funktion"
+
+/* text for second */
+"sec" = "sek"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "Baggrundsbelysning til tiden"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "Lcd til tiden"
+
+/* beepAndAlarm */
+"Alarm beeps" = "Alarm bipper"
+
+/* beepAndAlarm.sound */
+"Sound" = "Lyd"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "Vibration"
+
+/* beepAndAlarm.both */
+"Both" = "Begge"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "Pumpebatteri 0 %"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "Pumpebatteriet er tomt. Udskift det nu!"
+
+/* Alert title for pumpError */
+"Pump error" = "Pumpe fejl"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "Tjek pumpen og prøv igen"
+
+/* Alert title for occlusion */
+"Occlusion" = "Okklusion"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "Tjek reservoiret og infusionen, og prøv igen"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "Lavt pumpebatteri"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "Pumpebatteri skal snart udskiftes"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "Pumpestop"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "Der har ikke været nogen interaktioner med pumpen for længe. Deaktiver enten denne funktion i pumpen eller interager med pumpen"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "Basal Sammenlign"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "Måling af blodsukker"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "Resterende insulinniveau"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "Tømt reservoir"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "Reservoaret er tomt. Udskift det nu!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "Tjek chaft"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "Pumpen har registreret et problem med dens chaft. Fjern venligst reservoiret, tjek alt og prøv igen"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "Basalgrænsen nået"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "Din daglige basalgrænse er nået. Kontakt venligst din Dana-forhandler for at øge grænsen"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "Daglig grænse nået"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "Din daglige insulingrænse er nået. Kontakt venligst din Dana-forhandler for at øge grænsen"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "Mistet blodsukkerkontrol"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "En påmindelse om blodsukkerkontrol er blevet sat op i din pumpe og udløses. Fjern det, eller giv dit glukoseniveau til pumpen"
+
+/* Alert title for unknown */
+"Unknown error" = "Ukendt fejl"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "Der er opstået en ukendt fejl under behandlingen af ​​advarslen fra pumpen. Rapportér venligst dette"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "Pumpeoplysninger"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "Vil du skifte lydløs tone?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "Nej, fortsæt som det er"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "Ja, deaktiver tavse toner"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "Ja, Aktiver tavse toner"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "Indstil den basalprofil pumpen skal bruge. Bemærk, at den vil overskrive profilen, der er i pumpen, med den i %1$@"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "Ingen insulin"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "Insulin suspenderet"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "Signaltab"
+
+/* Text for Day unit */
+"day(s)" = "dage)"
+
+/* Text for cannula age */
+"Cannula age" = "Kanyle alder"
+
+/* Text for reservoir age */
+"Reservoir age" = "Reservoarets alder"
diff --git a/DanaKit/Localization/de.lproj/Localizable.strings b/DanaKit/Localization/de.lproj/Localizable.strings
new file mode 100644
index 0000000..76648cc
--- /dev/null
+++ b/DanaKit/Localization/de.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "Wird geladen"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Dana-i/RS-Einrichtung"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "Wählen Sie Ihre Pumpe"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "DanaRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "DanaRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "Dana-ich"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "Einrichten von DanaRS v1"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "Während des Kopplungsvorgangs zeigt Ihr DanaRS v3 eine Kopplungsaufforderung an, während Ihr iPhone eine Aufforderung zur Eingabe eines Kopplungscodes anzeigt. Wählen Sie auf Ihrer Pumpe „OK“ und geben Sie den Code auf Ihrem iPhone ein. Danach ist Loop bereit, mit Ihrem DanaRS v1 zu kommunizieren."
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "Bevor Sie mit dem Pairing-Prozess beginnen, sollten Sie das Pumpenkennwort überprüfen und ggf. aktualisieren. Gehen Sie dazu zu den Pumpeneinstellungen -&gt; Benutzereinstellungen -&gt; Kennwort. Das Standardkennwort lautet 1234. Wenn dies Ihr Kennwort ist, sollten Sie es ändern."
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "Passwort DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "Passwort eingeben"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "Einrichten von DanaRS v3"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "Während des Kopplungsvorgangs zeigt Ihr DanaRS v3 eine Kopplungsaufforderung an, während Ihr iPhone eine Aufforderung zur Eingabe von zwei Kopplungscodes anzeigt. Wählen Sie auf Ihrer Pumpe „OK“ und geben Sie die beiden Codes auf Ihrem iPhone ein. Danach ist Loop bereit, mit Ihrem DanaRS v3 zu kommunizieren."
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "Einrichten von Dana-i"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "Nachdem Sie den Insulintyp und die Bolusgeschwindigkeit eingestellt haben, wird ein Bildschirm mit allen gefundenen Dana-Pumpen angezeigt. Wählen Sie die Pumpe aus, die Sie mit %1$@ verknüpfen möchten."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "Während des Kopplungsvorgangs zeigt Ihre Dana-i eine Kopplungsaufforderung an, während Ihr iPhone eine Aufforderung zur Eingabe eines Kopplungscodes anzeigt. Wählen Sie an Ihrer Pumpe „OK“ und geben Sie den 6-stelligen Code auf dem Bildschirm Ihres iPhones ein. Danach ist %1$@ bereit, mit Ihrer Dana-i zu kommunizieren."
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "FEHLER: Gerät konnte nicht gekoppelt werden"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "OK"
+
+/* Cancel button title */
+"Cancel" = "Stornieren"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "Scannen"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "Verbinden"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "Wählen Sie den Insulintyp aus, den Sie in dieser Pumpe verwenden möchten"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "Pumpe ausbauen"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "Möchten Sie die Anwendung von Dana-i/RS wirklich beenden?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "Pumpe löschen"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "Pumpe löschen"
+
+/* Connection error message */
+"Error while connecting to device" = "Fehler beim Verbinden mit dem Gerät"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "Dana-RS v3 gefunden!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "Pincode erforderlich"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "Stift 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "Stift 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "Ungültige PIN-Codelängen empfangen. Versuchen Sie es erneut."
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "Ungültige Hex-Strings empfangen. Versuchen Sie es erneut."
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "Prüfsumme fehlgeschlagen. Versuchen Sie es erneut"
+
+/* Title for delivery speed */
+"Delivery speed" = "Liefergeschwindigkeit"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 Sek./Einheit"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 Sek./Einheit"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 Sek./Einheit"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "Die Dana-Pumpen unterstützen unterschiedliche Fördergeschwindigkeiten. Sie können diese hier einstellen"
+
+/* Text for finish button */
+"Finish" = "Beenden"
+
+/* Dana setup complete p1 */
+"Your " = "Dein "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " ist einsatzbereit!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "Hinweis: Ihre Dana-Pumpe verfügt über eine spezielle Einstellung, mit der Sie die Signaltöne Ihrer Dana-Pumpe stumm schalten können. Um dies zu aktivieren, wenden Sie sich bitte an Ihren Dana-Händler."
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "Es konnte keine Verbindung hergestellt werden"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "Die Anpassung der temporären Basalrate ist fehlgeschlagen."
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "Die Federung konnte nicht angepasst werden"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "Das Dana-Basalprogramm konnte nicht erstellt werden"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "Basal konnte nicht angepasst werden"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "Die Pumpzeit konnte nicht angepasst werden."
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "Das Einstellen der temporären Basalrate wird derzeit nicht unterstützt."
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "Die Insulinabgabe wurde unterbrochen. Aktion fehlgeschlagen"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "Aktion wurde abgebrochen, da die Pumpe beschäftigt ist"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "Ein Bolus-Timeout ist aktiv. Der Loop-Zyklus kann erst abgeschlossen werden, wenn das Timeout inaktiv ist."
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "Das maximale Boluslimit ist erreicht. Bitte versuchen Sie es mit einer niedrigeren Menge oder erhöhen Sie das Limit"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "Das maximale tägliche Insulinlimit ist erreicht. Bitte versuchen Sie es mit einer niedrigeren Menge oder erhöhen Sie das Limit"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "Nur automatischer Bolus wird unterstützt"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "Bitte ändern Sie Ihre Dosierstrategie im Einstellungsmenü"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "Zustellung fortsetzen"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "Zustellung aussetzen"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "Temporäre Basalrate stoppen"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "Insulintyp"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "Geplante Basalrate";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "Insulinabgabe";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "Insulin\nAusgesetzt";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "Unbekannt";
+
+/* Units for showing temp basal rate */
+"U/hr" = "U/Std";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "Verbleibendes Insulin";
+
+/* Text for Dana pump name */
+"Pump name" = "Pumpenname"
+
+/* Text for hardware model */
+"Hardware model" = "Hardwaremodell"
+
+/* Text for firmware version */
+"Firmware version" = "Firmware Version"
+
+/* DanaKit sync pump */
+"Sync pump data" = "Pumpendaten synchronisieren"
+
+/* Text for last sync */
+"Last sync" = "Letzte Synchronisierung"
+
+/* Text for pump time */
+"Pump time" = "Pumpzeit"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "Pumpenzeit synchronisieren"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "Zeitänderung erkannt"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "Die Uhrzeit Ihrer Pumpe weicht von der aktuellen Uhrzeit ab. Möchten Sie die Uhrzeit Ihrer Pumpe auf die aktuelle Uhrzeit aktualisieren?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "Die Zeit auf Ihrer Pumpe weicht von der aktuellen Zeit ab. Die Zeit Ihrer Pumpe steuert Ihre geplanten Therapieeinstellungen. Scrollen Sie nach unten zur Zeile „Pumpenzeit“, um den Zeitunterschied zu überprüfen und Ihre Pumpe zu konfigurieren.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "Ja, mit aktueller Zeit synchronisieren"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "Nein, Pumpe so belassen wie sie ist"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "Bolus";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "Temp. Basal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "Basal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "Wieder aufnehmen";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "Aussetzen";
+
+/* Title for user options */
+"User options" = "Benutzeroptionen"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "Teilen Sie die Dana-Pumpenprotokolle"
+
+/* Loading */
+"Loading" = "Wird geladen"
+
+/* Text for save button */
+"Save" = "Speichern"
+
+/* Text for 24h display */
+"24h display" = "24h Anzeige"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "Soll die Zeit im 12- oder 24-Stunden-Format angezeigt werden?"
+
+/* text on */
+"On" = "An"
+
+/* text off */
+"Off" = "Aus"
+
+/* 12h */
+"12h notation" = "12h-Notation"
+
+/* 24h */
+"24h notation" = "24h-Notation"
+
+/* Text for Scroll function */
+"Scroll function" = "Scroll-Funktion"
+
+/* text for second */
+"sec" = "Sek"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "Hintergrundbeleuchtung rechtzeitig einschalten"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "LCD pünktlich"
+
+/* beepAndAlarm */
+"Alarm beeps" = "Alarm piept"
+
+/* beepAndAlarm.sound */
+"Sound" = "Klang"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "Vibration"
+
+/* beepAndAlarm.both */
+"Both" = "Beide"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "Pumpenbatterie 0%"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "Pumpenbatterie leer. Jetzt austauschen!"
+
+/* Alert title for pumpError */
+"Pump error" = "Pumpenfehler"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "Überprüfen Sie die Pumpe und versuchen Sie es erneut"
+
+/* Alert title for occlusion */
+"Occlusion" = "Okklusion"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "Überprüfen Sie das Reservoir und die Infusionen und versuchen Sie es erneut"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "Niedriger Pumpenakku"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "Die Pumpenbatterie muss bald ausgetauscht werden"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "Pumpenabschaltung"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "Es gab zu lange keine Interaktionen mit der Pumpe. Deaktivieren Sie diese Funktion in der Pumpe oder interagieren Sie mit der Pumpe"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "Basaler Vergleich"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "Blutzucker messen"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "Verbleibender Insulinspiegel"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "Behälter leeren"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "Der Vorratsbehälter ist leer. Ersetzen Sie ihn sofort!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "Überprüfen Sie den Chat"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "Die Pumpe hat ein Problem mit ihrer Welle festgestellt. Bitte entfernen Sie den Behälter, überprüfen Sie alles und versuchen Sie es erneut"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "Basalgrenze erreicht"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "Ihr tägliches Basallimit wurde erreicht. Bitte kontaktieren Sie Ihren Dana-Händler, um das Limit zu erhöhen"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "Tageslimit erreicht"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "Ihr tägliches Insulinlimit ist erreicht. Bitte kontaktieren Sie Ihren Dana-Händler, um das Limit zu erhöhen"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "Verpasste Blutzuckerkontrolle"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "In Ihrer Pumpe wurde eine Erinnerung zur Blutzuckerkontrolle eingerichtet und ausgelöst. Bitte entfernen Sie diese oder geben Sie Ihren Glukosewert an die Pumpe weiter."
+
+/* Alert title for unknown */
+"Unknown error" = "Unbekannter Fehler"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "Bei der Verarbeitung des Alarms von der Pumpe ist ein unbekannter Fehler aufgetreten. Bitte melden Sie dies"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "Pumpeninformationen"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "Stummschaltton ein-/ausschalten?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "Nein, so lassen wie es ist"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "Ja, Stummschaltung deaktivieren"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "Ja, Stummschaltung aktivieren"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "Legen Sie das Basalprofil fest, das die Pumpe verwenden soll. Beachten Sie, dass das Profil in der Pumpe durch das Profil in %1$@ überschrieben wird."
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "Kein Insulin"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "Insulin ausgesetzt"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "Signalverlust"
+
+/* Text for Day unit */
+"day(s)" = "Tage)"
+
+/* Text for cannula age */
+"Cannula age" = "Kanülenalter"
+
+/* Text for reservoir age */
+"Reservoir age" = "Alter des Reservoirs"
diff --git a/DanaKit/Localization/en.lproj/Localizable.strings b/DanaKit/Localization/en.lproj/Localizable.strings
new file mode 100644
index 0000000..e8a39ee
--- /dev/null
+++ b/DanaKit/Localization/en.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "loading"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Dana-i/RS Setup"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "Select your pump"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "DanaRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "DanaRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "Dana-i"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "Setting up DanaRS v1"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "Password DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "Fill in password"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "Setting up DanaRS v3"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "Setting up Dana-i"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "ERROR: Failed to pair device"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "OK"
+
+/* Cancel button title */
+"Cancel" = "Cancel"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "Scanning"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "Connecting"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "Selecteer het type insuline dat u in deze pomp gaat gebruiken"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "Remove Pump"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "Are you sure you want to stop using Dana-i/RS?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "Delete pump"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "Delete Pump"
+
+/* Connection error message */
+"Error while connecting to device" = "Error while connecting to device"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "Dana-RS v3 found!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "Pincode required"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "Pin 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "Pin 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "Received invalid pincode lengths. Try again"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "Received invalid hex strings. Try again"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "Checksum failed. Try again"
+
+/* Title for delivery speed */
+"Delivery speed" = "Delivery speed"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 sec/U"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 sec/U"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 sec/U"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "The Dana pumps support different delivery speeds. You can set it up here"
+
+/* Text for finish button */
+"Finish" = "Finish"
+
+/* Dana setup complete p1 */
+"Your " = "Your "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " is ready to be used!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor"
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "Failed to make a connection"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "Failed to adjust temp basal"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "Failed to adjust suspension"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "Failed to generate Dana basal program"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "Failed to adjust basal"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "Failed to adjust pump time"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "Setting temp basal is not supported at this time"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "The insulin delivery has been suspend. Action failed"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "Action has been canceled, because the pump is busy"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "The max bolus limit is reached. Please try a lower amount or increase the limit"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "The max daily insulin limit is reached. Please try a lower amount or increase the limit"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "Only Automatic Bolus is supported"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "Please consider changing your dosing strategy in the setting menu"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "Resume delivery"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "Suspend delivery"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "Stop temp basal"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "Insulin Type"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "Scheduled Basal";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "Insulin Delivery";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "Insulin\nSuspended";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "Unknown";
+
+/* Units for showing temp basal rate */
+"U/hr" = "U/hr";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "Insulin Remaining";
+
+/* Text for Dana pump name */
+"Pump name" = "Pump name"
+
+/* Text for hardware model */
+"Hardware model" = "Hardware model"
+
+/* Text for firmware version */
+"Firmware version" = "Firmware version"
+
+/* DanaKit sync pump */
+"Sync pump data" = "Sync pump data"
+
+/* Text for last sync */
+"Last sync" = "Last sync"
+
+/* Text for pump time */
+"Pump time" = "Pump time"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "Sync Pump time"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "Time Change Detected"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "Yes, Sync to Current Time"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "No, Keep Pump As Is"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "Bolus";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "Temp Basal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "Basal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "Resume";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "Suspend";
+
+/* Title for user options */
+"User options" = "User options"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "Share Dana pump logs"
+
+/* Loading */
+"Loading" = "Loading"
+
+/* Text for save button */
+"Save" = "Save"
+
+/* Text for 24h display */
+"24h display" = "24h display"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "Should time be display in 12h or 24h"
+
+/* text on */
+"On" = "On"
+
+/* text off */
+"Off" = "Off"
+
+/* 12h */
+"12h notation" = "12h notation"
+
+/* 24h */
+"24h notation" = "24h notation"
+
+/* Text for Scroll function */
+"Scroll function" = "Scroll function"
+
+/* text for second */
+"sec" = "sec"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "Verlichting aan tijd"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "Lcd on time"
+
+/* beepAndAlarm */
+"Alarm beeps" = "Alarm beeps"
+
+/* beepAndAlarm.sound */
+"Sound" = "Sound"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "Vibration"
+
+/* beepAndAlarm.both */
+"Both" = "Both"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "Pump battery 0%"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "Pump battery is empty. Replace it now!"
+
+/* Alert title for pumpError */
+"Pump error" = "Pump error"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "Check the pump and try again"
+
+/* Alert title for occlusion */
+"Occlusion" = "Occlusion"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "Check the reservoir and infus and try again"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "Low pump battery"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "Pump battery needs to be replaced soon"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "Pump shutdown"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "Basal Compare"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "Blood glucose Measure"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "Remaining insulin level"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "Empty reservoir"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "Reservoir is empty. Replace it now!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "Check chaft"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "Basal limit reached"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "Daily limit reached"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "Missed Blood glucose check"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump"
+
+/* Alert title for unknown */
+"Unknown error" = "Unknown error"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "An unknown error has occurred during processing the alert from the pump. Please report this"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "Pump information"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "Toggle silent tone?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "No, Keep as is"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "Yes, Disable silent tones"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "Yes, Enable silent tones"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "No Insulin"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "Insulin Suspended"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "Signal Loss"
+
+/* Text for Day unit */
+"day(s)" = "day(s)"
+
+/* Text for cannula age */
+"Cannula age" = "Cannula age"
+
+/* Text for reservoir age */
+"Reservoir age" = "Reservoir age"
diff --git a/DanaKit/Localization/es.lproj/Localizable.strings b/DanaKit/Localization/es.lproj/Localizable.strings
new file mode 100644
index 0000000..2766c80
--- /dev/null
+++ b/DanaKit/Localization/es.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "cargando"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Configuración de Dana-i/RS"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "Seleccione su bomba"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "DanaRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "DanaRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "Dana-yo"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "Configurando DanaRS v1"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "Durante el proceso de emparejamiento, su DanaRS v3 mostrará un mensaje de emparejamiento mientras que su iPhone mostrará un mensaje para un código de emparejamiento. En su bomba, seleccione Aceptar y escriba el código en su iPhone. Después de eso, Loop está listo para comunicarse con su DanaRS v1."
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "Antes de comenzar con el proceso de emparejamiento, se recomienda verificar y, si es necesario, actualizar la contraseña de la bomba. Puede hacerlo yendo a la configuración de la bomba -&gt; configuración de usuario -&gt; contraseña. La contraseña predeterminada es 1234, si esta es su contraseña, considere cambiarla"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "Contraseña DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "Complete la contraseña"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "Configurando DanaRS v3"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "Durante el proceso de emparejamiento, su DanaRS v3 mostrará un mensaje de emparejamiento mientras que su iPhone mostrará un mensaje para dos códigos de emparejamiento. En su bomba, seleccione Aceptar y escriba los dos códigos en su iPhone. Después de eso, Loop está listo para comunicarse con su DanaRS v3."
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "Configurando Dana-i"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "Después de configurar el tipo de insulina y la velocidad del bolo, verá una pantalla con todas las bombas Dana encontradas. Seleccione la bomba que desea vincular con %1$@."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "Durante el proceso de emparejamiento, su Dana-i mostrará un mensaje de emparejamiento mientras que su iPhone mostrará un mensaje para un código de emparejamiento. En su bomba, seleccione Aceptar y escriba el código de 6 dígitos en la pantalla de su iPhone. Después de eso, %1$@ está listo para comunicarse con tu Dana-i."
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "ERROR: No se pudo emparejar el dispositivo"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "DE ACUERDO"
+
+/* Cancel button title */
+"Cancel" = "Cancelar"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "Exploración"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "Conectando"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "Seleccione el tipo de insulina que utilizará en esta bomba"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "Quitar bomba"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "¿Está seguro de que desea dejar de utilizar Dana-i/RS?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "Eliminar bomba"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "Eliminar bomba"
+
+/* Connection error message */
+"Error while connecting to device" = "Error al conectarse al dispositivo"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "¡Dana-RS v3 encontrado!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "Se requiere código PIN"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "Pin 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "Pin 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "Se recibieron longitudes de código PIN no válidas. Intentar otra vez"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "Se recibieron cadenas hexadecimales no válidas. Intentar otra vez"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "La suma de comprobación falló. Intentar otra vez"
+
+/* Title for delivery speed */
+"Delivery speed" = "Velocidad de entrega"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 seg/U"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 seg/U"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 segundos/U"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "Las bombas Dana admiten diferentes velocidades de entrega. Puedes configurarlo aquí"
+
+/* Text for finish button */
+"Finish" = "Finalizar"
+
+/* Dana setup complete p1 */
+"Your " = "Su "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " ¡Está listo para ser usado!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "Nota: Su bomba Dana tiene una configuración especial que le permite silenciar los pitidos de su bomba Dana. Para habilitar esto, comuníquese con su distribuidor Dana."
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "No se pudo establecer una conexión"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "No se pudo ajustar el basal temporal"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "No se pudo ajustar la suspensión"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "No se pudo generar el programa basal de Dana"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "No se pudo ajustar el basal"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "No se pudo ajustar el tiempo de la bomba"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "En este momento no se admite la configuración del basal temporal"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "La entrega de insulina ha sido suspendida. Accion: Fallida"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "La acción ha sido cancelada porque la bomba está ocupada."
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "Hay un tiempo de espera de bolo activo. El ciclo del bucle no se puede completar hasta que el tiempo de espera esté inactivo"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "Se alcanza el límite máximo de bolo. Pruebe con una cantidad menor o aumente el límite"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "Se alcanza el límite máximo diario de insulina. Pruebe con una cantidad menor o aumente el límite"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "Solo se admite el bolo automático"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "Considere cambiar su estrategia de dosificación en el menú de configuración."
+
+/* Dana settings resume delivery */
+"Resume delivery" = "Reanudar la entrega"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "Suspender entrega"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "Detener basal temporal"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "Tipo de insulina"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "basal programado";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "Entrega de insulina";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "Insulina\nSuspendida";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "Desconocido";
+
+/* Units for showing temp basal rate */
+"U/hr" = "U/h";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "Insulina restante";
+
+/* Text for Dana pump name */
+"Pump name" = "Nombre de la bomba"
+
+/* Text for hardware model */
+"Hardware model" = "Modelo de hardware"
+
+/* Text for firmware version */
+"Firmware version" = "Versión de firmware"
+
+/* DanaKit sync pump */
+"Sync pump data" = "Sincronizar datos de la bomba"
+
+/* Text for last sync */
+"Last sync" = "Última sincronización"
+
+/* Text for pump time */
+"Pump time" = "tiempo de bombeo"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "Sincronizar el tiempo de la bomba"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "Cambio de hora detectado"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "La hora de su bomba es diferente de la hora actual. ¿Quiere actualizar la hora de su bomba a la hora actual?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "La hora de su bomba es diferente de la hora actual. El tiempo de su bomba controla la configuración de su terapia programada. Desplácese hacia abajo hasta la fila Hora de la bomba para revisar la diferencia horaria y configurar su bomba.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "Sí, sincronizar con la hora actual"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "No, mantenga la bomba como está"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "Bolo";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "basal temporal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "Basal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "Reanudar";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "Suspender";
+
+/* Title for user options */
+"User options" = "Opciones de usuario"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "Comparta registros de bombas Dana"
+
+/* Loading */
+"Loading" = "Cargando"
+
+/* Text for save button */
+"Save" = "Ahorrar"
+
+/* Text for 24h display */
+"24h display" = "pantalla 24h"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "¿Debería mostrarse la hora en 12 h o 24 h?"
+
+/* text on */
+"On" = "En"
+
+/* text off */
+"Off" = "Apagado"
+
+/* 12h */
+"12h notation" = "notación de 12h"
+
+/* 24h */
+"24h notation" = "Notación de 24 horas"
+
+/* Text for Scroll function */
+"Scroll function" = "Función de desplazamiento"
+
+/* text for second */
+"sec" = "segundo"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "Luz de fondo a tiempo"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "LCD a tiempo"
+
+/* beepAndAlarm */
+"Alarm beeps" = "La alarma suena"
+
+/* beepAndAlarm.sound */
+"Sound" = "Sonido"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "Vibración"
+
+/* beepAndAlarm.both */
+"Both" = "Ambos"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "Batería de la bomba 0%"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "La batería de la bomba está vacía. ¡Reemplázalo ahora!"
+
+/* Alert title for pumpError */
+"Pump error" = "Error de bomba"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "Compruebe la bomba y vuelva a intentarlo."
+
+/* Alert title for occlusion */
+"Occlusion" = "Oclusión"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "Compruebe el depósito y la infusión e inténtelo de nuevo."
+
+/* Alert title for lowBattery */
+"Low pump battery" = "Batería baja de la bomba"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "La batería de la bomba debe reemplazarse pronto"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "Parada de bomba"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "Hace demasiado tiempo que no se produce ninguna interacción con la bomba. Desactive esta función en la bomba o interactúe con la bomba"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "Comparación básica"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "Medida de glucosa en sangre"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "Nivel de insulina restante"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "Depósito vacío"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "El depósito está vacío. ¡Reemplázalo ahora!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "comprobar chaft"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "La bomba ha detectado un problema con su eje. Retire el depósito, verifique todo y vuelva a intentarlo."
+
+/* Alert title for basalMax */
+"Basal limit reached" = "Límite basal alcanzado"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "Se ha alcanzado su límite basal diario. Comuníquese con su distribuidor de Dana para aumentar el límite."
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "Límite diario alcanzado"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "Se ha alcanzado su límite diario de insulina. Comuníquese con su distribuidor de Dana para aumentar el límite."
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "Control de glucosa en sangre omitido"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "Se ha configurado un recordatorio de control de glucosa en sangre en su bomba y se activa. Quítelo o proporcione su nivel de glucosa a la bomba."
+
+/* Alert title for unknown */
+"Unknown error" = "Error desconocido"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "Se ha producido un error desconocido durante el procesamiento de la alerta de la bomba. Por favor reporta esto"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "Sonsacar información"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "¿Alternar tono silencioso?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "No, manténgalo como está."
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "Sí, desactivar los tonos silenciosos."
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "Sí, habilitar tonos silenciosos"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "Establezca el perfil basal que debe utilizar la bomba. Tenga en cuenta que sobrescribirá el perfil que está en la bomba, con el de %1$@"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "Sin insulina"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "Insulina suspendida"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "Pérdida de señal"
+
+/* Text for Day unit */
+"day(s)" = "días)"
+
+/* Text for cannula age */
+"Cannula age" = "Edad de la cánula"
+
+/* Text for reservoir age */
+"Reservoir age" = "Edad del yacimiento"
diff --git a/DanaKit/Localization/fi.lproj/Localizable.strings b/DanaKit/Localization/fi.lproj/Localizable.strings
new file mode 100644
index 0000000..5c0ba86
--- /dev/null
+++ b/DanaKit/Localization/fi.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "Ladataan"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Dana-i/RS-asetukset"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "Valitse pumppusi"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "DanaRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "DanaRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "Dana-i"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "Asennetaan DanaRS v1"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "Pariliitoksen muodostusprosessin aikana DanaRS v3 näyttää pariliitoskehotteen, kun taas iPhone näyttää pariliitoskoodin kehotteen. Valitse pumpussasi OK ja kirjoita koodi iPhoneen. Sen jälkeen Loop on valmis kommunikoimaan DanaRS v1:n kanssa"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "Ennen pariliitosprosessin aloittamista on suositeltavaa tarkistaa pumpun salasana ja tarvittaessa päivittää se. Voit tehdä tämän siirtymällä kohtaan Pumpun asetukset -&gt; Käyttäjäasetukset -&gt; Salasana. Oletussalasana on 1234, jos tämä on salasanasi, harkitse sen vaihtamista"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "Salasana DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "Täytä salasana"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "Otetaan käyttöön DanaRS v3"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "Pariliitoksen muodostusprosessin aikana DanaRS v3 näyttää pariliitoskehotteen, kun taas iPhone näyttää kehotteen kahdelle pariliitoskoodille. Valitse pumpussasi OK ja kirjoita kaksi koodia iPhonessa. Sen jälkeen Loop on valmis kommunikoimaan DanaRS v3:n kanssa"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "Asetetaan Dana-i"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "Kun olet määrittänyt insuliinityypin ja bolusnopeuden, näet näytön, jossa on kaikki löydetyt Dana-pumput. Valitse pumppu, jonka haluat yhdistää kohteeseen %1$@."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "Parinmuodostusprosessin aikana Dana-i näyttää pariliitoskehotteen, kun taas iPhone näyttää pariliitoskoodin kehotteen. Valitse pumpulla OK ja kirjoita 6-numeroinen koodi iPhonen näyttöön. Sen jälkeen %1$@ on valmis kommunikoimaan Dana-i:n kanssa"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "VIRHE: Laitteen yhdistäminen epäonnistui"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "OK"
+
+/* Cancel button title */
+"Cancel" = "Peruuttaa"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "Skannaus"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "Yhdistetään"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "Valitse insuliinityyppi, jota käytät tässä pumpussa"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "Poista pumppu"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "Haluatko varmasti lopettaa Dana-i/RS:n käytön?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "Poista pumppu"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "Poista pumppu"
+
+/* Connection error message */
+"Error while connecting to device" = "Virhe muodostettaessa yhteyttä laitteeseen"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "Dana-RS v3 löytyi!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "Pin-koodi vaaditaan"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "Pin 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "Pin 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "Vastaanotettu virheelliset PIN-koodin pituudet. Yritä uudelleen"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "Vastaanotettu virheelliset heksadesimaattiset merkkijonot. Yritä uudelleen"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "Tarkistussumma epäonnistui. Yritä uudelleen"
+
+/* Title for delivery speed */
+"Delivery speed" = "Toimituksen nopeus"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 s/U"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 s/U"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 s/U"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "Dana-pumput tukevat erilaisia ​​toimitusnopeuksia. Voit määrittää sen täällä"
+
+/* Text for finish button */
+"Finish" = "Suorittaa loppuun"
+
+/* Dana setup complete p1 */
+"Your " = "Sinun "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " on valmis käytettäväksi!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "Huomautus: Dana-pumpussasi on erikoisasetus, jonka avulla voit hiljentää Dana-pumpun piippaukset. Ota tämä käyttöön ottamalla yhteyttä Dana-jälleenmyyjääsi"
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "Yhteyden muodostaminen epäonnistui"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "Temp-basaalin säätäminen epäonnistui"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "Jousituksen säätäminen epäonnistui"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "Dana-perusohjelman luominen epäonnistui"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "Basaalin säätö epäonnistui"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "Pumpun ajan säätäminen epäonnistui"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "Temp Basal -asetusta ei tueta tällä hetkellä"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "Insuliinin annostelu on keskeytetty. Toiminto epäonnistui"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "Toiminto on peruutettu, koska pumppu on varattu"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "Boluksen aikakatkaisu on aktiivinen. Silmukkasykliä ei voida suorittaa loppuun ennen kuin aikakatkaisu on passiivinen"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "Boluksen enimmäisraja on saavutettu. Kokeile pienempää määrää tai nosta rajaa"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "Päivittäinen insuliiniraja on saavutettu. Kokeile pienempää määrää tai nosta rajaa"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "Vain automaattinen bolus on tuettu"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "Harkitse annostusstrategian muuttamista asetusvalikossa"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "Jatka toimitusta"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "Keskeytä toimitus"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "Pysäytä temp basaali"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "Insuliinityyppi"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "Suunniteltu Basal";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "Insuliinin toimitus";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "Insuliini\nKeskeytetty";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "Tuntematon";
+
+/* Units for showing temp basal rate */
+"U/hr" = "U/h";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "Insuliini jäljellä";
+
+/* Text for Dana pump name */
+"Pump name" = "Pumpun nimi"
+
+/* Text for hardware model */
+"Hardware model" = "Laitteiston malli"
+
+/* Text for firmware version */
+"Firmware version" = "Laiteversio"
+
+/* DanaKit sync pump */
+"Sync pump data" = "Synkronoi pumpun tiedot"
+
+/* Text for last sync */
+"Last sync" = "Viimeisin synkronointi"
+
+/* Text for pump time */
+"Pump time" = "Pumpun aika"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "Synkronoi pumpun aika"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "Aikamuutos havaittu"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "Pumpun aika eroaa nykyisestä ajasta. Haluatko päivittää pumpun kellonajan nykyiseen aikaan?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "Pumpun aika eroaa nykyisestä ajasta. Pumpun aika ohjaa ajoitettuja hoitoasetuksiasi. Vieritä alas Pumpun aika -riville nähdäksesi aikaeron ja määrittääksesi pumpun.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "Kyllä, synkronoi nykyiseen aikaan"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "Ei, pidä pumppu sellaisena kuin se on"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "Bolus";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "Temp Basal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "Basal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "Jatkaa";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "Keskeyttää";
+
+/* Title for user options */
+"User options" = "Käyttäjävaihtoehdot"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "Jaa Dana-pumppulokit"
+
+/* Loading */
+"Loading" = "Ladataan"
+
+/* Text for save button */
+"Save" = "Tallentaa"
+
+/* Text for 24h display */
+"24h display" = "24h näyttö"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "Pitäisikö ajan näkyä 12h tai 24h"
+
+/* text on */
+"On" = "Päällä"
+
+/* text off */
+"Off" = "Vinossa"
+
+/* 12h */
+"12h notation" = "12h merkintä"
+
+/* 24h */
+"24h notation" = "24 tunnin merkintä"
+
+/* Text for Scroll function */
+"Scroll function" = "Vieritystoiminto"
+
+/* text for second */
+"sec" = "sek"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "Taustavalo ajoissa"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "Lcd ajoissa"
+
+/* beepAndAlarm */
+"Alarm beeps" = "Hälytys piippaa"
+
+/* beepAndAlarm.sound */
+"Sound" = "Ääni"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "Tärinä"
+
+/* beepAndAlarm.both */
+"Both" = "Molemmat"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "pumpun akku 0 %"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "Pumpun akku on tyhjä. Vaihda se nyt!"
+
+/* Alert title for pumpError */
+"Pump error" = "Pumpun virhe"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "Tarkista pumppu ja yritä uudelleen"
+
+/* Alert title for occlusion */
+"Occlusion" = "Okkluusio"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "Tarkista säiliö ja infuusio ja yritä uudelleen"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "Pumpun akku vähissä"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "Pumpun akku on vaihdettava pian"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "Pumpun sammutus"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "Pumpun kanssa ei ole ollut vuorovaikutusta liian pitkään. Poista tämä toiminto käytöstä pumpussa tai käytä vuorovaikutusta pumpun kanssa"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "Perusvertailu"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "Mittaa verensokeri"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "Jäljellä oleva insuliinitaso"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "Tyhjä säiliö"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "Säiliö on tyhjä. Vaihda se nyt!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "Tarkista chaft"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "Pumppu on havainnut hankaansa ongelman. Irrota säiliö, tarkista kaikki ja yritä uudelleen"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "Perusraja saavutettu"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "Päivittäinen perusrajasi on saavutettu. Ota yhteyttä Dana-jälleenmyyjään rajan nostamiseksi"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "Päivittäinen raja saavutettu"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "Päivittäinen insuliinirajasi on saavutettu. Ota yhteyttä Dana-jälleenmyyjään rajan nostamiseksi"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "Verensokerin mittaus jäi väliin"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "Verensokerin tarkistusmuistutus on asetettu pumppuusi ja se laukeaa. Poista se tai anna glukoositasosi pumpulle"
+
+/* Alert title for unknown */
+"Unknown error" = "Tuntematon virhe"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "Pumpun hälytyksen käsittelyn aikana tapahtui tuntematon virhe. Ilmoita tästä"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "Pumpun tiedot"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "Vaihtaako hiljainen ääni?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "Ei, pysy sellaisena kuin on"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "Kyllä, poista äänettömät äänet käytöstä"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "Kyllä, ota äänettömät äänet käyttöön"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "Aseta perusprofiili, jota pumpun tulee käyttää. Huomaa, että se korvaa pumpussa olevan profiilin kohdassa %1$@"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "Ei insuliinia"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "Insuliini keskeytetty"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "Signaalin menetys"
+
+/* Text for Day unit */
+"day(s)" = "päivä(t)"
+
+/* Text for cannula age */
+"Cannula age" = "Kanyylin ikä"
+
+/* Text for reservoir age */
+"Reservoir age" = "Säiliön ikä"
diff --git a/DanaKit/Localization/fr.lproj/Localizable.strings b/DanaKit/Localization/fr.lproj/Localizable.strings
new file mode 100644
index 0000000..da4cf98
--- /dev/null
+++ b/DanaKit/Localization/fr.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "chargement"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Configuration Dana-i/RS"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "Sélectionnez votre pompe"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "DanaRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "DanaRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "Dana-je"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "Configuration de DanaRS v1"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "Pendant le processus de couplage, votre DanaRS v3 affichera une invite de couplage tandis que votre iPhone affichera une invite pour un code de couplage. Sur votre pompe, sélectionnez OK et saisissez le code sur votre iPhone. Après cela, Loop est prêt à communiquer avec votre DanaRS v1"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "Avant de commencer le processus d&#39;appairage, il est recommandé de vérifier et, si nécessaire, de mettre à jour le mot de passe de la pompe. Vous pouvez le faire en accédant aux paramètres de la pompe -&gt; paramètres utilisateur -&gt; mot de passe. Le mot de passe par défaut est 1234, s&#39;il s&#39;agit de votre mot de passe, pensez à le changer"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "Mot de passe DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "Remplissez le mot de passe"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "Configuration de DanaRS v3"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "Pendant le processus de couplage, votre DanaRS v3 affichera une invite de couplage tandis que votre iPhone affichera une invite pour deux codes de couplage. Sur votre pompe, sélectionnez OK et tapez les deux codes sur votre iPhone. Après cela, Loop est prêt à communiquer avec votre DanaRS v3"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "Configuration de Dana-i"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "Après avoir configuré le type d&#39;insuline et la vitesse du bolus, vous verrez un écran avec toutes les pompes Dana trouvées. Sélectionnez la pompe que vous souhaitez associer à %1$@."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "Pendant le processus de couplage, votre Dana-i affichera une invite de couplage tandis que votre iPhone affichera une invite pour un code de couplage. Sur votre pompe, sélectionnez OK et tapez le code à 6 chiffres sur l&#39;écran de votre iPhone. Après cela, %1$@ est prêt à communiquer avec votre Dana-i"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "ERREUR : Échec du couplage de l&#39;appareil"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "D&#39;ACCORD"
+
+/* Cancel button title */
+"Cancel" = "Annuler"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "Balayage"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "De liaison"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "Sélectionnez le type d&#39;insuline que vous utiliserez dans cette pompe"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "Retirer la pompe"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "Etes-vous sûr de vouloir arrêter d&#39;utiliser Dana-i/RS ?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "Supprimer la pompe"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "Supprimer la pompe"
+
+/* Connection error message */
+"Error while connecting to device" = "Erreur lors de la connexion à l&#39;appareil"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "Dana-RS v3 trouvé !"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "Code PIN requis"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "Broche 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "Broche 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "Longueurs de code PIN non valides reçues. Essayer à nouveau"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "Chaînes hexadécimales non valides reçues. Essayer à nouveau"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "La somme de contrôle a échoué. Essayer à nouveau"
+
+/* Title for delivery speed */
+"Delivery speed" = "Vitesse de livraison"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 secondes/U"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 secondes/U"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 secondes/U"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "Les pompes Dana prennent en charge différentes vitesses de livraison. Vous pouvez le configurer ici"
+
+/* Text for finish button */
+"Finish" = "Finition"
+
+/* Dana setup complete p1 */
+"Your " = "Ton "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " est prêt à être utilisé !"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "Remarque : Votre pompe Dana dispose d&#39;un réglage spécial qui vous permet de faire taire les bips de votre pompe Dana. Pour l&#39;activer, veuillez contacter votre distributeur Dana"
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "Impossible d&#39;établir une connexion"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "Échec du réglage de la température basale"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "Impossible de régler la suspension"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "Échec de la génération du programme basal Dana"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "Échec du réglage basal"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "Échec du réglage du temps de pompe"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "Le réglage de la température basale n&#39;est pas pris en charge pour le moment"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "L&#39;administration d&#39;insuline a été suspendue. Action: échoué"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "L&#39;action a été annulée car la pompe est occupée"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "Un délai d&#39;attente de bolus est actif. Le cycle de boucle ne peut pas être terminé tant que le délai d&#39;attente n&#39;est pas inactif"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "La limite maximale du bolus est atteinte. Veuillez essayer un montant inférieur ou augmenter la limite"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "La limite quotidienne maximale d’insuline est atteinte. Veuillez essayer un montant inférieur ou augmenter la limite"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "Seul le bolus automatique est pris en charge"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "Veuillez envisager de modifier votre stratégie de dosage dans le menu de configuration."
+
+/* Dana settings resume delivery */
+"Resume delivery" = "Reprendre la livraison"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "Suspendre la livraison"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "Arrêter la température basale"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "Type d&#39;insuline"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "Basal programmé";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "Administration d&#39;insuline";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "Insuline\nSuspendue";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "Inconnu";
+
+/* Units for showing temp basal rate */
+"U/hr" = "U/heure";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "Insuline restante";
+
+/* Text for Dana pump name */
+"Pump name" = "Nom de la pompe"
+
+/* Text for hardware model */
+"Hardware model" = "Modèle de matériel"
+
+/* Text for firmware version */
+"Firmware version" = "Version du firmware"
+
+/* DanaKit sync pump */
+"Sync pump data" = "Synchroniser les données de la pompe"
+
+/* Text for last sync */
+"Last sync" = "Dernière synchronisation"
+
+/* Text for pump time */
+"Pump time" = "Temps de pompe"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "Temps de synchronisation de la pompe"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "Changement d&#39;heure détecté"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "L&#39;heure indiquée sur votre pompe est différente de l&#39;heure actuelle. Voulez-vous mettre à jour l’heure de votre pompe à l’heure actuelle ?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "L&#39;heure indiquée sur votre pompe est différente de l&#39;heure actuelle. L&#39;heure de votre pompe contrôle vos paramètres de thérapie programmés. Faites défiler jusqu&#39;à la ligne Pump Time pour consulter le décalage horaire et configurer votre pompe.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "Oui, synchroniser avec l&#39;heure actuelle"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "Non, gardez la pompe telle quelle"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "Bol";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "Température basale";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "Basal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "CV";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "Suspendre";
+
+/* Title for user options */
+"User options" = "Options utilisateur"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "Partager les journaux de la pompe Dana"
+
+/* Loading */
+"Loading" = "Chargement"
+
+/* Text for save button */
+"Save" = "Sauvegarder"
+
+/* Text for 24h display */
+"24h display" = "affichage 24h"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "L&#39;heure doit-elle être affichée en 12h ou 24h"
+
+/* text on */
+"On" = "Sur"
+
+/* text off */
+"Off" = "Désactivé"
+
+/* 12h */
+"12h notation" = "notation 12h"
+
+/* 24h */
+"24h notation" = "Notation 24h"
+
+/* Text for Scroll function */
+"Scroll function" = "Fonction de défilement"
+
+/* text for second */
+"sec" = "seconde"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "Rétroéclairage à l&#39;heure"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "Lcd à l&#39;heure"
+
+/* beepAndAlarm */
+"Alarm beeps" = "Bips d&#39;alarme"
+
+/* beepAndAlarm.sound */
+"Sound" = "Son"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "Vibration"
+
+/* beepAndAlarm.both */
+"Both" = "Les deux"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "Batterie de la pompe 0%"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "La batterie de la pompe est vide. Remplacez-le maintenant !"
+
+/* Alert title for pumpError */
+"Pump error" = "Erreur de pompe"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "Vérifiez la pompe et réessayez"
+
+/* Alert title for occlusion */
+"Occlusion" = "Occlusion"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "Vérifiez le réservoir et la perfusion, puis réessayez"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "Batterie de pompe faible"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "La batterie de la pompe doit être remplacée bientôt"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "Arrêt de la pompe"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "Il n’y a eu aucune interaction avec la pompe depuis trop longtemps. Soit désactivez cette fonction dans la pompe, soit interagissez avec la pompe"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "Comparaison basale"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "Mesure de la glycémie"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "Niveau d&#39;insuline restant"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "Réservoir vide"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "Le réservoir est vide. Remplacez-le maintenant !"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "Chèque"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "La pompe a détecté un problème avec son arbre. Veuillez retirer le réservoir, vérifier tout et réessayer"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "Limite basale atteinte"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "Votre limite basale quotidienne a été atteinte. Veuillez contacter votre distributeur Dana pour augmenter la limite"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "Limite quotidienne atteinte"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "Votre limite quotidienne d’insuline a été atteinte. Veuillez contacter votre distributeur Dana pour augmenter la limite"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "Contrôle de glycémie manqué"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "Un rappel de contrôle de glycémie a été configuré dans votre pompe et est déclenché. Veuillez le retirer ou donner votre niveau de glucose à la pompe"
+
+/* Alert title for unknown */
+"Unknown error" = "Erreur inconnue"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "Une erreur inconnue s&#39;est produite lors du traitement de l&#39;alerte de la pompe. Veuillez signaler ceci"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "Pomper des informations"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "Activer/désactiver la tonalité silencieuse ?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "Non, garder tel quel"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "Oui, désactivez les tonalités silencieuses"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "Oui, activer les tonalités silencieuses"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "Définissez le profil basal que la pompe doit utiliser. Notez qu&#39;il écrasera le profil qui se trouve dans la pompe par celui de %1$@"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "Pas d&#39;insuline"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "Insuline suspendue"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "Perte de signal"
+
+/* Text for Day unit */
+"day(s)" = "jours)"
+
+/* Text for cannula age */
+"Cannula age" = "Âge de la canule"
+
+/* Text for reservoir age */
+"Reservoir age" = "Âge du réservoir"
diff --git a/DanaKit/Localization/he.lproj/Localizable.strings b/DanaKit/Localization/he.lproj/Localizable.strings
new file mode 100644
index 0000000..1c25ff7
--- /dev/null
+++ b/DanaKit/Localization/he.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "טוען"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "הגדרת Dana-i/RS"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "בחר את המשאבה שלך"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "DanaRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "DanaRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "דנה-אי"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "הגדרת DanaRS v1"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "במהלך תהליך ההתאמה, ה-DanaRS v3 שלך יציג הנחית התאמה ואילו ה-iPhone שלך ​​יציג הנחיה לקוד התאמה. במשאבה, בחר אישור והקלד את הקוד באייפון. לאחר מכן, Loop מוכן לתקשר עם DanaRS v1 שלך"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "לפני שמתחילים בתהליך ההתאמה, מומלץ לבדוק, ובמידת הצורך לעדכן, את סיסמת המשאבה. אתה יכול לעשות זאת על ידי מעבר להגדרות המשאבה -&gt; הגדרות משתמש -&gt; סיסמה. סיסמת ברירת המחדל היא 1234, אם זו הסיסמה שלך, אנא שקול לשנות אותה"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "סיסמה DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "מלא סיסמה"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "הגדרת DanaRS v3"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "במהלך תהליך ההתאמה, ה-DanaRS v3 שלך יציג בקשת התאמה ואילו ה-iPhone שלך ​​יציג הנחיה לשני קודי התאמה. במשאבה, בחר אישור והקלד את שני הקודים באייפון שלך. לאחר מכן, Loop מוכן לתקשר עם ה-DanaRS v3 שלך"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "הגדרת Dana-i"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "לאחר הגדרת סוג האינסולין ומהירות הבולוס, תראה מסך עם כל משאבות דנה שנמצאו. בחר את המשאבה שברצונך לקשר אליה %1$@."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "במהלך תהליך ההתאמה, ה-Dana-i שלך יציג הנחית התאמה ואילו ה-iPhone שלך ​​יציג הנחיה לקוד התאמה. בשאיבה, בחר אישור והקלד את הקוד בן 6 הספרות במסך באייפון שלך. לאחר מכן, %1$@ מוכן לתקשר עם ה-Dana-i שלך"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "שגיאה: התאמת המכשיר נכשלה"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "בסדר"
+
+/* Cancel button title */
+"Cancel" = "לְבַטֵל"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "סריקה"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "מְקַשֵׁר"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "בחר את סוג האינסולין שבו תשתמש במשאבה זו"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "הסר את המשאבה"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "האם אתה בטוח שברצונך להפסיק להשתמש ב-Dana-i/RS?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "מחק משאבה"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "מחק משאבה"
+
+/* Connection error message */
+"Error while connecting to device" = "שגיאה בעת התחברות למכשיר"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "Dana-RS v3 נמצא!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "נדרש פיקוד"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "סיכה 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "סיכה 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "קיבלו אורכי פיקוד לא חוקיים. נסה שוב"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "התקבלו מחרוזות hex לא חוקיות. נסה שוב"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "סכום הבדיקה נכשל. נסה שוב"
+
+/* Title for delivery speed */
+"Delivery speed" = "מהירות משלוח"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 שניות/U"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 שניות/U"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 שניות/U"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "משאבות דנה תומכות במהירויות משלוח שונות. אתה יכול להגדיר את זה כאן"
+
+/* Text for finish button */
+"Finish" = "סיים"
+
+/* Dana setup complete p1 */
+"Your " = "שֶׁלְךָ "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " מוכן לשימוש!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "הערה: למשאבת Dana יש הגדרה מיוחדת המאפשרת לך להשתיק את צפצופים של משאבת Dana. כדי לאפשר זאת, אנא צור קשר עם מפיץ דנה שלך"
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "יצירת החיבור נכשלה"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "התאמת הטמפ&#39; הבסיסית נכשלה"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "התאמת ההשעיה נכשלה"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "יצירת התוכנית הבסיסית של דנה נכשלה"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "התאמת הבסיס נכשלה"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "התאמת זמן המשאבה נכשלה"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "הגדרת הבסיס הטמפ&#39; אינה נתמכת בשלב זה"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "מתן האינסולין הושעה. פעולה: נכשל"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "הפעולה בוטלה, כי המשאבה תפוסה"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "פסק זמן בולוס פעיל. לא ניתן להשלים את מחזור הלולאה עד שפסק הזמן אינו פעיל"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "הגעת למגבלת הבולוס המקסימלית. נסה סכום נמוך יותר או הגדל את המגבלה"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "הגיעה לגבול האינסולין היומי המקסימלי. אנא נסה סכום נמוך יותר או הגדל את המגבלה"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "רק בולוס אוטומטי נתמך"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "אנא שקול לשנות את אסטרטגיית המינון שלך בתפריט ההגדרות"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "המשך משלוח"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "השעיית משלוח"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "עצור את הבסיס הזמני"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "סוג אינסולין"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "בזאל מתוזמן";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "מתן אינסולין";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "אינסולין\nמושעה";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "לא ידוע";
+
+/* Units for showing temp basal rate */
+"U/hr" = "U/hr";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "אינסולין שנותר";
+
+/* Text for Dana pump name */
+"Pump name" = "שם המשאבה"
+
+/* Text for hardware model */
+"Hardware model" = "דגם חומרה"
+
+/* Text for firmware version */
+"Firmware version" = "גרסת קושחה"
+
+/* DanaKit sync pump */
+"Sync pump data" = "סנכרון נתוני משאבה"
+
+/* Text for last sync */
+"Last sync" = "סנכרון אחרון"
+
+/* Text for pump time */
+"Pump time" = "זמן משאבה"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "זמן משאבת סנכרון"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "זוהה שינוי בזמן"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "השעה במשאבה שלך שונה מהשעה הנוכחית. האם ברצונך לעדכן את השעה במשאבה לשעה הנוכחית?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "השעה במשאבה שלך שונה מהשעה הנוכחית. הזמן של המשאבה שלך שולט בהגדרות הטיפול המתוכנן שלך. גלול מטה לשורת זמן משאבה כדי לסקור את הפרש הזמן ולהגדיר את המשאבה שלך.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "כן, סנכרן לשעה נוכחית"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "לא, שמור את המשאבה כפי שהיא"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "בולוס";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "טמפ בזאל";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "בזאלי";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "קורות חיים";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "לְהַשְׁעוֹת";
+
+/* Title for user options */
+"User options" = "אפשרויות משתמש"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "שתף יומני משאבת דנה"
+
+/* Loading */
+"Loading" = "טוען"
+
+/* Text for save button */
+"Save" = "להציל"
+
+/* Text for 24h display */
+"24h display" = "תצוגה של 24 שעות"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "הזמן אמור להיות מוצג ב-12 או 24 שעות"
+
+/* text on */
+"On" = "עַל"
+
+/* text off */
+"Off" = "כבוי"
+
+/* 12h */
+"12h notation" = "סימון 12 שעות"
+
+/* 24h */
+"24h notation" = "סימון 24 שעות"
+
+/* Text for Scroll function */
+"Scroll function" = "פונקציית גלילה"
+
+/* text for second */
+"sec" = "שניות"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "תאורה אחורית בזמן"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "LCD בזמן"
+
+/* beepAndAlarm */
+"Alarm beeps" = "אזעקה מצפצפת"
+
+/* beepAndAlarm.sound */
+"Sound" = "נשמע"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "רֶטֶט"
+
+/* beepAndAlarm.both */
+"Both" = "שניהם"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "סוללת משאבה 0%"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "סוללת המשאבה ריקה. החלף אותו עכשיו!"
+
+/* Alert title for pumpError */
+"Pump error" = "שגיאת משאבה"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "בדוק את המשאבה ונסה שוב"
+
+/* Alert title for occlusion */
+"Occlusion" = "סְפִיגָה"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "בדוק את המאגר והעירוי ונסה שוב"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "סוללת משאבה נמוכה"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "יש להחליף את סוללת המשאבה בקרוב"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "כיבוי משאבה"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "לא היו אינטראקציות עם המשאבה במשך זמן רב מדי. או השבת את הפונקציה הזו במשאבה או עשה אינטראקציה עם המשאבה"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "Basal Compare"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "מדידת גלוקוז בדם"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "רמת האינסולין שנותרה"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "מאגר ריק"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "המאגר ריק. החלף אותו עכשיו!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "בדוק צ&#39;פט"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "המשאבה זיהתה בעיה עם המט שלה. אנא הסר את המאגר, בדוק הכל ונסה שוב"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "הגבול הבסיסי הגיע"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "הגבול הבסיסי היומי שלך הגיע. אנא צור קשר עם מפיץ דנה שלך כדי להגדיל את המגבלה"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "הגעת למגבלה היומית"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "גבול האינסולין היומי שלך הגיע. אנא צור קשר עם מפיץ דנה שלך כדי להגדיל את המגבלה"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "פספסה בדיקת גלוקוז בדם"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "תזכורת לבדיקת רמת הסוכר בדם הוגדרה במשאבה שלך והיא מופעלת. אנא הסר אותו או תן את רמת הגלוקוז שלך למשאבה"
+
+/* Alert title for unknown */
+"Unknown error" = "שגיאה לא ידועה"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "אירעה שגיאה לא ידועה במהלך עיבוד ההתראה מהמשאבה. נא לדווח על כך"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "מידע על משאבה"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "להחליף צליל שקט?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "לא, שמור כפי שהוא"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "כן, השבת צלילים שקטים"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "כן, אפשר צלילים שקטים"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "הגדר את הפרופיל הבסיסי שבו המשאבה צריכה להשתמש. שימו לב, זה יחליף את הפרופיל שנמצא במשאבה, עם זה ב-%1$@"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "אין אינסולין"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "אינסולין מושעה"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "אובדן אות"
+
+/* Text for Day unit */
+"day(s)" = "ימים"
+
+/* Text for cannula age */
+"Cannula age" = "גיל קנולה"
+
+/* Text for reservoir age */
+"Reservoir age" = "גיל המאגר"
diff --git a/DanaKit/Localization/hi.lproj/Localizable.strings b/DanaKit/Localization/hi.lproj/Localizable.strings
new file mode 100644
index 0000000..fd3658d
--- /dev/null
+++ b/DanaKit/Localization/hi.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "लोड हो रहा है"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "दाना-आई/आरएस सेटअप"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "अपना पंप चुनें"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "दानाआरएस-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "दानाआरएस-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "दाना-आई"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "DanaRS v1 की स्थापना"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "पेयरिंग प्रक्रिया के दौरान, आपका DanaRS v3 पेयरिंग प्रॉम्प्ट दिखाएगा जबकि आपका iPhone पेयरिंग कोड के लिए प्रॉम्प्ट दिखाएगा। अपने पंप पर, OK चुनें और अपने iPhone पर कोड टाइप करें। उसके बाद, Loop आपके DanaRS v1 के साथ संवाद करने के लिए तैयार है"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "पेयरिंग प्रक्रिया शुरू करने से पहले, पंप पासवर्ड की जांच करना और यदि आवश्यक हो तो उसे अपडेट करना अनुशंसित है। आप पंप सेटिंग्स -&gt; उपयोगकर्ता सेटिंग्स -&gt; पासवर्ड पर जाकर ऐसा कर सकते हैं। डिफ़ॉल्ट पासवर्ड 1234 है, अगर यह आपका पासवर्ड है, तो कृपया इसे बदलने पर विचार करें"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "पासवर्ड DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "पासवर्ड भरें"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "DanaRS v3 की स्थापना"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "पेयरिंग प्रक्रिया के दौरान, आपका DanaRS v3 एक पेयरिंग प्रॉम्प्ट दिखाएगा जबकि आपका iPhone दो पेयरिंग कोड के लिए प्रॉम्प्ट दिखाएगा। अपने पंप पर, OK चुनें और अपने iPhone पर दो कोड टाइप करें। उसके बाद, लूप आपके DanaRS v3 के साथ संवाद करने के लिए तैयार है"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "दाना-आई की स्थापना"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "इंसुलिन का प्रकार और बोलस स्पीड सेट करने के बाद, आपको सभी पाए गए दाना पंपों के साथ एक स्क्रीन दिखाई देगी। उस पंप का चयन करें जिसे आप %1$@ से लिंक करना चाहते हैं।"
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "पेयरिंग प्रक्रिया के दौरान, आपका Dana-i पेयरिंग प्रॉम्प्ट दिखाएगा जबकि आपका iPhone पेयरिंग कोड के लिए प्रॉम्प्ट दिखाएगा। अपने पंप पर, OK चुनें और अपने iPhone पर स्क्रीन पर 6-अंकीय कोड टाइप करें। उसके बाद, %1$@ आपके Dana-i से संवाद करने के लिए तैयार है"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "त्रुटि: डिवाइस को युग्मित करने में विफल"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "ठीक है"
+
+/* Cancel button title */
+"Cancel" = "रद्द करना"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "स्कैनिंग"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "कनेक्ट"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "इस पंप में आप जिस प्रकार का इंसुलिन उपयोग करेंगे उसका चयन करें"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "पंप हटाएँ"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "क्या आप वाकई दाना-आई/आरएस का उपयोग बंद करना चाहते हैं?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "पंप हटाएं"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "पंप हटाएं"
+
+/* Connection error message */
+"Error while connecting to device" = "डिवाइस से कनेक्ट करते समय त्रुटि"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "दाना-आरएस v3 मिला!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "पिनकोड आवश्यक"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "पिन 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "पिन 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "अमान्य पिनकोड लंबाई प्राप्त हुई। पुनः प्रयास करें"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "अमान्य हेक्स स्ट्रिंग प्राप्त हुई। पुनः प्रयास करें"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "चेकसम विफल हुआ। पुनः प्रयास करें"
+
+/* Title for delivery speed */
+"Delivery speed" = "वितरण गति"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 सेकंड/यू"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 सेकंड/यू"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 सेकंड/यू"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "दाना पंप अलग-अलग डिलीवरी स्पीड को सपोर्ट करते हैं। आप इसे यहाँ सेट कर सकते हैं"
+
+/* Text for finish button */
+"Finish" = "खत्म करना"
+
+/* Dana setup complete p1 */
+"Your " = "आपका "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " उपयोग के लिए तैयार है!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "नोट: आपके दाना पंप में एक विशेष सेटिंग है जो आपको अपने दाना पंप बीप को शांत करने की अनुमति देती है। इसे सक्षम करने के लिए, कृपया अपने दाना वितरक से संपर्क करें"
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "कनेक्शन बनाने में विफल"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "अस्थायी बेसल समायोजित करने में विफल"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "निलंबन समायोजित करने में विफल"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "दाना बेसल प्रोग्राम बनाने में विफल"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "बेसल समायोजित करने में विफल"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "पंप समय समायोजित करने में विफल"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "इस समय अस्थायी बेसल सेटिंग समर्थित नहीं है"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "इंसुलिन वितरण स्थगित कर दिया गया है। कार्रवाई विफल रही"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "कार्रवाई रद्द कर दी गई है, क्योंकि पंप व्यस्त है"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "बोलस टाइमआउट सक्रिय है। जब तक टाइमआउट निष्क्रिय है, लूप चक्र पूरा नहीं हो सकता"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "अधिकतम बोलस सीमा पूरी हो गई है। कृपया कम राशि का प्रयास करें या सीमा बढ़ाएँ"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "अधिकतम दैनिक इंसुलिन सीमा पूरी हो गई है। कृपया कम मात्रा आज़माएँ या सीमा बढ़ाएँ"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "केवल स्वचालित बोलस समर्थित है"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "कृपया सेटिंग मेनू में अपनी खुराक रणनीति बदलने पर विचार करें"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "डिलीवरी फिर से शुरू करें"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "डिलीवरी स्थगित करें"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "अस्थायी बेसल रोकें"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "इंसुलिन का प्रकार"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "अनुसूचित बेसल";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "इंसुलिन वितरण";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "इंसुलिन\nनिलंबित";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "अज्ञात";
+
+/* Units for showing temp basal rate */
+"U/hr" = "यू/घंटा";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "शेष इंसुलिन";
+
+/* Text for Dana pump name */
+"Pump name" = "पंप का नाम"
+
+/* Text for hardware model */
+"Hardware model" = "हार्डवेयर मॉडल"
+
+/* Text for firmware version */
+"Firmware version" = "प्रक्रिया यंत्र सामग्री संस्करण"
+
+/* DanaKit sync pump */
+"Sync pump data" = "पंप डेटा सिंक करें"
+
+/* Text for last sync */
+"Last sync" = "अंतिम सिंक"
+
+/* Text for pump time */
+"Pump time" = "पम्प समय"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "सिंक पंप समय"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "समय परिवर्तन का पता चला"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "आपके पंप पर समय वर्तमान समय से अलग है। क्या आप अपने पंप पर समय को वर्तमान समय के अनुसार अपडेट करना चाहते हैं?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "आपके पंप पर समय वर्तमान समय से अलग है। आपके पंप का समय आपकी शेड्यूल की गई थेरेपी सेटिंग को नियंत्रित करता है। समय के अंतर की समीक्षा करने और अपने पंप को कॉन्फ़िगर करने के लिए पंप समय पंक्ति तक नीचे स्क्रॉल करें।";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "हां, वर्तमान समय से समन्वयित करें"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "नहीं, पम्प को वैसे ही रहने दें"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "सांस";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "अस्थायी बेसल";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "बुनियादी";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "फिर शुरू करना";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "निलंबित करें";
+
+/* Title for user options */
+"User options" = "उपयोगकर्ता विकल्प"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "दाना पंप लॉग साझा करें"
+
+/* Loading */
+"Loading" = "लोड हो रहा है"
+
+/* Text for save button */
+"Save" = "बचाना"
+
+/* Text for 24h display */
+"24h display" = "24 घंटे का प्रदर्शन"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "क्या समय 12 घंटे या 24 घंटे में प्रदर्शित होना चाहिए"
+
+/* text on */
+"On" = "पर"
+
+/* text off */
+"Off" = "बंद"
+
+/* 12h */
+"12h notation" = "12h संकेतन"
+
+/* 24h */
+"24h notation" = "24 घंटे का अंकन"
+
+/* Text for Scroll function */
+"Scroll function" = "स्क्रॉल फ़ंक्शन"
+
+/* text for second */
+"sec" = "सेकंड"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "समय पर बैकलाइट"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "एलसीडी समय पर"
+
+/* beepAndAlarm */
+"Alarm beeps" = "अलार्म बीप"
+
+/* beepAndAlarm.sound */
+"Sound" = "आवाज़"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "कंपन"
+
+/* beepAndAlarm.both */
+"Both" = "दोनों"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "पंप बैटरी 0%"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "पंप की बैटरी ख़त्म हो गई है। इसे तुरंत बदलें!"
+
+/* Alert title for pumpError */
+"Pump error" = "पंप त्रुटि"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "पंप की जांच करें और पुनः प्रयास करें"
+
+/* Alert title for occlusion */
+"Occlusion" = "रोड़ा"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "जलाशय और इन्फ्यूस की जांच करें और पुनः प्रयास करें"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "पम्प बैटरी कम"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "पंप की बैटरी को जल्द ही बदलने की जरूरत है"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "पंप बंद"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "बहुत समय से पंप के साथ कोई इंटरेक्शन नहीं हुआ है। या तो पंप में इस फ़ंक्शन को अक्षम करें या पंप के साथ इंटरैक्ट करें"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "बेसल तुलना"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "रक्त ग्लूकोज माप"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "शेष इंसुलिन स्तर"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "खाली जलाशय"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "जलाशय खाली है। इसे अभी बदलें!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "चैक चैफ्ट"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "पंप ने अपने चैफ्ट में कोई समस्या पाई है। कृपया जलाशय को हटाएँ, सब कुछ जाँचें और फिर से प्रयास करें"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "बेसल सीमा तक पहुँच गया"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "आपकी दैनिक बेसल सीमा पूरी हो गई है। कृपया सीमा बढ़ाने के लिए अपने दाना वितरक से संपर्क करें"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "दैनिक सीमा पूरी हो गई"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "आपकी दैनिक इंसुलिन सीमा पूरी हो गई है। कृपया सीमा बढ़ाने के लिए अपने दाना वितरक से संपर्क करें"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "रक्त ग्लूकोज की जांच न कराना"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "आपके पंप में ब्लड ग्लूकोज चेक रिमाइंडर सेट किया गया है और यह चालू हो गया है। कृपया इसे हटा दें या पंप को अपना ग्लूकोज लेवल दें"
+
+/* Alert title for unknown */
+"Unknown error" = "अज्ञात त्रुटि"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "पंप से अलर्ट संसाधित करते समय एक अज्ञात त्रुटि हुई है। कृपया इसकी रिपोर्ट करें"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "पंप जानकारी"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "मौन टोन टॉगल करें?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "नहीं, इसे ऐसे ही रखें"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "हां, मूक टोन अक्षम करें"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "हां, शांत स्वर सक्षम करें"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "पंप द्वारा उपयोग की जाने वाली बेसल प्रोफ़ाइल सेट करें। ध्यान दें, यह पंप में मौजूद प्रोफ़ाइल को %1$@ में मौजूद प्रोफ़ाइल से अधिलेखित कर देगा"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "कोई इंसुलिन नहीं"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "इंसुलिन निलम्बित"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "सिग्नल हानि"
+
+/* Text for Day unit */
+"day(s)" = "दिन"
+
+/* Text for cannula age */
+"Cannula age" = "प्रवेशनी आयु"
+
+/* Text for reservoir age */
+"Reservoir age" = "जलाशय की आयु"
diff --git a/DanaKit/Localization/it.lproj/Localizable.strings b/DanaKit/Localization/it.lproj/Localizable.strings
new file mode 100644
index 0000000..53713c3
--- /dev/null
+++ b/DanaKit/Localization/it.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "caricamento"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Configurazione Dana-i/RS"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "Seleziona la tua pompa"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "DanaRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "DanaRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "Dana-i"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "Configurazione di DanaRS v1"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "Durante il processo di accoppiamento, DanaRS v3 mostrerà una richiesta di accoppiamento mentre l&#39;iPhone mostrerà una richiesta per un codice di accoppiamento. Sul microinfusore, seleziona OK e digita il codice sul tuo iPhone. Successivamente, Loop è pronto per comunicare con DanaRS v1"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "Prima di iniziare il processo di abbinamento, si consiglia di verificare e, se necessario, aggiornare la password della pompa. Puoi farlo andando su Impostazioni pompa -&gt; Impostazioni utente -&gt; Password. La password predefinita è 1234, se questa è la tua password, considera di cambiarla"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "Password DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "Inserisci la password"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "Configurazione di DanaRS v3"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "Durante il processo di accoppiamento, DanaRS v3 mostrerà una richiesta di accoppiamento mentre l&#39;iPhone mostrerà una richiesta per due codici di accoppiamento. Sulla pompa, seleziona OK e digita i due codici sul tuo iPhone. Successivamente, Loop è pronto per comunicare con DanaRS v3"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "Configurazione di Dana-i"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "Dopo aver impostato il tipo di insulina e la velocità del bolo, verrà visualizzata una schermata con tutte le pompe Dana trovate. Seleziona la pompa che desideri collegare a %1$@."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "Durante il processo di abbinamento, il tuo Dana-i mostrerà una richiesta di abbinamento mentre l&#39;iPhone mostrerà una richiesta per un codice di abbinamento. Sulla pompa, seleziona OK e digita il codice a 6 cifre sullo schermo del tuo iPhone. Successivamente, %1$@ è pronto per comunicare con il tuo Dana-i"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "ERRORE: impossibile associare il dispositivo"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "OK"
+
+/* Cancel button title */
+"Cancel" = "Annulla"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "Scansione"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "Connessione"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "Seleziona il tipo di insulina che utilizzerai con questo microinfusore"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "Rimuovere la pompa"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "Sei sicuro di voler smettere di usare Dana-i/RS?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "Elimina pompa"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "Elimina pompa"
+
+/* Connection error message */
+"Error while connecting to device" = "Errore durante la connessione al dispositivo"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "Dana-RS v3 trovato!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "Codice PIN richiesto"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "Perno 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "Perno 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "Ricevute lunghezze di codice PIN non valide. Riprova"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "Ricevute stringhe esadecimali non valide. Riprova"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "Checksum fallito. Riprova"
+
+/* Title for delivery speed */
+"Delivery speed" = "Velocità di consegna"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 secondi/U"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 secondi/U"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 secondi/U"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "Le pompe Dana supportano diverse velocità di erogazione. Puoi configurarlo qui"
+
+/* Text for finish button */
+"Finish" = "Fine"
+
+/* Dana setup complete p1 */
+"Your " = "Tuo "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " è pronto per essere utilizzato!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "Nota: la pompa Dana dispone di un&#39;impostazione speciale che consente di silenziare i segnali acustici della pompa Dana. Per abilitare ciò, contattare il proprio distributore Dana"
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "Impossibile stabilire una connessione"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "Impossibile regolare la basale temporanea"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "Impossibile regolare la sospensione"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "Impossibile generare il programma basale Dana"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "Impossibile regolare la basale"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "Impossibile regolare il tempo della pompa"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "L&#39;impostazione della basale temporanea non è supportata al momento"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "La somministrazione di insulina è stata sospesa. Azione fallita"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "L&#39;azione è stata annullata perché la pompa è occupata"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "È attivo un timeout del bolo. Il ciclo del loop non può essere completato finché il timeout non è inattivo"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "È stato raggiunto il limite massimo del bolo. Prova con un importo inferiore o aumenta il limite"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "È stato raggiunto il limite massimo giornaliero di insulina. Prova con un importo inferiore o aumenta il limite"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "È supportato solo il bolo automatico"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "Ti invitiamo a modificare la tua strategia di dosaggio nel menu delle impostazioni"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "Riprendere la consegna"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "Sospendere la consegna"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "Interrompere la basale temporanea"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "Tipo di insulina"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "Basale programmata";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "Somministrazione di insulina";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "Insulina\nSospesa";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "Sconosciuto";
+
+/* Units for showing temp basal rate */
+"U/hr" = "U/ora";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "Insulina rimanente";
+
+/* Text for Dana pump name */
+"Pump name" = "Nome della pompa"
+
+/* Text for hardware model */
+"Hardware model" = "Modello hardware"
+
+/* Text for firmware version */
+"Firmware version" = "Versione del firmware"
+
+/* DanaKit sync pump */
+"Sync pump data" = "Sincronizza i dati della pompa"
+
+/* Text for last sync */
+"Last sync" = "Ultima sincronizzazione"
+
+/* Text for pump time */
+"Pump time" = "Tempo di pompaggio"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "Sincronizza l&#39;ora della pompa"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "Rilevato cambio di orario"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "L&#39;ora visualizzata sul microinfusore è diversa dall&#39;ora corrente. Vuoi aggiornare l&#39;ora del tuo microinfusore all&#39;ora corrente?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "L&#39;ora visualizzata sul microinfusore è diversa dall&#39;ora corrente. Il tempo del microinfusore controlla le impostazioni della terapia programmata. Scorri verso il basso fino alla riga Orario pompa per verificare la differenza oraria e configurare la tua pompa.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "Sì, sincronizza con l&#39;ora corrente"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "No, mantieni la pompa così com&#39;è"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "Bolo";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "Basale temporanea";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "Basale";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "Riprendere";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "Sospendere";
+
+/* Title for user options */
+"User options" = "Opzioni utente"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "Condividi i registri della pompa Dana"
+
+/* Loading */
+"Loading" = "Caricamento"
+
+/* Text for save button */
+"Save" = "Salva"
+
+/* Text for 24h display */
+"24h display" = "Visualizzazione 24 ore"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "L&#39;ora deve essere visualizzata in 12 o 24 ore"
+
+/* text on */
+"On" = "SU"
+
+/* text off */
+"Off" = "Spento"
+
+/* 12h */
+"12h notation" = "Notazione 12h"
+
+/* 24h */
+"24h notation" = "Notazione 24 ore"
+
+/* Text for Scroll function */
+"Scroll function" = "Funzione di scorrimento"
+
+/* text for second */
+"sec" = "sez"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "Retroilluminazione puntuale"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "Lcd puntuale"
+
+/* beepAndAlarm */
+"Alarm beeps" = "L&#39;allarme suona"
+
+/* beepAndAlarm.sound */
+"Sound" = "Suono"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "Vibrazione"
+
+/* beepAndAlarm.both */
+"Both" = "Entrambi"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "Batteria della pompa 0%"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "La batteria della pompa è scarica. Sostituiscilo adesso!"
+
+/* Alert title for pumpError */
+"Pump error" = "Errore della pompa"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "Controllare la pompa e riprovare"
+
+/* Alert title for occlusion */
+"Occlusion" = "Occlusione"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "Controllare il serbatoio e l&#39;infusione e riprovare"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "Batteria della pompa scarica"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "La batteria della pompa dovrà essere sostituita al più presto"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "Arresto della pompa"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "Non c&#39;è stata alcuna interazione con la pompa per troppo tempo. Disattivare questa funzione nella pompa o interagire con la pompa"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "Confronto basale"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "Misurazione della glicemia"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "Livello di insulina rimanente"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "Serbatoio vuoto"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "Il serbatoio è vuoto. Sostituiscilo adesso!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "Controlla il furto"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "La pompa ha rilevato un problema con il suo chaft. Rimuovere il serbatoio, controllare tutto e riprovare"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "Limite basale raggiunto"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "Il tuo limite basale giornaliero è stato raggiunto. Contatta il tuo distributore Dana per aumentare il limite"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "Limite giornaliero raggiunto"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "È stato raggiunto il limite giornaliero di insulina. Contatta il tuo distributore Dana per aumentare il limite"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "Controllo della glicemia mancato"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "Un promemoria per il controllo della glicemia è stato impostato nel microinfusore ed è stato attivato. Rimuoverlo o fornire il livello di glucosio alla pompa"
+
+/* Alert title for unknown */
+"Unknown error" = "Errore sconosciuto"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "Si è verificato un errore sconosciuto durante l&#39;elaborazione dell&#39;avviso proveniente dalla pompa. Per favore segnalalo"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "Informazioni sulla pompa"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "Attivare/disattivare il tono silenzioso?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "No, mantienilo così com&#39;è"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "Sì, disattiva i toni silenziosi"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "Sì, attiva i toni silenziosi"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "Impostare il profilo basale che la pompa dovrà utilizzare. Nota che sovrascriverà il profilo che si trova nella pompa, con quello in %1$@"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "Niente insulina"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "Insulina sospesa"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "Perdita di segnale"
+
+/* Text for Day unit */
+"day(s)" = "giorno/i"
+
+/* Text for cannula age */
+"Cannula age" = "Età della cannula"
+
+/* Text for reservoir age */
+"Reservoir age" = "Età del serbatoio"
diff --git a/DanaKit/Localization/ja.lproj/Localizable.strings b/DanaKit/Localization/ja.lproj/Localizable.strings
new file mode 100644
index 0000000..2a35cdf
--- /dev/null
+++ b/DanaKit/Localization/ja.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "読み込み中"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Dana-i/RS セットアップ"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "ポンプを選択してください"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "ダナRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "ダナRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "ダナ・イ"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "DanaRS v1 の設定"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "ペアリングプロセス中、DanaRS v3 にはペアリングプロンプトが表示され、iPhone にはペアリングコードのプロンプトが表示されます。ポンプで [OK] を選択し、iPhone にコードを入力します。その後、Loop は DanaRS v1 と通信する準備が整います。"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "ペアリングプロセスを開始する前に、ポンプのパスワードを確認し、必要に応じて更新することをお勧めします。これを行うには、ポンプの設定 -&gt; ユーザー設定 -&gt; パスワードに移動します。デフォルトのパスワードは 1234 です。これがパスワードである場合は、変更することを検討してください。"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "パスワード DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "パスワードを入力してください"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "DanaRS v3 の設定"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "ペアリングプロセス中、DanaRS v3 にはペアリングプロンプトが表示され、iPhone には 2 つのペアリングコードのプロンプトが表示されます。ポンプで [OK] を選択し、iPhone で 2 つのコードを入力します。その後、Loop は DanaRS v3 と通信する準備が整います。"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "Dana-iの設定"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "インスリンの種類とボーラス速度を設定すると、見つかったすべての Dana ポンプが画面に表示されます。%1$@ にリンクするポンプを選択してください。"
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "ペアリング処理中、Dana-i にはペアリング プロンプトが表示され、iPhone にはペアリング コードのプロンプトが表示されます。ポンプで [OK] を選択し、iPhone の画面に 6 桁のコードを入力します。その後、%1$@ は Dana-i と通信する準備が整います。"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "エラー: デバイスのペアリングに失敗しました"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "わかりました"
+
+/* Cancel button title */
+"Cancel" = "キャンセル"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "走査"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "接続中"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "このポンプで使用するインスリンの種類を選択してください"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "ポンプを取り外す"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "Dana-i/RS の使用を停止してもよろしいですか?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "ポンプを削除"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "ポンプを削除"
+
+/* Connection error message */
+"Error while connecting to device" = "デバイスへの接続中にエラーが発生しました"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "Dana-RS v3 が見つかりました!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "PINコードが必要です"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "ピン1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "ピン2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "無効なPINコードの長さを受信しました。もう一度お試しください"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "無効な 16 進文字列を受け取りました。もう一度お試しください"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "チェックサムに失敗しました。もう一度お試しください"
+
+/* Title for delivery speed */
+"Delivery speed" = "配送速度"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12秒/U"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30秒/U"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60秒/U"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "Danaポンプはさまざまな吐出速度をサポートしています。ここで設定できます"
+
+/* Text for finish button */
+"Finish" = "仕上げる"
+
+/* Dana setup complete p1 */
+"Your " = "あなたの "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " すぐに使用できます!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "注: Dana ポンプには、Dana ポンプのビープ音を消すための特別な設定があります。これを有効にするには、Dana 販売店にお問い合わせください。"
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "接続に失敗しました"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "一時基礎インスリン量の調整に失敗しました"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "サスペンションの調整に失敗しました"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "Dana 基礎プログラムの生成に失敗しました"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "基礎用量の調整に失敗"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "ポンプ時間の調整に失敗しました"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "一時基礎インスリン量の設定は現在サポートされていません"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "インスリンの投与が中断されました。アクションに失敗しました"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "ポンプがビジー状態のため、アクションはキャンセルされました"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "ボーラスタイムアウトが有効です。タイムアウトが無効になるまでループサイクルは完了しません。"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "最大ボーラス制限に達しました。量を減らすか、制限を増やしてください。"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "1 日のインスリンの上限に達しました。量を減らすか、上限を増やしてください。"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "自動ボーラスのみがサポートされています"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "設定メニューで投与戦略を変更することを検討してください"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "配達を再開する"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "配信を一時停止する"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "一時基礎インスリン投与中止"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "インスリンの種類"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "予定基礎";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "インスリン投与";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "インスリン\n停止";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "未知";
+
+/* Units for showing temp basal rate */
+"U/hr" = "U/時間";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "インスリン残量";
+
+/* Text for Dana pump name */
+"Pump name" = "ポンプ名"
+
+/* Text for hardware model */
+"Hardware model" = "ハードウェアモデル"
+
+/* Text for firmware version */
+"Firmware version" = "ファームウェアバージョン"
+
+/* DanaKit sync pump */
+"Sync pump data" = "ポンプデータを同期する"
+
+/* Text for last sync */
+"Last sync" = "最終同期"
+
+/* Text for pump time */
+"Pump time" = "ポンプ時間"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "同期ポンプ時間"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "時間の変更が検出されました"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "ポンプの時刻が現在の時刻と異なります。ポンプの時刻を現在の時刻に更新しますか?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "ポンプの時刻が現在の時刻と異なります。ポンプの時刻によって、スケジュールされた治療設定が制御されます。ポンプの時刻の行まで下にスクロールして、時刻の差を確認し、ポンプを設定します。";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "はい、現在の時刻に同期します"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "いいえ、ポンプはそのままにしてください"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "ボーラス";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "一時基礎";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "基礎";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "再開する";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "つるす";
+
+/* Title for user options */
+"User options" = "ユーザーオプション"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "Danaポンプログを共有する"
+
+/* Loading */
+"Loading" = "読み込み中"
+
+/* Text for save button */
+"Save" = "保存"
+
+/* Text for 24h display */
+"24h display" = "24時間表示"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "時間は12時間表示か24時間表示か"
+
+/* text on */
+"On" = "の上"
+
+/* text off */
+"Off" = "オフ"
+
+/* 12h */
+"12h notation" = "12時間表記"
+
+/* 24h */
+"24h notation" = "24時間表記"
+
+/* Text for Scroll function */
+"Scroll function" = "スクロール機能"
+
+/* text for second */
+"sec" = "秒"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "バックライトオン時間"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "LCDオン時間"
+
+/* beepAndAlarm */
+"Alarm beeps" = "アラーム音が鳴る"
+
+/* beepAndAlarm.sound */
+"Sound" = "音"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "振動"
+
+/* beepAndAlarm.both */
+"Both" = "両方"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "ポンプバッテリー 0%"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "ポンプのバッテリーが空です。今すぐ交換してください。"
+
+/* Alert title for pumpError */
+"Pump error" = "ポンプエラー"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "ポンプを確認してもう一度お試しください"
+
+/* Alert title for occlusion */
+"Occlusion" = "閉塞"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "リザーバーと注入を確認してもう一度お試しください"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "ポンプのバッテリー残量低下"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "ポンプのバッテリーはすぐに交換する必要があります"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "ポンプの停止"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "ポンプとのやり取りが長期間行われていません。ポンプのこの機能を無効にするか、ポンプとやり取りしてください。"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "基礎比較"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "血糖値測定"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "残存インスリン濃度"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "空の貯水池"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "リザーバーが空です。今すぐ交換してください。"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "チェックチャフト"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "ポンプのシャフトに問題が検出されました。リザーバーを取り外し、すべてを確認してからもう一度お試しください。"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "基礎制限に達した"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "1日の基礎摂取量制限に達しました。制限値を増やすには、Dana販売店にお問い合わせください。"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "1日の制限に達しました"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "1日のインスリン制限に達しました。制限を増やすには、Dana 販売代理店にお問い合わせください。"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "血糖値検査を見逃した"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "血糖値チェックリマインダーがポンプに設定され、作動しています。削除するか、血糖値をポンプに入力してください。"
+
+/* Alert title for unknown */
+"Unknown error" = "不明なエラー"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "ポンプからのアラートの処理中に不明なエラーが発生しました。これを報告してください"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "ポンプ情報"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "サイレントトーンを切り替えますか?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "いいえ、そのままにしておきます"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "はい、サイレントトーンを無効にする"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "はい、サイレントトーンを有効にする"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "ポンプが使用する基礎プロファイルを設定します。ポンプ内のプロファイルは %1$@ のプロファイルで上書きされることに注意してください。"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "インスリンなし"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "インスリンの停止"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "信号損失"
+
+/* Text for Day unit */
+"day(s)" = "日々）"
+
+/* Text for cannula age */
+"Cannula age" = "カニューレの寿命"
+
+/* Text for reservoir age */
+"Reservoir age" = "貯留層年齢"
diff --git a/DanaKit/Localization/nb.lproj/Localizable.strings b/DanaKit/Localization/nb.lproj/Localizable.strings
new file mode 100644
index 0000000..a8b1a56
--- /dev/null
+++ b/DanaKit/Localization/nb.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "lasting"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Dana-i/RS-oppsett"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "Velg din pumpe"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "DanaRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "DanaRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "Dana-i"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "Sette opp DanaRS v1"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "Under sammenkoblingsprosessen vil DanaRS v3 vise en sammenkoblingsmelding mens din iPhone vil vise en forespørsel om en sammenkoblingskode. På pumpen velger du OK og skriver inn koden på iPhone. Etter det er Loop klar til å kommunisere med DanaRS v1"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "Før du starter med sammenkoblingsprosessen, anbefales det å sjekke, og om nødvendig oppdatere, pumpepassordet. Du kan gjøre dette ved å gå til pumpeinnstillingene -&gt; brukerinnstillinger -&gt; passord. Standardpassordet er 1234, hvis dette er passordet ditt, bør du vurdere å endre det"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "Passord DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "Fyll inn passord"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "Sette opp DanaRS v3"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "Under sammenkoblingsprosessen vil DanaRS v3 vise en sammenkoblingsforespørsel, mens iPhone vil vise en forespørsel om to sammenkoblingskoder. På pumpen velger du OK og skriver inn de to kodene på iPhone. Etter det er Loop klar til å kommunisere med DanaRS v3"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "Setter opp Dana-i"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "Etter å ha satt opp insulintype og bolushastighet, vil du se en skjerm med alle funnet Dana-pumper. Velg pumpen du vil koble til %1$@."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "Under sammenkoblingsprosessen vil Dana-i-en din vise en sammenkoblingsforespørsel mens iPhone-en din viser en forespørsel om en sammenkoblingskode. På pumpen, velg OK og skriv inn den 6-sifrede koden på skjermen på din iPhone. Etter det er %1$@ klar til å kommunisere med din Dana-i"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "FEIL: Kunne ikke pare enheten"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "OK"
+
+/* Cancel button title */
+"Cancel" = "Avbryt"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "Skanning"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "Kobler til"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "Velg insulintypen du skal bruke i denne pumpen"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "Fjern pumpen"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "Er du sikker på at du vil slutte å bruke Dana-i/RS?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "Slett pumpen"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "Slett pumpe"
+
+/* Connection error message */
+"Error while connecting to device" = "Feil under tilkobling til enheten"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "Dana-RS v3 funnet!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "Pinkode kreves"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "Pinne 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "Pinne 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "Mottok ugyldige pinkodelengder. Prøv igjen"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "Mottok ugyldige sekskantstrenger. Prøv igjen"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "Kontrollsum mislyktes. Prøv igjen"
+
+/* Title for delivery speed */
+"Delivery speed" = "Leveringshastighet"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 sek/U"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 sek/U"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 sek/U"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "Dana-pumpene støtter ulike leveringshastigheter. Du kan sette den opp her"
+
+/* Text for finish button */
+"Finish" = "Bli ferdig"
+
+/* Dana setup complete p1 */
+"Your " = "Din "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " er klar til bruk!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "Merk: Din Dana-pumpe har en spesiell innstilling som lar deg dempe Dana-pumpepipene. For å aktivere dette, vennligst kontakt din Dana-distributør"
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "Kunne ikke opprette en tilkobling"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "Kunne ikke justere temp basal"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "Kunne ikke justere fjæringen"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "Kunne ikke generere Dana basalprogram"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "Kunne ikke justere basal"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "Kunne ikke justere pumpetiden"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "Innstilling av temp basal støttes ikke for øyeblikket"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "Insulintilførselen er stanset. Handlingen mislyktes"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "Handlingen er avbrutt fordi pumpen er opptatt"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "En bolus-tidsavbrudd er aktiv. Sløyfesyklusen kan ikke fullføres før tidsavbruddet er inaktivt"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "Den maksimale bolusgrensen er nådd. Prøv et lavere beløp eller øk grensen"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "Den maksimale daglige insulingrensen er nådd. Prøv et lavere beløp eller øk grensen"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "Kun automatisk bolus støttes"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "Vurder å endre doseringsstrategien i innstillingsmenyen"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "Gjenoppta levering"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "Stopp levering"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "Stopp temp basal"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "Insulintype"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "Planlagt Basal";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "Insulintilførsel";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "Insulin\nSuspendert";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "Ukjent";
+
+/* Units for showing temp basal rate */
+"U/hr" = "U/t";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "Insulin som gjenstår";
+
+/* Text for Dana pump name */
+"Pump name" = "Pumpenavn"
+
+/* Text for hardware model */
+"Hardware model" = "Maskinvaremodell"
+
+/* Text for firmware version */
+"Firmware version" = "Fastvareversjon"
+
+/* DanaKit sync pump */
+"Sync pump data" = "Synkroniser pumpedata"
+
+/* Text for last sync */
+"Last sync" = "Siste synkronisering"
+
+/* Text for pump time */
+"Pump time" = "Pumpetid"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "Synkroniser pumpetid"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "Tidsendring oppdaget"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "Klokken på pumpen er forskjellig fra gjeldende tid. Vil du oppdatere tiden på pumpen til gjeldende tid?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "Klokken på pumpen er forskjellig fra gjeldende tid. Pumpens tid styrer dine planlagte behandlingsinnstillinger. Rull ned til Pumpetid-raden for å se tidsforskjellen og konfigurere pumpen.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "Ja, Synkroniser til gjeldende tid"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "Nei, behold pumpen som den er"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "Bolus";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "Temp Basal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "Basal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "Gjenoppta";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "Utsette";
+
+/* Title for user options */
+"User options" = "Brukeralternativer"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "Del Dana pumpelogger"
+
+/* Loading */
+"Loading" = "Laster"
+
+/* Text for save button */
+"Save" = "Lagre"
+
+/* Text for 24h display */
+"24h display" = "24 timers visning"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "Skal tiden vises om 12 timer eller 24 timer"
+
+/* text on */
+"On" = "På"
+
+/* text off */
+"Off" = "Av"
+
+/* 12h */
+"12h notation" = "12t notasjon"
+
+/* 24h */
+"24h notation" = "24 timers notasjon"
+
+/* Text for Scroll function */
+"Scroll function" = "Rullefunksjon"
+
+/* text for second */
+"sec" = "sek"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "Bakgrunnsbelysning i tide"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "LCD i tide"
+
+/* beepAndAlarm */
+"Alarm beeps" = "Alarm piper"
+
+/* beepAndAlarm.sound */
+"Sound" = "Lyd"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "Vibrasjon"
+
+/* beepAndAlarm.both */
+"Both" = "Både"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "Pumpebatteri 0 %"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "Pumpebatteriet er tomt. Bytt den ut nå!"
+
+/* Alert title for pumpError */
+"Pump error" = "Pumpefeil"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "Sjekk pumpen og prøv igjen"
+
+/* Alert title for occlusion */
+"Occlusion" = "Okklusjon"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "Sjekk reservoaret og infusjonen og prøv igjen"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "Lavt pumpebatteri"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "Pumpebatteri må skiftes snart"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "Pumpestans"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "Det har ikke vært noen interaksjoner med pumpen for lenge. Deaktiver enten denne funksjonen i pumpen eller samhandle med pumpen"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "Basal Sammenlign"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "Måle blodsukker"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "Gjenværende insulinnivå"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "Tomt reservoar"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "Reservoaret er tomt. Bytt den nå!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "Sjekk chaft"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "Pumpen har oppdaget et problem med skaftet. Vennligst fjern reservoaret, sjekk alt og prøv igjen"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "Basalgrense nådd"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "Din daglige basalgrense er nådd. Ta kontakt med din Dana-forhandler for å øke grensen"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "Daglig grense nådd"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "Din daglige insulingrense er nådd. Ta kontakt med din Dana-forhandler for å øke grensen"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "Tapte blodsukkersjekk"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "En påminnelse om blodsukkersjekk er satt opp i pumpen og utløses. Vennligst fjern den eller gi glukosenivået til pumpen"
+
+/* Alert title for unknown */
+"Unknown error" = "Ukjent feil"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "Det har oppstått en ukjent feil under behandlingen av varselet fra pumpen. Vennligst rapporter dette"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "Pumpeinformasjon"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "Vil du bytte lydløs tone?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "Nei, behold som den er"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "Ja, deaktiver stille toner"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "Ja, aktiver stille toner"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "Still inn basalprofilen pumpen skal bruke. Merk at den vil overskrive profilen som er i pumpen, med den i %1$@"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "Ikke insulin"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "Insulin suspendert"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "Signaltap"
+
+/* Text for Day unit */
+"day(s)" = "dager)"
+
+/* Text for cannula age */
+"Cannula age" = "Kanyle alder"
+
+/* Text for reservoir age */
+"Reservoir age" = "Reservoar alder"
diff --git a/DanaKit/Localization/nl.lproj/Localizable.strings b/DanaKit/Localization/nl.lproj/Localizable.strings
new file mode 100644
index 0000000..1863491
--- /dev/null
+++ b/DanaKit/Localization/nl.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "bezig met laden"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Dana-i/RS-installatie"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "Selecteer uw pomp"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "DanaRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "DanaRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "Dana-ik"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "DanaRS v1 instellen"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "Tijdens het koppelingsproces zal uw DanaRS v3 een koppelingsprompt weergeven, terwijl uw iPhone een prompt voor een koppelingscode toont. Selecteer op uw pomp OK en typ de code op uw iPhone. Daarna is Loop klaar om te communiceren met uw DanaRS v1"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "Voordat u met het koppelingsproces begint, wordt aanbevolen het pompwachtwoord te controleren en indien nodig bij te werken. Dit kunt u doen door naar de pompinstellingen -&gt; gebruikersinstellingen -&gt; wachtwoord te gaan. Het standaardwachtwoord is 1234. Als dit uw wachtwoord is, kunt u overwegen dit te wijzigen"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "Wachtwoord DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "Wachtwoord invullen"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "DanaRS v3 instellen"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "Tijdens het koppelingsproces zal uw DanaRS v3 een koppelingsprompt weergeven, terwijl uw iPhone een prompt voor twee koppelingscodes toont. Selecteer op uw pomp OK en typ de twee codes op uw iPhone. Daarna is Loop klaar om te communiceren met uw DanaRS v3"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "Dana-i opzetten"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "Na het instellen van de insulinesoort en bolussnelheid krijgt u een scherm te zien met alle gevonden Dana-pompen. Selecteer de pomp die u wilt koppelen aan %1$@."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "Tijdens het koppelingsproces zal uw Dana-i een koppelingsprompt weergeven, terwijl uw iPhone een melding voor een koppelingscode toont. Selecteer tijdens het kolven OK en typ de 6-cijferige code in het scherm van uw iPhone. Daarna is %1$@ klaar om te communiceren met uw Dana-i"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "FOUT: Kan apparaat niet koppelen"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "OK"
+
+/* Cancel button title */
+"Cancel" = "Annuleren"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "Scannen"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "Verbinden"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "Selecteer het type insuline dat u in deze pomp gaat gebruiken"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "Pomp verwijderen"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "Weet u zeker dat u wilt stoppen met het gebruik van Dana-i/RS?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "Pomp verwijderen"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "Pomp verwijderen"
+
+/* Connection error message */
+"Error while connecting to device" = "Fout tijdens het verbinden met het apparaat"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "Dana-RS v3 gevonden!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "Pincode vereist"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "Pin 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "Pin 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "Ongeldige pincodelengtes ontvangen. Probeer het nog eens"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "Ongeldige hexadecimale tekenreeksen ontvangen. Probeer het nog eens"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "Controlesom is mislukt. Probeer het nog eens"
+
+/* Title for delivery speed */
+"Delivery speed" = "Levering snelheid"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 sec/U"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 sec/U"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 sec/U"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "De Dana-pompen ondersteunen verschillende leveringssnelheden. Je kunt het hier instellen"
+
+/* Text for finish button */
+"Finish" = "Finish"
+
+/* Dana setup complete p1 */
+"Your " = "Jouw "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " is klaar voor gebruik!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "Opmerking: Uw Dana-pomp heeft een speciale instelling waarmee u de pieptonen van uw Dana-pomp kunt uitschakelen. Neem contact op met uw Dana-distributeur om dit mogelijk te maken"
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "Kan geen verbinding maken"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "Kan de tijdelijke basaalsnelheid niet aanpassen"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "Kan de vering niet aanpassen"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "Kan het Dana-basaalprogramma niet genereren"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "Kan basaal niet aanpassen"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "Kan de pomptijd niet aanpassen"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "Het instellen van tijdelijke basaalsnelheden wordt momenteel niet ondersteund"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "De insulinetoediening is onderbroken. Actie: mislukt"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "Actie is geannuleerd, omdat de pomp bezet is"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "Er is een bolustime-out actief. De luscyclus kan pas worden voltooid als de time-out inactief is"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "De maximale boluslimiet is bereikt. Probeer een lager bedrag of verhoog de limiet"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "De maximale dagelijkse insulinelimiet is bereikt. Probeer een lager bedrag of verhoog de limiet"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "Alleen automatische bolus wordt ondersteund"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "Overweeg om uw doseringsstrategie te wijzigen in het instellingenmenu"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "Levering hervatten"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "Levering opschorten"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "Stop de tijdelijke basaalsnelheid"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "Insulinetype"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "Gepland basaal";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "Insuline levering";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "Insuline\nGeschorst";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "Onbekend";
+
+/* Units for showing temp basal rate */
+"U/hr" = "U/uur";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "Resterende insuline";
+
+/* Text for Dana pump name */
+"Pump name" = "Naam pomp"
+
+/* Text for hardware model */
+"Hardware model" = "Hardware-model"
+
+/* Text for firmware version */
+"Firmware version" = "Firmware versie"
+
+/* DanaKit sync pump */
+"Sync pump data" = "Synchroniseer pompgegevens"
+
+/* Text for last sync */
+"Last sync" = "Laatste synchronisatie"
+
+/* Text for pump time */
+"Pump time" = "Pomp tijd"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "Synchroniseer pomptijd"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "Tijdsverandering gedetecteerd"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "De tijd op uw pomp wijkt af van de huidige tijd. Wilt u de tijd op uw pomp updaten naar de huidige tijd?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "De tijd op uw pomp wijkt af van de huidige tijd. De tijd van uw pomp bepaalt uw geplande therapie-instellingen. Scroll naar beneden naar de rij Pomptijd om het tijdsverschil te bekijken en uw pomp te configureren.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "Ja, synchroniseer met de huidige tijd"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "Nee, laat de pomp zoals hij is"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "Bolus";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "Temp Basaal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "Basaal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "Cv";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "Opschorten";
+
+/* Title for user options */
+"User options" = "Gebruikersopties"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "Deel Dana-pomplogboeken"
+
+/* Loading */
+"Loading" = "Bezig met laden"
+
+/* Text for save button */
+"Save" = "Redden"
+
+/* Text for 24h display */
+"24h display" = "24-uurs weergave"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "Moet de tijd worden weergegeven in 12 uur of 24 uur"
+
+/* text on */
+"On" = "Op"
+
+/* text off */
+"Off" = "Uit"
+
+/* 12h */
+"12h notation" = "12u notatie"
+
+/* 24h */
+"24h notation" = "24-uurs notatie"
+
+/* Text for Scroll function */
+"Scroll function" = "Scroll-functie"
+
+/* text for second */
+"sec" = "sec"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "Achtergrondverlichting op tijd"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "LCD-scherm op tijd"
+
+/* beepAndAlarm */
+"Alarm beeps" = "Alarm piept"
+
+/* beepAndAlarm.sound */
+"Sound" = "Geluid"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "Trillingen"
+
+/* beepAndAlarm.both */
+"Both" = "Beide"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "Pompbatterij 0%"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "Pompbatterij is leeg. Vervang het nu!"
+
+/* Alert title for pumpError */
+"Pump error" = "Pompfout"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "Controleer de pomp en probeer het opnieuw"
+
+/* Alert title for occlusion */
+"Occlusion" = "Occlusie"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "Controleer het reservoir en het infuus en probeer het opnieuw"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "Batterij bijna leeg"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "De pompbatterij moet binnenkort worden vervangen"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "Uitschakeling van de pomp"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "Er is al te lang geen interactie met de pomp geweest. Schakel deze functie in de pomp uit of communiceer met de pomp"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "Basale vergelijking"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "Bloedglucosemeting"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "Resterend insulineniveau"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "Leeg reservoir"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "Reservoir is leeg. Vervang het nu!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "Controleer chaft"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "De pomp heeft een probleem met het chaft gedetecteerd. Verwijder het reservoir, controleer alles en probeer het opnieuw"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "Basale limiet bereikt"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "Uw dagelijkse basaallimiet is bereikt. Neem contact op met uw Dana-distributeur om de limiet te verhogen"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "Daglimiet bereikt"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "Uw dagelijkse insulinelimiet is bereikt. Neem contact op met uw Dana-distributeur om de limiet te verhogen"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "Bloedglucosecontrole gemist"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "Er is een herinnering voor bloedglucosecontrole ingesteld in uw pomp en deze wordt geactiveerd. Verwijder deze of geef uw glucosewaarde aan de pomp"
+
+/* Alert title for unknown */
+"Unknown error" = "Onbekende fout"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "Er is een onbekende fout opgetreden tijdens het verwerken van de waarschuwing van de pomp. Meld dit alstublieft"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "Pompinformatie"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "Stille toon aan- of uitzetten?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "Nee, blijf zoals het is"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "Ja, stille tonen uitschakelen"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "Ja, stille tonen inschakelen"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "Stel het basaalprofiel in dat de pomp moet gebruiken. Houd er rekening mee dat het profiel in de pomp wordt overschreven, met dat in %1$@"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "Geen insuline"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "Insuline opgeschort"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "Signaalverlies"
+
+/* Text for Day unit */
+"day(s)" = "dag(en)"
+
+/* Text for cannula age */
+"Cannula age" = "Canule leeftijd"
+
+/* Text for reservoir age */
+"Reservoir age" = "Reservoir leeftijd"
diff --git a/DanaKit/Localization/pl.lproj/Localizable.strings b/DanaKit/Localization/pl.lproj/Localizable.strings
new file mode 100644
index 0000000..4b723f5
--- /dev/null
+++ b/DanaKit/Localization/pl.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "Ładowanie"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Konfiguracja Dana-i/RS"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "Wybierz swoją pompę"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "DanaRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "DanaRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "Dana-i"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "Konfigurowanie DanaRS v1"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "Podczas procesu parowania Twój DanaRS v3 wyświetli monit o parowanie, a iPhone wyświetli monit o podanie kodu parowania. Na pompie wybierz OK i wpisz kod na swoim iPhonie. Następnie Loop będzie gotowy do komunikacji z Twoim DanaRS v1"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "Przed rozpoczęciem procesu parowania zaleca się sprawdzenie i w razie potrzeby aktualizację hasła pompy. Można to zrobić przechodząc do ustawień pompy -&gt; ustawienia użytkownika -&gt; hasło. Domyślne hasło to 1234. Jeśli to jest Twoje hasło, rozważ jego zmianę"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "Hasło DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "Wpisz hasło"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "Konfigurowanie DanaRS v3"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "Podczas procesu parowania Twój DanaRS v3 wyświetli monit o parowanie, a iPhone wyświetli monit o podanie dwóch kodów parowania. Na pompie wybierz OK i wpisz dwa kody na swoim iPhonie. Następnie Loop będzie gotowy do komunikacji z Twoim DanaRS v3"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "Konfigurowanie Dana-i"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "Po ustawieniu rodzaju insuliny i szybkości bolusa pojawi się ekran ze wszystkimi znalezionymi pompami Dana. Wybierz pompę, którą chcesz połączyć z %1$@."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "Podczas procesu parowania Dana-i wyświetli monit o parowanie, a iPhone wyświetli monit o podanie kodu parowania. Na pompie wybierz OK i wpisz 6-cyfrowy kod na ekranie iPhone&#39;a. Następnie %1$@ będzie gotowy do komunikacji z Twoim Dana-i"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "BŁĄD: nie udało się sparować urządzenia"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "OK"
+
+/* Cancel button title */
+"Cancel" = "Anulować"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "Łów"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "Złączony"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "Wybierz rodzaj insuliny, której będziesz używać w tej pompie"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "Wymontuj pompę"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "Czy na pewno chcesz zaprzestać używania Dana-i/RS?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "Usuń pompę"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "Usuń pompę"
+
+/* Connection error message */
+"Error while connecting to device" = "Błąd podczas łączenia z urządzeniem"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "Znaleziono Dana-RS v3!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "Wymagany kod PIN"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "Przypnij 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "Przypnij 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "Otrzymano nieprawidłowe długości kodu PIN. Spróbuj ponownie"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "Odebrano nieprawidłowe ciągi szesnastkowe. Spróbuj ponownie"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "Suma kontrolna nie powiodła się. Spróbuj ponownie"
+
+/* Title for delivery speed */
+"Delivery speed" = "Szybkość dostawy"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 sek./U"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 sek./U"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 sek./U"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "Pompy Dana obsługują różne prędkości tłoczenia. Możesz to ustawić tutaj"
+
+/* Text for finish button */
+"Finish" = "Skończyć"
+
+/* Dana setup complete p1 */
+"Your " = "Twój "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " jest gotowy do użycia!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "Uwaga: Pompa Dana ma specjalne ustawienie, które umożliwia wyciszenie sygnałów dźwiękowych pompy Dana. Aby to umożliwić, skontaktuj się ze swoim dystrybutorem firmy Dana"
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "Nie udało się nawiązać połączenia"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "Nie udało się dostosować temp. podstawowej"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "Nie udało się wyregulować zawieszenia"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "Wygenerowanie programu podstawowego Dana nie powiodło się"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "Nie udało się dostosować bazy"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "Nie udało się ustawić czasu pompy"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "Ustawianie temp. podstawowej nie jest obecnie obsługiwane"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "Podawanie insuliny zostało wstrzymane. Akcja: nieudana"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "Akcja została anulowana, ponieważ pompa jest zajęta"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "Aktywny jest limit czasu bolusa. Cykl pętli nie może zostać ukończony, dopóki limit czasu nie będzie nieaktywny"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "Osiągnięto maksymalny limit bolusa. Spróbuj użyć niższej kwoty lub zwiększ limit"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "Osiągnięto maksymalny dzienny limit insuliny. Spróbuj użyć niższej kwoty lub zwiększ limit"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "Obsługiwany jest tylko bolus automatyczny"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "Proszę rozważyć zmianę strategii dozowania w menu ustawień"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "Wznów dostawę"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "Wstrzymaj dostawę"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "Zatrzymaj temp. podstawową"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "Typ insuliny"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "Zaplanowany podstawowy";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "Dostawa insuliny";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "Insulina\nZawieszona";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "Nieznany";
+
+/* Units for showing temp basal rate */
+"U/hr" = "U/godz";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "Pozostała insulina";
+
+/* Text for Dana pump name */
+"Pump name" = "Nazwa pompy"
+
+/* Text for hardware model */
+"Hardware model" = "Model sprzętu"
+
+/* Text for firmware version */
+"Firmware version" = "Wersja oprogramowania"
+
+/* DanaKit sync pump */
+"Sync pump data" = "Synchronizuj dane pompy"
+
+/* Text for last sync */
+"Last sync" = "Ostatnia synchronizacja"
+
+/* Text for pump time */
+"Pump time" = "Czas pompy"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "Synchronizuj czas pompy"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "Wykryto zmianę czasu"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "Czas na pompie różni się od aktualnego czasu. Czy chcesz zaktualizować godzinę na pompie do aktualnej godziny?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "Czas na pompie różni się od aktualnego czasu. Czas pracy pompy steruje ustawieniami zaplanowanej terapii. Przewiń w dół do wiersza Czas pompy, aby sprawdzić różnicę czasu i skonfigurować pompę.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "Tak, synchronizuj z bieżącym czasem"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "Nie, zachowaj pompę w niezmienionym stanie"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "Drażetka";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "Temp. Bazal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "Podstawowy";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "Wznawiać";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "Wstrzymać";
+
+/* Title for user options */
+"User options" = "Opcje użytkownika"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "Udostępnij dzienniki pompy Dana"
+
+/* Loading */
+"Loading" = "Ładowanie"
+
+/* Text for save button */
+"Save" = "Ratować"
+
+/* Text for 24h display */
+"24h display" = "Wyświetlacz 24-godzinny"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "Czy czas powinien być wyświetlany w formacie 12-godzinnym czy 24-godzinnym"
+
+/* text on */
+"On" = "NA"
+
+/* text off */
+"Off" = "Wyłączony"
+
+/* 12h */
+"12h notation" = "Notacja 12-godzinna"
+
+/* 24h */
+"24h notation" = "Notacja 24-godzinna"
+
+/* Text for Scroll function */
+"Scroll function" = "Funkcja przewijania"
+
+/* text for second */
+"sec" = "sek"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "Podświetlenie na czas"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "LCD na czas"
+
+/* beepAndAlarm */
+"Alarm beeps" = "Sygnały alarmowe"
+
+/* beepAndAlarm.sound */
+"Sound" = "Dźwięk"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "Wibracja"
+
+/* beepAndAlarm.both */
+"Both" = "Obydwa"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "Bateria pompy 0%"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "Bateria pompy jest wyczerpana. Wymień go teraz!"
+
+/* Alert title for pumpError */
+"Pump error" = "Błąd pompy"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "Sprawdź pompę i spróbuj ponownie"
+
+/* Alert title for occlusion */
+"Occlusion" = "Okluzja"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "Sprawdź zbiornik i napar i spróbuj ponownie"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "Słaby akumulator pompy"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "Bateria pompy będzie wkrótce wymagać wymiany"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "Wyłączenie pompy"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "Od dłuższego czasu nie było żadnych interakcji z pompą. Albo wyłącz tę funkcję w pompie, albo wejdź w interakcję z pompą"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "Podstawowe porównanie"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "Pomiar poziomu glukozy we krwi"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "Pozostały poziom insuliny"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "Pusty zbiornik"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "Zbiornik jest pusty. Wymień go teraz!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "Sprawdź chaft"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "Pompa wykryła problem ze swoją plewą. Proszę wyjąć zbiornik, sprawdzić wszystko i spróbować ponownie"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "Osiągnięto podstawowy limit"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "Twój dzienny limit podstawowy został osiągnięty. Aby zwiększyć limit, skontaktuj się ze swoim dystrybutorem Dana"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "Osiągnięto dzienny limit"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "Twój dzienny limit insuliny został osiągnięty. Aby zwiększyć limit, skontaktuj się ze swoim dystrybutorem Dana"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "Nieodebrane badanie poziomu glukozy we krwi"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "Przypomnienie o kontroli poziomu glukozy we krwi zostało skonfigurowane w pompie i zostało uruchomione. Proszę go wyjąć lub podać poziom glukozy do pompy"
+
+/* Alert title for unknown */
+"Unknown error" = "Nieznany błąd"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "Wystąpił nieznany błąd podczas przetwarzania alertu z pompy. Proszę to zgłosić"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "Wyciągać informacje od kogoś"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "Przełączyć cichy dźwięk?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "Nie, zachowaj tak, jak jest"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "Tak, wyłącz ciche dźwięki"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "Tak, Włącz ciche dźwięki"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "Ustaw profil podstawowy, którego powinna używać pompa. Pamiętaj, że nadpisze profil znajdujący się w pompie profilem w %1$@"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "Żadnej insuliny"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "Insulina zawieszona"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "Utrata sygnału"
+
+/* Text for Day unit */
+"day(s)" = "dni)"
+
+/* Text for cannula age */
+"Cannula age" = "Wiek kaniuli"
+
+/* Text for reservoir age */
+"Reservoir age" = "Wiek zbiornika"
diff --git a/DanaKit/Localization/pt-BR.lproj/Localizable.strings b/DanaKit/Localization/pt-BR.lproj/Localizable.strings
new file mode 100644
index 0000000..627d769
--- /dev/null
+++ b/DanaKit/Localization/pt-BR.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "carregando"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Configuração Dana-i/RS"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "Selecione sua bomba"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "DanaRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "DanaRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "Dana-eu"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "Configurando o DanaRS v1"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "Durante o processo de emparelhamento, seu DanaRS v3 mostrará um prompt de emparelhamento enquanto o seu iPhone mostrará um prompt para um código de emparelhamento. Na sua bomba, selecione OK e digite o código no seu iPhone. Depois disso, o Loop está pronto para se comunicar com o seu DanaRS v1"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "Antes de iniciar o processo de emparelhamento, recomenda-se verificar e, se necessário, atualizar a senha da bomba. Você pode fazer isso acessando as configurações da bomba -&gt; configurações do usuário -&gt; senha. A senha padrão é 1234, se esta for sua senha, considere alterá-la"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "Senha DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "Preencha a senha"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "Configurando o DanaRS v3"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "Durante o processo de emparelhamento, seu DanaRS v3 mostrará um aviso de emparelhamento enquanto o seu iPhone mostrará um aviso para dois códigos de emparelhamento. Na sua bomba, selecione OK e digite os dois códigos no seu iPhone. Depois disso, o Loop está pronto para se comunicar com o seu DanaRS v3"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "Configurando Dana-i"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "Depois de configurar o tipo de insulina e a velocidade do bolus, você verá uma tela com todas as bombas Dana encontradas. Selecione a bomba que deseja vincular a %1$@."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "Durante o processo de emparelhamento, seu Dana-i mostrará um aviso de emparelhamento enquanto o seu iPhone mostrará um aviso de código de emparelhamento. Na sua bomba, selecione OK e digite o código de 6 dígitos na tela do seu iPhone. Depois disso, %1$@ estará pronto para se comunicar com seu Dana-i"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "ERRO: Falha ao emparelhar o dispositivo"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "OK"
+
+/* Cancel button title */
+"Cancel" = "Cancelar"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "Digitalizando"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "Conectando"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "Selecione o tipo de insulina que você usará nesta bomba"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "Remover bomba"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "Tem certeza de que deseja parar de usar o Dana-i/RS?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "Excluir bomba"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "Excluir bomba"
+
+/* Connection error message */
+"Error while connecting to device" = "Erro ao conectar ao dispositivo"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "Dana-RS v3 encontrado!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "Código PIN obrigatório"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "Pino 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "Pino 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "Comprimentos de código PIN inválidos recebidos. Tente novamente"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "Strings hexadecimais inválidas recebidas. Tente novamente"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "A soma de verificação falhou. Tente novamente"
+
+/* Title for delivery speed */
+"Delivery speed" = "Velocidade de entrega"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 seg/U"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 seg/U"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 seg/U"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "As bombas Dana suportam diferentes velocidades de entrega. Você pode configurá-lo aqui"
+
+/* Text for finish button */
+"Finish" = "Terminar"
+
+/* Dana setup complete p1 */
+"Your " = "Seu "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " está pronto para ser usado!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "Nota: Sua bomba Dana possui uma configuração especial que permite silenciar os bipes da bomba Dana. Para habilitar isso, entre em contato com seu distribuidor Dana"
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "Falha ao fazer uma conexão"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "Falha ao ajustar a temperatura basal"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "Falha ao ajustar a suspensão"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "Falha ao gerar o programa basal Dana"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "Falha ao ajustar basal"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "Falha ao ajustar o tempo da bomba"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "A configuração da temperatura basal não é suportada no momento"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "A administração de insulina foi suspensa. Ação: falhou"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "A ação foi cancelada porque a bomba está ocupada"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "Um tempo limite de bolus está ativo. O ciclo de loop não pode ser concluído até que o tempo limite esteja inativo"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "O limite máximo de bolus foi atingido. Tente um valor menor ou aumente o limite"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "O limite diário máximo de insulina foi atingido. Tente um valor menor ou aumente o limite"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "Somente Bolus Automático é suportado"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "Por favor, considere alterar sua estratégia de dosagem no menu de configuração"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "Retomar entrega"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "Suspender entrega"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "Parar a temperatura basal"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "Tipo de insulina"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "Basal Programado";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "Entrega de insulina";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "Insulina\nSuspensa";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "Desconhecido";
+
+/* Units for showing temp basal rate */
+"U/hr" = "U/h";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "Insulina restante";
+
+/* Text for Dana pump name */
+"Pump name" = "Nome da bomba"
+
+/* Text for hardware model */
+"Hardware model" = "Modelo de hardware"
+
+/* Text for firmware version */
+"Firmware version" = "Versão do firmware"
+
+/* DanaKit sync pump */
+"Sync pump data" = "Sincronizar dados da bomba"
+
+/* Text for last sync */
+"Last sync" = "Última sincronização"
+
+/* Text for pump time */
+"Pump time" = "Tempo de bomba"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "Tempo de sincronização da bomba"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "Mudança de horário detectada"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "A hora na sua bomba é diferente da hora atual. Deseja atualizar a hora da sua bomba para a hora atual?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "A hora na sua bomba é diferente da hora atual. O tempo da sua bomba controla as configurações da terapia programada. Role para baixo até a linha Pump Time para revisar a diferença horária e configurar sua bomba.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "Sim, sincronizar com a hora atual"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "Não, mantenha a bomba como está"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "Bolus";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "Temperatura basal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "Basal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "Retomar";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "Suspender";
+
+/* Title for user options */
+"User options" = "Opções do usuário"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "Compartilhe registros da bomba Dana"
+
+/* Loading */
+"Loading" = "Carregando"
+
+/* Text for save button */
+"Save" = "Salvar"
+
+/* Text for 24h display */
+"24h display" = "Exibição 24h"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "A hora deve ser exibida em 12h ou 24h"
+
+/* text on */
+"On" = "Sobre"
+
+/* text off */
+"Off" = "Desligado"
+
+/* 12h */
+"12h notation" = "Notação 12h"
+
+/* 24h */
+"24h notation" = "Notação 24h"
+
+/* Text for Scroll function */
+"Scroll function" = "Função de rolagem"
+
+/* text for second */
+"sec" = "segundo"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "Luz de fundo na hora certa"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "LCD na hora certa"
+
+/* beepAndAlarm */
+"Alarm beeps" = "Bipes de alarme"
+
+/* beepAndAlarm.sound */
+"Sound" = "Som"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "Vibração"
+
+/* beepAndAlarm.both */
+"Both" = "Ambos"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "Bateria da bomba 0%"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "A bateria da bomba está vazia. Substitua-o agora!"
+
+/* Alert title for pumpError */
+"Pump error" = "Erro da bomba"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "Verifique a bomba e tente novamente"
+
+/* Alert title for occlusion */
+"Occlusion" = "Oclusão"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "Verifique o reservatório e a infusão e tente novamente"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "Bateria da bomba fraca"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "A bateria da bomba precisa ser substituída em breve"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "Desligamento da bomba"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "Não houve nenhuma interação com a bomba por muito tempo. Desative esta função na bomba ou interaja com a bomba"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "Comparação basal"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "Medição de glicose no sangue"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "Nível de insulina restante"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "Reservatório vazio"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "O reservatório está vazio. Substitua-o agora!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "Verifique o chaft"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "A bomba detectou um problema com seu chaft. Remova o reservatório, verifique tudo e tente novamente"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "Limite basal atingido"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "Seu limite basal diário foi atingido. Entre em contato com seu distribuidor Dana para aumentar o limite"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "Limite diário atingido"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "Seu limite diário de insulina foi atingido. Entre em contato com seu distribuidor Dana para aumentar o limite"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "Verificação de glicemia perdida"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "Um lembrete de verificação de glicemia foi configurado na sua bomba e é acionado. Remova-o ou forneça seu nível de glicose à bomba"
+
+/* Alert title for unknown */
+"Unknown error" = "Erro desconhecido"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "Ocorreu um erro desconhecido durante o processamento do alerta da bomba. Por favor, informe isso"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "Informações da bomba"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "Alternar tom silencioso?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "Não, mantenha como está"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "Sim, desativar tons silenciosos"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "Sim, ativar tons silenciosos"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "Defina o perfil basal que a bomba deve usar. Observe que isso irá sobrescrever o perfil que está na bomba, pelo perfil em %1$@"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "Sem insulina"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "Insulina suspensa"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "Perda de sinal"
+
+/* Text for Day unit */
+"day(s)" = "dias)"
+
+/* Text for cannula age */
+"Cannula age" = "Idade da cânula"
+
+/* Text for reservoir age */
+"Reservoir age" = "Idade do reservatório"
diff --git a/DanaKit/Localization/ro.lproj/Localizable.strings b/DanaKit/Localization/ro.lproj/Localizable.strings
new file mode 100644
index 0000000..8290b6c
--- /dev/null
+++ b/DanaKit/Localization/ro.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "Se încarcă"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Configurare Dana-i/RS"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "Selectați pompa dvs"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "DanaRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "DanaRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "Dana-i"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "Configurarea DanaRS v1"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "În timpul procesului de asociere, DanaRS v3 va afișa o solicitare de asociere, în timp ce iPhone-ul va afișa o solicitare pentru un cod de asociere. Pe pompă, selectați OK și introduceți codul pe iPhone. După aceea, Loop este gata să comunice cu DanaRS v1"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "Înainte de a începe procesul de asociere, se recomandă să verificați și, dacă este necesar, să actualizați parola pompei. Puteți face acest lucru accesând setările pompei -&gt; setări utilizator -&gt; parolă. Parola implicită este 1234, dacă aceasta este parola dvs., vă rugăm să luați în considerare schimbarea acesteia"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "Parola DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "Completați parola"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "Configurarea DanaRS v3"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "În timpul procesului de asociere, DanaRS v3 va afișa o solicitare de asociere, în timp ce iPhone-ul va afișa o solicitare pentru două coduri de asociere. Pe pompă, selectați OK și introduceți cele două coduri pe iPhone. După aceea, Loop este gata să comunice cu DanaRS v3"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "Înființarea Dana-i"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "După configurarea tipului de insulină și a vitezei bolusului, veți vedea un ecran cu toate pompele Dana găsite. Selectați pompa pe care doriți să o conectați cu %1$@."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "În timpul procesului de asociere, Dana-i va afișa o solicitare de asociere, în timp ce iPhone-ul va afișa o solicitare pentru un cod de asociere. Pe pompa, selectați OK și introduceți codul din 6 cifre pe ecranul iPhone-ului dvs. După aceea, %1$@ este gata să comunice cu Dana-i"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "EROARE: Nu s-a putut împerechea dispozitivul"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "Bine"
+
+/* Cancel button title */
+"Cancel" = "Anulare"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "Scanare"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "Conectare"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "Selectați tipul de insulină pe care îl veți folosi în această pompă"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "Scoateți pompa"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "Sigur vrei să nu mai folosești Dana-i/RS?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "Ștergeți pompa"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "Ștergeți pompa"
+
+/* Connection error message */
+"Error while connecting to device" = "Eroare la conectarea la dispozitiv"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "Dana-RS v3 găsit!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "Codul PIN este necesar"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "Pinul 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "Pinul 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "S-au primit lungimi de cod PIN nevalide. Încearcă din nou"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "S-au primit șiruri hexadecimale nevalide. Încearcă din nou"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "Suma de control a eșuat. Încearcă din nou"
+
+/* Title for delivery speed */
+"Delivery speed" = "Viteza de livrare"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 sec/U"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 sec/U"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 sec/U"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "Pompele Dana suportă diferite viteze de livrare. O poți configura aici"
+
+/* Text for finish button */
+"Finish" = "finalizarea"
+
+/* Dana setup complete p1 */
+"Your " = "Ta "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " este gata de utilizare!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "Notă: Pompa dvs. Dana are o setare specială care vă permite să opriți sunetul pompei Dana. Pentru a activa acest lucru, vă rugăm să contactați distribuitorul dvs. Dana"
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "Nu s-a putut realiza o conexiune"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "Nu s-a putut ajusta temperatura bazală"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "Suspensia nu a fost ajustată"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "Nu s-a generat programul bazal Dana"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "Nu s-a putut ajusta baza"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "Nu s-a reglat timpul pompei"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "Setarea temperaturii bazale nu este acceptată în acest moment"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "Livrarea insulinei a fost suspendată. Acțiunea eșuată"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "Acțiunea a fost anulată, deoarece pompa este ocupată"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "O perioadă de expirare a bolusului este activă. Ciclul buclei nu poate fi finalizat până când expirarea este inactivă"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "Limita maximă a bolusului este atinsă. Vă rugăm să încercați o sumă mai mică sau măriți limita"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "Limita maximă zilnică de insulină este atinsă. Vă rugăm să încercați o sumă mai mică sau măriți limita"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "Numai Bolus automat este acceptat"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "Vă rugăm să luați în considerare modificarea strategiei de dozare în meniul de setări"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "Reluați livrarea"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "Suspendați livrarea"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "Opriți temperatura bazală"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "Tipul de insulină"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "Bazal programat";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "Livrarea insulinei";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "Insulina\nSuspendat";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "Necunoscut";
+
+/* Units for showing temp basal rate */
+"U/hr" = "U/h";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "Insulină rămasă";
+
+/* Text for Dana pump name */
+"Pump name" = "Numele pompei"
+
+/* Text for hardware model */
+"Hardware model" = "Model hardware"
+
+/* Text for firmware version */
+"Firmware version" = "Versiunea softului"
+
+/* DanaKit sync pump */
+"Sync pump data" = "Sincronizați datele pompei"
+
+/* Text for last sync */
+"Last sync" = "Ultima sincronizare"
+
+/* Text for pump time */
+"Pump time" = "Timp de pompare"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "Sincronizarea timpului pompei"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "S-a detectat schimbarea orei"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "Ora de pe pompă este diferită de ora actuală. Doriți să actualizați ora de pe pompă la ora actuală?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "Ora de pe pompă este diferită de ora actuală. Timpul pompei controlează setările de terapie programate. Derulați în jos la rândul Timp pompă pentru a examina diferența de timp și a configura pompa.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "Da, sincronizați cu ora curentă"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "Nu, păstrați pompa așa cum este"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "Bolus";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "Temp Bazal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "Bazal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "Relua";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "Suspenda";
+
+/* Title for user options */
+"User options" = "Opțiuni pentru utilizator"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "Distribuiți jurnalele pompei Dana"
+
+/* Loading */
+"Loading" = "Se încarcă"
+
+/* Text for save button */
+"Save" = "Salvați"
+
+/* Text for 24h display */
+"24h display" = "display 24h"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "Timpul ar trebui să fie afișat în 12 sau 24 de ore"
+
+/* text on */
+"On" = "Pe"
+
+/* text off */
+"Off" = "Oprit"
+
+/* 12h */
+"12h notation" = "notație 12h"
+
+/* 24h */
+"24h notation" = "notație 24 de ore"
+
+/* Text for Scroll function */
+"Scroll function" = "Funcția de defilare"
+
+/* text for second */
+"sec" = "sec"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "Iluminare de fundal la timp"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "Lcd la timp"
+
+/* beepAndAlarm */
+"Alarm beeps" = "Alarma emite bipuri"
+
+/* beepAndAlarm.sound */
+"Sound" = "Sunet"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "Vibrație"
+
+/* beepAndAlarm.both */
+"Both" = "Ambii"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "Bateria pompei 0%"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "Bateria pompei este descărcată. Înlocuiește-l acum!"
+
+/* Alert title for pumpError */
+"Pump error" = "Eroare la pompă"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "Verificați pompa și încercați din nou"
+
+/* Alert title for occlusion */
+"Occlusion" = "Ocluzie"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "Verificați rezervorul și perfuzia și încercați din nou"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "Bateria pompa descarcata"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "Bateria pompei trebuie înlocuită în curând"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "Oprirea pompei"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "Nu a existat nicio interacțiune cu pompa de prea mult timp. Fie dezactivați această funcție în pompă, fie interacționați cu pompa"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "Comparare bazală"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "Măsurarea glicemiei"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "Nivelul de insulină rămas"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "Rezervor gol"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "Rezervorul este gol. Înlocuiește-l acum!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "Verificați pleava"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "Pompa a detectat o problemă cu flutura sa. Vă rugăm să scoateți rezervorul, să verificați totul și să încercați din nou"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "Limita bazală atinsă"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "Limita dvs. de bază zilnică a fost atinsă. Vă rugăm să contactați distribuitorul dvs. Dana pentru a crește limita"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "Limita zilnică atinsă"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "Limita zilnică de insulină a fost atinsă. Vă rugăm să contactați distribuitorul dvs. Dana pentru a crește limita"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "Verificarea glicemiei ratată"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "Un memento pentru verificarea glicemiei a fost configurat în pompă și este declanșat. Vă rugăm să-l scoateți sau dați nivelul de glucoză pompei"
+
+/* Alert title for unknown */
+"Unknown error" = "Eroare necunoscută"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "A apărut o eroare necunoscută în timpul procesării alertei de la pompă. Vă rugăm să raportați acest lucru"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "Informații despre pompă"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "Comutați tonul silențios?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "Nu, păstrați așa cum este"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "Da, dezactivează tonurile silențioase"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "Da, activați tonurile silențioase"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "Setați profilul de bază pe care ar trebui să-l folosească pompa. Rețineți că va suprascrie profilul care se află în pompă, cu cel din %1$@"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "Fara insulina"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "Insulina suspendată"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "Pierderea semnalului"
+
+/* Text for Day unit */
+"day(s)" = "zi(zi)"
+
+/* Text for cannula age */
+"Cannula age" = "Vârsta canulei"
+
+/* Text for reservoir age */
+"Reservoir age" = "Vârsta rezervorului"
diff --git a/DanaKit/Localization/ru.lproj/Localizable.strings b/DanaKit/Localization/ru.lproj/Localizable.strings
new file mode 100644
index 0000000..be157ca
--- /dev/null
+++ b/DanaKit/Localization/ru.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "загрузка"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Настройка Дана-и/РС"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "Выберите свой насос"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "ДанаРС-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "ДанаРС-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "Дана-и"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "Настройка DanaRS v1"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "Во время процесса сопряжения на вашем DanaRS v3 будет отображаться приглашение на сопряжение, а на iPhone — запрос на ввод кода сопряжения. На помпе выберите «ОК» и введите код на своем iPhone. После этого Loop готов к обмену данными с вашим DanaRS v1."
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "Прежде чем начать процесс сопряжения, рекомендуется проверить и при необходимости обновить пароль помпы. Сделать это можно зайдя в настройки помпы -&gt; настройки пользователя -&gt; пароль. Пароль по умолчанию — 1234. Если это ваш пароль, рассмотрите возможность его изменения."
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "Пароль ДанаРС v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "Введите пароль"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "Настройка DanaRS v3"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "Во время процесса сопряжения на вашем DanaRS v3 будет отображаться приглашение на сопряжение, а на iPhone — запрос на ввод двух кодов сопряжения. На помпе выберите «ОК» и введите два кода на своем iPhone. После этого Loop готов к обмену данными с вашим DanaRS v3."
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "Настройка Дана-и"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "После настройки типа инсулина и скорости болюса вы увидите экран со всеми найденными помпами Dana. Выберите помпу, которую хотите связать с %1$@."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "Во время процесса сопряжения на вашем Dana-i будет отображаться приглашение на сопряжение, а на вашем iPhone — запрос на ввод кода сопряжения. Во время накачки выберите «ОК» и введите 6-значный код на экране вашего iPhone. После этого %1$@ готов общаться с вашим Дана-и."
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "ОШИБКА: Не удалось выполнить сопряжение устройства."
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "ХОРОШО"
+
+/* Cancel button title */
+"Cancel" = "Отмена"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "Сканирование"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "Подключение"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "Выберите тип инсулина, который вы будете использовать в этой помпе."
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "Снять насос"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "Вы уверены, что хотите прекратить использование Dana-i/RS?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "Удалить насос"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "Удалить насос"
+
+/* Connection error message */
+"Error while connecting to device" = "Ошибка при подключении к устройству"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "Дана-RS v3 найдена!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "Требуется пин-код"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "Контакт 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "Контакт 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "Получены неверные длины PIN-кода. Попробуйте еще раз"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "Получены недопустимые шестнадцатеричные строки. Попробуйте еще раз"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "Контрольная сумма не удалась. Попробуйте еще раз"
+
+/* Title for delivery speed */
+"Delivery speed" = "Скорость доставки"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 сек/ед."
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 сек/ед."
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 сек/ед."
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "Насосы Dana поддерживают разные скорости подачи. Вы можете настроить это здесь"
+
+/* Text for finish button */
+"Finish" = "Заканчивать"
+
+/* Dana setup complete p1 */
+"Your " = "Твой "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " готов к использованию!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "Примечание. Помпа Dana имеет специальную настройку, позволяющую отключить звуковые сигналы помпы Dana. Чтобы включить эту функцию, обратитесь к своему дистрибьютору Dana."
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "Не удалось установить соединение"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "Не удалось отрегулировать базальную температуру."
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "Не удалось отрегулировать подвеску"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "Не удалось создать базальную программу Dana."
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "Не удалось отрегулировать базальный уровень"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "Не удалось отрегулировать время работы насоса."
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "Установка временной базальной дозы в настоящее время не поддерживается."
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "Введение инсулина приостановлено. Действие не выполнено"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "Действие отменено, так как насос занят"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "Тайм-аут болюса активен. Цикл цикла не может быть завершен, пока тайм-аут не станет неактивным."
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "Достигнут максимальный предел болюса. Попробуйте уменьшить сумму или увеличить лимит."
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "Достигнут максимальный дневной лимит инсулина. Попробуйте уменьшить сумму или увеличить лимит."
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "Поддерживается только автоматический болюс."
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "Пожалуйста, рассмотрите возможность изменения стратегии дозирования в меню настроек."
+
+/* Dana settings resume delivery */
+"Resume delivery" = "Возобновить доставку"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "Приостановить доставку"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "Остановить базальную температуру"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "Тип инсулина"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "Запланированный базальный";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "Доставка инсулина";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "Инсулин\nПриостановлен";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "Неизвестный";
+
+/* Units for showing temp basal rate */
+"U/hr" = "Ед/час";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "Оставшийся инсулин";
+
+/* Text for Dana pump name */
+"Pump name" = "Название насоса"
+
+/* Text for hardware model */
+"Hardware model" = "Модель оборудования"
+
+/* Text for firmware version */
+"Firmware version" = "Версия прошивки"
+
+/* DanaKit sync pump */
+"Sync pump data" = "Синхронизировать данные помпы"
+
+/* Text for last sync */
+"Last sync" = "Последняя синхронизация"
+
+/* Text for pump time */
+"Pump time" = "Время работы насоса"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "Синхронизация времени работы насоса"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "Обнаружено изменение времени"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "Время на вашей помпе отличается от текущего времени. Хотите обновить время на помпе до текущего времени?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "Время на вашей помпе отличается от текущего времени. Время работы помпы определяет настройки запланированной терапии. Прокрутите вниз до строки «Время помпы», чтобы просмотреть разницу во времени и настроить помпу.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "Да, синхронизировать с текущим временем"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "Нет, оставьте насос как есть"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "Болюс";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "Темп Базал";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "Базальный";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "Резюме";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "Приостановить";
+
+/* Title for user options */
+"User options" = "Опции пользователя"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "Поделитесь журналами помпы Dana"
+
+/* Loading */
+"Loading" = "Загрузка"
+
+/* Text for save button */
+"Save" = "Сохранять"
+
+/* Text for 24h display */
+"24h display" = "24-часовой дисплей"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "Должно ли время отображаться в 12-часовом или 24-часовом формате?"
+
+/* text on */
+"On" = "На"
+
+/* text off */
+"Off" = "Выключенный"
+
+/* 12h */
+"12h notation" = "12-часовое обозначение"
+
+/* 24h */
+"24h notation" = "24-часовое обозначение"
+
+/* Text for Scroll function */
+"Scroll function" = "Функция прокрутки"
+
+/* text for second */
+"sec" = "сек"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "Подсветка вовремя"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "ЖК вовремя"
+
+/* beepAndAlarm */
+"Alarm beeps" = "Звуковые сигналы"
+
+/* beepAndAlarm.sound */
+"Sound" = "Звук"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "Вибрация"
+
+/* beepAndAlarm.both */
+"Both" = "Оба"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "Батарея насоса 0%"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "Батарея насоса разряжена. Замените его сейчас!"
+
+/* Alert title for pumpError */
+"Pump error" = "Ошибка насоса"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "Проверьте насос и попробуйте еще раз."
+
+/* Alert title for occlusion */
+"Occlusion" = "Окклюзия"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "Проверьте резервуар и инфузию и повторите попытку."
+
+/* Alert title for lowBattery */
+"Low pump battery" = "Низкий заряд аккумулятора насоса"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "Аккумулятор помпы скоро придется заменить"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "Отключение насоса"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "Слишком долго не было никаких взаимодействий с насосом. Либо отключите эту функцию в насосе, либо взаимодействуйте с насосом."
+
+/* Alert title for basalCompare */
+"Basal Compare" = "Базальное сравнение"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "Измерение уровня глюкозы в крови"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "Оставшийся уровень инсулина"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "Пустой резервуар"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "Резервуар пуст. Замените его сейчас!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "Проверьте вал"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "Насос обнаружил проблему с валом. Пожалуйста, снимите резервуар, проверьте все и повторите попытку."
+
+/* Alert title for basalMax */
+"Basal limit reached" = "Базальный предел достигнут"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "Ваш дневной базальный предел достигнут. Пожалуйста, свяжитесь с вашим дистрибьютором Dana, чтобы увеличить лимит."
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "Достигнут дневной лимит"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "Ваш дневной лимит инсулина достигнут. Пожалуйста, свяжитесь с вашим дистрибьютором Dana, чтобы увеличить лимит."
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "Пропущенный анализ уровня глюкозы в крови"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "В помпе настроено и срабатывает напоминание о проверке уровня глюкозы в крови. Пожалуйста, удалите его или сообщите помпе свой уровень глюкозы."
+
+/* Alert title for unknown */
+"Unknown error" = "Неизвестная ошибка"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "При обработке предупреждения от помпы произошла неизвестная ошибка. Пожалуйста, сообщите об этом"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "Информация о насосе"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "Включить беззвучный тон?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "Нет, оставить как есть"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "Да, отключить беззвучные сигналы"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "Да, включить беззвучные сигналы"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "Установите базальный профиль, который должен использовать помпа. Обратите внимание, что он перезапишет профиль, находящийся в насосе, профилем в %1$@."
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "Нет инсулина"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "Инсулин суспензионный"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "Потеря сигнала"
+
+/* Text for Day unit */
+"day(s)" = "день(а)"
+
+/* Text for cannula age */
+"Cannula age" = "Возраст канюли"
+
+/* Text for reservoir age */
+"Reservoir age" = "Возраст резервуара"
diff --git a/DanaKit/Localization/sk.lproj/Localizable.strings b/DanaKit/Localization/sk.lproj/Localizable.strings
new file mode 100644
index 0000000..38902d7
--- /dev/null
+++ b/DanaKit/Localization/sk.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "načítava"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Nastavenie Dana-i/RS"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "Vyberte pumpu"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "DanaRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "DanaRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "Dana-i"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "Nastavenie DanaRS v1"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "Počas procesu párovania váš DanaRS v3 zobrazí výzvu na párovanie, zatiaľ čo váš iPhone zobrazí výzvu na zadanie párovacieho kódu. Na pumpe vyberte OK a zadajte kód na svojom iPhone. Potom je Loop pripravený komunikovať s vaším DanaRS v1"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "Pred začatím procesu párovania sa odporúča skontrolovať a v prípade potreby aktualizovať heslo pumpy. Môžete to urobiť tak, že prejdete do nastavení pumpy -&gt; používateľské nastavenia -&gt; heslo. Predvolené heslo je 1234, ak je toto vaše heslo, zvážte jeho zmenu"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "Heslo DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "Vyplňte heslo"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "Nastavenie DanaRS v3"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "Počas procesu párovania váš DanaRS v3 zobrazí výzvu na párovanie, zatiaľ čo váš iPhone zobrazí výzvu na zadanie dvoch párovacích kódov. Na pumpe vyberte OK a zadajte dva kódy na svojom iPhone. Potom je Loop pripravený komunikovať s vaším DanaRS v3"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "Nastavenie Dana-i"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "Po nastavení typu inzulínu a rýchlosti bolusu sa zobrazí obrazovka so všetkými nájdenými pumpami Dana. Vyberte pumpu, ktorú chcete prepojiť s %1$@."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "Počas procesu párovania váš Dana-i zobrazí výzvu na párovanie, zatiaľ čo váš iPhone zobrazí výzvu na zadanie párovacieho kódu. Na pumpe vyberte OK a zadajte 6-ciferný kód na obrazovke vášho iPhone. Potom je %1$@ pripravený na komunikáciu s vaším Dana-i"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "CHYBA: Zariadenie sa nepodarilo spárovať"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "OK"
+
+/* Cancel button title */
+"Cancel" = "Zrušiť"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "Skenovanie"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "Pripája sa"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "Vyberte typ inzulínu, ktorý budete v tejto pumpe používať"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "Odstráňte čerpadlo"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "Naozaj chcete prestať používať Dana-i/RS?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "Vymažte pumpu"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "Vymazať pumpu"
+
+/* Connection error message */
+"Error while connecting to device" = "Chyba pri pripájaní k zariadeniu"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "Dana-RS v3 nájdená!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "Vyžaduje sa PIN kód"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "Pin 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "Pin 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "Prijaté neplatné dĺžky kódu PIN. Skúste to znova"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "Prijaté neplatné hexadecimálne reťazce. Skúste to znova"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "Kontrolný súčet zlyhal. Skúste to znova"
+
+/* Title for delivery speed */
+"Delivery speed" = "Rýchlosť dodania"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 s/U"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 sekúnd/U"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 sekúnd/U"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "Čerpadlá Dana podporujú rôzne rýchlosti podávania. Môžete to nastaviť tu"
+
+/* Text for finish button */
+"Finish" = "Skončiť"
+
+/* Dana setup complete p1 */
+"Your " = "Váš "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " je pripravený na použitie!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "Poznámka: Vaša pumpa Dana má špeciálne nastavenie, ktoré vám umožňuje stíšiť pípanie pumpy Dana. Ak to chcete povoliť, kontaktujte svojho distribútora Dana"
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "Nepodarilo sa vytvoriť pripojenie"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "Nepodarilo sa upraviť bazálnu teplotu"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "Nepodarilo sa nastaviť odpruženie"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "Nepodarilo sa vytvoriť bazálny program Dana"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "Nepodarilo sa upraviť bazál"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "Nepodarilo sa nastaviť čas čerpadla"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "Nastavenie dočasného bazálu nie je momentálne podporované"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "Podávanie inzulínu bolo pozastavené. Akcia zlyhala"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "Akcia bola zrušená, pretože čerpadlo je zaneprázdnené"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "Je aktívny časový limit bolusu. Cyklus slučky nemožno dokončiť, kým časový limit nie je aktívny"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "Bol dosiahnutý maximálny bolusový limit. Skúste nižšiu sumu alebo zvýšte limit"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "Je dosiahnutý maximálny denný limit inzulínu. Skúste nižšiu sumu alebo zvýšte limit"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "Podporovaný je iba automatický bolus"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "Zvážte zmenu stratégie dávkovania v ponuke nastavení"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "Obnoviť doručenie"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "Pozastaviť doručenie"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "Zastavenie tempa bazálu"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "Typ inzulínu"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "Plánovaný bazál";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "Podávanie inzulínu";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "Inzulín\nSuspendovaný";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "Neznámy";
+
+/* Units for showing temp basal rate */
+"U/hr" = "U/hod";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "Zostávajúci inzulín";
+
+/* Text for Dana pump name */
+"Pump name" = "Názov čerpadla"
+
+/* Text for hardware model */
+"Hardware model" = "Hardvérový model"
+
+/* Text for firmware version */
+"Firmware version" = "Verzia firmvéru"
+
+/* DanaKit sync pump */
+"Sync pump data" = "Synchronizujte údaje pumpy"
+
+/* Text for last sync */
+"Last sync" = "Posledná synchronizácia"
+
+/* Text for pump time */
+"Pump time" = "Čas čerpania"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "Synchronizovať čas pumpy"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "Zistila sa zmena času"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "Čas na pumpe sa líši od aktuálneho času. Chcete aktualizovať čas na pumpe na aktuálny čas?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "Čas na pumpe sa líši od aktuálneho času. Čas pumpy riadi nastavenia naplánovanej terapie. Prejdite nadol na riadok Čas pumpy, aby ste si prezreli časový rozdiel a nakonfigurovali pumpu.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "Áno, synchronizovať s aktuálnym časom"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "Nie, ponechajte čerpadlo tak, ako je"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "Bolus";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "Temp Basal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "Bazálny";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "Pokračovať";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "Pozastaviť";
+
+/* Title for user options */
+"User options" = "Užívateľské možnosti"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "Zdieľajte denníky pumpy Dana"
+
+/* Loading */
+"Loading" = "Načítava"
+
+/* Text for save button */
+"Save" = "Uložiť"
+
+/* Text for 24h display */
+"24h display" = "24h displej"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "Čas by sa mal zobraziť o 12 hodín alebo 24 hodín"
+
+/* text on */
+"On" = "Zapnuté"
+
+/* text off */
+"Off" = "Vypnuté"
+
+/* 12h */
+"12h notation" = "12-hodinový zápis"
+
+/* 24h */
+"24h notation" = "24h zápis"
+
+/* Text for Scroll function */
+"Scroll function" = "Funkcia rolovania"
+
+/* text for second */
+"sec" = "sek"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "Podsvietenie na čas"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "LCD na čas"
+
+/* beepAndAlarm */
+"Alarm beeps" = "Alarm pípa"
+
+/* beepAndAlarm.sound */
+"Sound" = "Zvuk"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "Vibrácie"
+
+/* beepAndAlarm.both */
+"Both" = "Obaja"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "Batéria pumpy 0%"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "Batéria pumpy je prázdna. Vymeňte ho teraz!"
+
+/* Alert title for pumpError */
+"Pump error" = "Chyba čerpadla"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "Skontrolujte čerpadlo a skúste to znova"
+
+/* Alert title for occlusion */
+"Occlusion" = "Oklúzia"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "Skontrolujte nádržku a infúziu a skúste to znova"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "Slabá batéria pumpy"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "Čoskoro je potrebné vymeniť batériu čerpadla"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "Vypnutie čerpadla"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "Príliš dlho nedošlo k žiadnej interakcii s pumpou. Buď túto funkciu v pumpe deaktivujte, alebo interagujte s pumpou"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "Bazálne Porovnaj"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "Meranie glukózy v krvi"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "Zostávajúca hladina inzulínu"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "Prázdna nádrž"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "Zásobník je prázdny. Vymeňte ho teraz!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "Skontrolujte čeľusť"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "Čerpadlo zistilo problém s driekom. Vyberte zásobník, skontrolujte všetko a skúste to znova"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "Dosiahnutá bazálna hranica"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "Váš denný bazálny limit bol dosiahnutý. Ak chcete zvýšiť limit, kontaktujte svojho distribútora Dana"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "Dosiahnutý denný limit"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "Váš denný limit inzulínu bol dosiahnutý. Ak chcete zvýšiť limit, kontaktujte svojho distribútora Dana"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "Zmeškaná kontrola glykémie"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "Vo vašej pumpe bola nastavená a spustená pripomienka kontroly glykémie. Odstráňte ho alebo dajte pumpe hladinu glukózy"
+
+/* Alert title for unknown */
+"Unknown error" = "Neznáma chyba"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "Počas spracovania výstrahy z pumpy sa vyskytla neznáma chyba. Prosím nahláste to"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "Informácie o čerpadle"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "Prepnúť tichý tón?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "Nie, ponechať tak, ako je"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "Áno, vypnúť tiché tóny"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "Áno, Povoliť tiché tóny"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "Nastavte bazálny profil, ktorý má pumpa používať. Upozorňujeme, že prepíše profil, ktorý je v pumpe, profilom v %1$@"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "Bez inzulínu"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "Inzulín pozastavený"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "Strata signálu"
+
+/* Text for Day unit */
+"day(s)" = "dni)"
+
+/* Text for cannula age */
+"Cannula age" = "Vek kanyly"
+
+/* Text for reservoir age */
+"Reservoir age" = "Vek nádrže"
diff --git a/DanaKit/Localization/sv.lproj/Localizable.strings b/DanaKit/Localization/sv.lproj/Localizable.strings
new file mode 100644
index 0000000..622877a
--- /dev/null
+++ b/DanaKit/Localization/sv.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "läser in"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Dana-i/RS-inställningar"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "Välj din pump"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "DanaRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "DanaRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "Dana-i"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "Konfigurera DanaRS v1"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "Under ihopparningsprocessen kommer din DanaRS v3 att visa en parningsuppmaning medan din iPhone visar en uppmaning om en parningskod. Välj OK på din pump och skriv in koden på din iPhone. Efter det är Loop redo att kommunicera med din DanaRS v1"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "Innan du börjar med ihopparningsprocessen, rekommenderas det att kontrollera, och vid behov uppdatera, pumplösenordet. Du kan göra detta genom att gå till pumpinställningar -&gt; användarinställningar -&gt; lösenord. Standardlösenordet är 1234, om detta är ditt lösenord, överväg att ändra det"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "Lösenord DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "Fyll i lösenord"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "Konfigurera DanaRS v3"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "Under ihopparningsprocessen kommer din DanaRS v3 att visa en parningsuppmaning medan din iPhone visar en uppmaning om två parningskoder. På din pump, välj OK och skriv in de två koderna på din iPhone. Efter det är Loop redo att kommunicera med din DanaRS v3"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "Konfigurera Dana-i"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "Efter att ha ställt in insulintyp och bolushastighet kommer du att se en skärm med alla hittade Dana-pumpar. Välj den pump du vill länka till %1$@."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "Under ihopparningsprocessen kommer din Dana-i att visa en parningsuppmaning medan din iPhone visar en uppmaning om en parningskod. På din pump, välj OK och skriv in den 6-siffriga koden på skärmen på din iPhone. Efter det är %1$@ redo att kommunicera med din Dana-i"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "FEL: Det gick inte att koppla ihop enheten"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "OK"
+
+/* Cancel button title */
+"Cancel" = "Annullera"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "Läser in"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "Ansluter"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "Välj den typ av insulin som du ska använda i denna pump"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "Ta bort pumpen"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "Är du säker på att du vill sluta använda Dana-i/RS?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "Ta bort pumpen"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "Ta bort pump"
+
+/* Connection error message */
+"Error while connecting to device" = "Fel vid anslutning till enheten"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "Dana-RS v3 hittades!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "Pinkod krävs"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "Pin 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "Pin 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "Fick ogiltiga pinkodlängder. Försök igen"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "Mottog ogiltiga hexsträngar. Försök igen"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "Kontrollsumman misslyckades. Försök igen"
+
+/* Title for delivery speed */
+"Delivery speed" = "Leveranshastighet"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 sek/U"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 sek/U"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 sek/U"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "Dana-pumparna stöder olika leveranshastigheter. Du kan ställa in det här"
+
+/* Text for finish button */
+"Finish" = "Avsluta"
+
+/* Dana setup complete p1 */
+"Your " = "Din "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " är redo att användas!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "Obs: Din Dana-pump har en speciell inställning som låter dig tysta dina Dana-pumpspip. För att aktivera detta, kontakta din Dana-distributör"
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "Det gick inte att skapa en anslutning"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "Det gick inte att justera temp basal"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "Det gick inte att justera fjädring"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "Det gick inte att generera Dana basalprogram"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "Det gick inte att justera basal"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "Det gick inte att justera pumptiden"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "Inställning av temp basal stöds inte för närvarande"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "Insulintillförseln har avbrutits. Åtgärden misslyckades"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "Åtgärden har avbrutits eftersom pumpen är upptagen"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "En bolus timeout är aktiv. Slingcykeln kan inte slutföras förrän timeouten är inaktiv"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "Den maximala bolusgränsen har uppnåtts. Försök med ett lägre belopp eller höj gränsen"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "Den maximala dagliga insulingränsen är nådd. Försök med ett lägre belopp eller höj gränsen"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "Endast automatisk bolus stöds"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "Vänligen överväg att ändra din doseringsstrategi i inställningsmenyn"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "Återuppta leverans"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "Stäng av leveransen"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "Stoppa temp basal"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "Insulin typ"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "Schemalagd Basal";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "Insulintillförsel";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "Insulin\navstängd";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "Okänd";
+
+/* Units for showing temp basal rate */
+"U/hr" = "U/h";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "Insulin kvar";
+
+/* Text for Dana pump name */
+"Pump name" = "Pumpens namn"
+
+/* Text for hardware model */
+"Hardware model" = "Hårdvarumodell"
+
+/* Text for firmware version */
+"Firmware version" = "Firmware version"
+
+/* DanaKit sync pump */
+"Sync pump data" = "Synkronisera pumpdata"
+
+/* Text for last sync */
+"Last sync" = "Senaste synkronisering"
+
+/* Text for pump time */
+"Pump time" = "Pumptid"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "Synk pumptid"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "Tidsförändring upptäckt"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "Tiden på din pump skiljer sig från den aktuella tiden. Vill du uppdatera tiden på din pump till den aktuella tiden?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "Tiden på din pump skiljer sig från den aktuella tiden. Din pumps tid styr dina schemalagda behandlingsinställningar. Rulla ned till raden Pump Time för att se tidsskillnaden och konfigurera din pump.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "Ja, synkronisera till aktuell tid"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "Nej, behåll pumpen som den är"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "Bolus";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "Temp Basal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "Basal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "Återuppta";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "Uppskjuta";
+
+/* Title for user options */
+"User options" = "Användaralternativ"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "Dela Dana pumploggar"
+
+/* Loading */
+"Loading" = "Läser in"
+
+/* Text for save button */
+"Save" = "Spara"
+
+/* Text for 24h display */
+"24h display" = "24h display"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "Bör tiden visas om 12h eller 24h"
+
+/* text on */
+"On" = "På"
+
+/* text off */
+"Off" = "Av"
+
+/* 12h */
+"12h notation" = "12h notation"
+
+/* 24h */
+"24h notation" = "24h notation"
+
+/* Text for Scroll function */
+"Scroll function" = "Scrollfunktion"
+
+/* text for second */
+"sec" = "sek"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "Bakgrundsbelysning i tid"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "Lcd i tid"
+
+/* beepAndAlarm */
+"Alarm beeps" = "Larm piper"
+
+/* beepAndAlarm.sound */
+"Sound" = "Ljud"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "Vibration"
+
+/* beepAndAlarm.both */
+"Both" = "Både"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "Pumpbatteri 0 %"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "Pumpbatteriet är tomt. Byt ut den nu!"
+
+/* Alert title for pumpError */
+"Pump error" = "Pumpfel"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "Kontrollera pumpen och försök igen"
+
+/* Alert title for occlusion */
+"Occlusion" = "Ocklusion"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "Kontrollera behållaren och infusionen och försök igen"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "Lågt pumpbatteri"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "Pumpbatteriet måste bytas snart"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "Pump avstängning"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "Det har inte förekommit några interaktioner med pumpen för länge. Inaktivera antingen denna funktion i pumpen eller interagera med pumpen"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "Basal Jämför"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "Mät blodsocker"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "Återstående insulinnivå"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "Tom reservoar"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "Reservoaren är tom. Byt ut den nu!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "Kontrollera chaft"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "Pumpen har upptäckt ett problem med sin skaft. Ta bort behållaren, kontrollera allt och försök igen"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "Basalgränsen nådd"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "Din dagliga basalgräns har nåtts. Kontakta din Dana-distributör för att höja gränsen"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "Daglig gräns nådd"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "Din dagliga insulingräns har nåtts. Kontakta din Dana-distributör för att höja gränsen"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "Missade blodsockerkontrollen"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "En påminnelse om blodsockerkontroll har ställts in i din pump och utlöses. Ta bort den eller ge din glukosnivå till pumpen"
+
+/* Alert title for unknown */
+"Unknown error" = "Okänt fel"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "Ett okänt fel har inträffat under behandlingen av varningen från pumpen. Vänligen rapportera detta"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "Pumpinformation"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "Växla tyst ton?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "Nej, behåll som det är"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "Ja, inaktivera tysta toner"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "Ja, aktivera tysta toner"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "Ställ in basalprofilen som pumpen ska använda. Observera att den kommer att skriva över profilen som finns i pumpen, med den i %1$@"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "Inget insulin"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "Insulin suspenderat"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "Signalförlust"
+
+/* Text for Day unit */
+"day(s)" = "dag(ar)"
+
+/* Text for cannula age */
+"Cannula age" = "Kanylålder"
+
+/* Text for reservoir age */
+"Reservoir age" = "Reservoarålder"
diff --git a/DanaKit/Localization/tr.lproj/Localizable.strings b/DanaKit/Localization/tr.lproj/Localizable.strings
new file mode 100644
index 0000000..5b94a30
--- /dev/null
+++ b/DanaKit/Localization/tr.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "Yükleniyor"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Dana-i/RS Kurulumu"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "Pompanızı seçin"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "DanaRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "DanaRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "Dana-i"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "DanaRS v1&#39;i kurma"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "Eşleştirme işlemi sırasında DanaRS v3&#39;ünüz bir eşleştirme istemi görüntülerken, iPhone&#39;unuz bir eşleştirme kodu istemi gösterecektir. Pompanızda Tamam&#39;ı seçin ve iPhone&#39;unuza kodu yazın. Bundan sonra Loop, DanaRS v1&#39;inizle iletişim kurmaya hazırdır"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "Eşleştirme işlemine başlamadan önce pompa şifresinin kontrol edilmesi ve gerekirse güncellenmesi önerilir. Bunu pompa ayarları -&gt; kullanıcı ayarları -&gt; şifre seçeneğine giderek yapabilirsiniz. Varsayılan şifre 1234&#39;tür, şifreniz buysa lütfen değiştirmeyi düşünün"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "Şifre DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "Şifreyi girin"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "DanaRS v3&#39;ü kurma"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "Eşleştirme işlemi sırasında, DanaRS v3&#39;ünüz bir eşleştirme istemi gösterecek, iPhone&#39;unuz ise iki eşleştirme kodu istemi gösterecektir. Pompanızda Tamam&#39;ı seçin ve iPhone&#39;unuza iki kodu yazın. Bundan sonra Loop, DanaRS v3&#39;ünüzle iletişim kurmaya hazırdır"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "Dana-i&#39;yi kurma"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "İnsülin tipini ve bolus hızını ayarladıktan sonra bulunan tüm Dana pompalarını içeren bir ekran göreceksiniz. %1$@ ile bağlamak istediğiniz pompayı seçin."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "Eşleştirme işlemi sırasında, Dana-i&#39;niz bir eşleştirme istemi gösterecek, siz iPhone ise bir eşleştirme kodu istemi gösterecektir. Pompaladığınızda Tamam&#39;ı seçin ve iPhone&#39;unuzun ekranına 6 haneli kodu yazın. Bundan sonra %1$@, Dana-i&#39;nizle iletişim kurmaya hazırdır"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "HATA: Cihaz eşleştirilemedi"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "TAMAM"
+
+/* Cancel button title */
+"Cancel" = "İptal etmek"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "Tarama"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "Bağlanıyor"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "Bu pompada kullanacağınız insülin tipini seçin"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "Pompayı Kaldır"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "Dana-i/RS&#39;yi kullanmayı bırakmak istediğinizden emin misiniz?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "Pompayı sil"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "Pompayı Sil"
+
+/* Connection error message */
+"Error while connecting to device" = "Cihaza bağlanırken hata oluştu"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "Dana-RS v3 bulundu!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "Pin kodu gerekli"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "Pim 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "Pim 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "Geçersiz pin kodu uzunlukları alındı. Tekrar deneyin"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "Geçersiz onaltılı dizeler alındı. Tekrar deneyin"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "Sağlama toplamı başarısız oldu. Tekrar deneyin"
+
+/* Title for delivery speed */
+"Delivery speed" = "Teslimat hızı"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 sn/U"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 sn/U"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 sn/U"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "Dana pompaları farklı dağıtım hızlarını destekler. Buradan ayarlayabilirsiniz"
+
+/* Text for finish button */
+"Finish" = "Sona ermek"
+
+/* Dana setup complete p1 */
+"Your " = "Senin "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " kullanıma hazır!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "Not: Dana pompanızın, Dana pompanızın bip seslerini susturmanıza olanak tanıyan özel bir ayarı vardır. Bunu etkinleştirmek için lütfen Dana distribütörünüzle iletişime geçin."
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "Bağlantı kurulamadı"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "Geçici bazal ayarlanamadı"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "Süspansiyon ayarlanamadı"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "Dana bazal programı oluşturulamadı"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "Bazal ayarlanamadı"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "Pompa süresi ayarlanamadı"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "Geçici bazalın ayarlanması şu anda desteklenmiyor"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "İnsülin dağıtımı durduruldu. Eylem başarısız"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "Pompa meşgul olduğundan işlem iptal edildi"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "Bolus zaman aşımı etkin. Zaman aşımı etkin olmayana kadar döngü döngüsü tamamlanamaz"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "Maksimum bolus sınırına ulaşıldı. Lütfen daha düşük bir miktar deneyin veya limiti artırın"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "Maksimum günlük insülin sınırına ulaşıldı. Lütfen daha düşük bir miktar deneyin veya limiti artırın"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "Yalnızca Otomatik Bolus desteklenir"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "Lütfen ayar menüsünden dozaj stratejinizi değiştirmeyi düşünün"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "Teslimatı devam ettir"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "Teslimatı askıya al"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "Geçici bazal&#39;ı durdur"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "İnsülin Tipi"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "Planlanmış Bazal";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "İnsülin Dağıtımı";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "İnsülin\nAskıya Alındı";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "Bilinmeyen";
+
+/* Units for showing temp basal rate */
+"U/hr" = "U/saat";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "Kalan insülin";
+
+/* Text for Dana pump name */
+"Pump name" = "Pompa adı"
+
+/* Text for hardware model */
+"Hardware model" = "Donanım modeli"
+
+/* Text for firmware version */
+"Firmware version" = "Donanım yazılımı sürümü"
+
+/* DanaKit sync pump */
+"Sync pump data" = "Pompa verilerini senkronize edin"
+
+/* Text for last sync */
+"Last sync" = "Son senkronizasyon"
+
+/* Text for pump time */
+"Pump time" = "Pompa süresi"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "Pompa zamanını senkronize et"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "Zaman Değişikliği Algılandı"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "Pompanızdaki saat mevcut saatten farklı. Pompanızdaki saati geçerli saate güncellemek ister misiniz?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "Pompanızdaki saat mevcut saatten farklı. Pompanızın zamanı, planlanmış tedavi ayarlarınızı kontrol eder. Zaman farkını gözden geçirmek ve pompanızı yapılandırmak için Pompa Süresi satırına ilerleyin.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "Evet, Geçerli Saate Senkronizasyon"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "Hayır, Pompayı Olduğu Gibi Tutun"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "Bolus";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "Sıcaklık Bazal";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "Baz alınan";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "Sürdürmek";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "Askıya almak";
+
+/* Title for user options */
+"User options" = "Kullanıcı seçenekleri"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "Dana pompa günlüklerini paylaşın"
+
+/* Loading */
+"Loading" = "Yükleniyor"
+
+/* Text for save button */
+"Save" = "Kaydetmek"
+
+/* Text for 24h display */
+"24h display" = "24 saat ekran"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "Zaman 12 saat mi yoksa 24 saat mi gösterilmelidir?"
+
+/* text on */
+"On" = "Açık"
+
+/* text off */
+"Off" = "Kapalı"
+
+/* 12h */
+"12h notation" = "12 saatlik notasyon"
+
+/* 24h */
+"24h notation" = "24 saatlik gösterim"
+
+/* Text for Scroll function */
+"Scroll function" = "Kaydırma işlevi"
+
+/* text for second */
+"sec" = "saniye"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "Arka ışık zamanında"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "LCD zamanında"
+
+/* beepAndAlarm */
+"Alarm beeps" = "Alarm bip sesleri"
+
+/* beepAndAlarm.sound */
+"Sound" = "Ses"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "Titreşim"
+
+/* beepAndAlarm.both */
+"Both" = "İkisi birden"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "Pompa aküsü %0"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "Pompa aküsü boş. Şimdi değiştirin!"
+
+/* Alert title for pumpError */
+"Pump error" = "Pompa hatası"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "Pompayı kontrol edip tekrar deneyin"
+
+/* Alert title for occlusion */
+"Occlusion" = "Tıkanma"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "Rezervuarı ve infüzyonu kontrol edip tekrar deneyin"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "Düşük pompa aküsü"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "Pompa pilinin yakın zamanda değiştirilmesi gerekiyor"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "Pompa kapatma"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "Çok uzun süredir pompayla herhangi bir etkileşim olmadı. Ya pompadaki bu işlevi devre dışı bırakın ya da pompayla etkileşim kurun"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "Bazal Karşılaştırma"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "Kan Şekeri Ölçümü"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "Kalan insülin seviyesi"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "Boş rezervuar"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "Rezervuar boş. Şimdi değiştirin!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "Şaftı kontrol edin"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "Pompa, şaftında bir sorun tespit etti. Lütfen rezervuarı çıkarın, her şeyi kontrol edin ve tekrar deneyin."
+
+/* Alert title for basalMax */
+"Basal limit reached" = "Bazal sınıra ulaşıldı"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "Günlük bazal limitinize ulaşıldı. Limiti artırmak için lütfen Dana distribütörünüzle iletişime geçin"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "Günlük sınıra ulaşıldı"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "Günlük insülin sınırınıza ulaşıldı. Limiti artırmak için lütfen Dana distribütörünüzle iletişime geçin"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "Kan şekeri kontrolünün kaçırılması"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "Pompanızda bir kan şekeri kontrolü hatırlatıcısı ayarlandı ve tetiklendi. Lütfen onu çıkarın veya glikoz seviyenizi pompaya verin."
+
+/* Alert title for unknown */
+"Unknown error" = "Bilinmeyen hata"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "Pompadan gelen uyarının işlenmesi sırasında bilinmeyen bir hata oluştu. Lütfen bunu bildirin"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "Pompa bilgileri"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "Sessiz tonu değiştirilsin mi?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "Hayır, olduğu gibi kal"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "Evet, Sessiz tonları devre dışı bırak"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "Evet, Sessiz tonları etkinleştir"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "Pompanın kullanması gereken bazal profili ayarlayın. %1$@ içindeki profilin pompadaki profilin üzerine yazılacağını unutmayın."
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "İnsülin yok"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "İnsülin Askıya Alındı"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "Sinyal Kaybı"
+
+/* Text for Day unit */
+"day(s)" = "gün(ler)"
+
+/* Text for cannula age */
+"Cannula age" = "Kanül yaşı"
+
+/* Text for reservoir age */
+"Reservoir age" = "Rezervuar yaşı"
diff --git a/DanaKit/Localization/vi.lproj/Localizable.strings b/DanaKit/Localization/vi.lproj/Localizable.strings
new file mode 100644
index 0000000..82dfa95
--- /dev/null
+++ b/DanaKit/Localization/vi.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "đang tải"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Thiết lập Dana-i/RS"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "Chọn máy bơm của bạn"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "DanaRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "DanaRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "Dana-i"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "Thiết lập DanaRS v1"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "Trong quá trình ghép nối, DanaRS v3 của bạn sẽ hiển thị lời nhắc ghép nối trong khi iPhone của bạn sẽ hiển thị lời nhắc về mã ghép nối. Trên máy bơm của bạn, chọn OK và nhập mã trên iPhone của bạn. Sau đó, Loop sẵn sàng liên lạc với DanaRS v1 của bạn"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "Trước khi bắt đầu quá trình ghép nối, bạn nên kiểm tra và cập nhật mật khẩu máy bơm nếu cần. Bạn có thể thực hiện việc này bằng cách vào cài đặt máy bơm -&gt; cài đặt người dùng -&gt; mật khẩu. Mật khẩu mặc định là 1234, nếu đây là mật khẩu của bạn, vui lòng cân nhắc việc thay đổi nó"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "Mật khẩu DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "Điền mật khẩu"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "Thiết lập DanaRS v3"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "Trong quá trình ghép nối, DanaRS v3 của bạn sẽ hiển thị lời nhắc ghép nối trong khi iPhone của bạn sẽ hiển thị lời nhắc về hai mã ghép nối. Trên máy bơm của bạn, chọn OK và nhập hai mã trên iPhone của bạn. Sau đó, Loop đã sẵn sàng giao tiếp với DanaRS v3 của bạn"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "Thiết lập Dana-i"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "Sau khi thiết lập loại insulin và tốc độ truyền nhanh, bạn sẽ thấy một màn hình hiển thị tất cả các máy bơm Dana được tìm thấy. Chọn máy bơm bạn muốn liên kết với %1$@."
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "Trong quá trình ghép nối, Dana-i của bạn sẽ hiển thị lời nhắc ghép nối trong khi iPhone của bạn sẽ hiển thị lời nhắc về mã ghép nối. Khi bạn bơm, chọn OK và nhập mã gồm 6 chữ số vào màn hình trên iPhone của bạn. Sau đó, %1$@ sẵn sàng liên lạc với Dana-i của bạn"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "LỖI: Không thể ghép nối thiết bị"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "ĐƯỢC RỒI"
+
+/* Cancel button title */
+"Cancel" = "Hủy bỏ"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "Đang quét"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "Đang kết nối"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "Chọn loại insulin bạn sẽ sử dụng trong máy bơm này"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "Loại bỏ máy bơm"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "Bạn có chắc chắn muốn ngừng sử dụng Dana-i/RS không?"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "Xóa máy bơm"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "Xóa máy bơm"
+
+/* Connection error message */
+"Error while connecting to device" = "Lỗi khi kết nối với thiết bị"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "Đã tìm thấy Dana-RS v3!"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "Yêu cầu mã pin"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "Ghim 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "Chân 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "Đã nhận được độ dài mã pin không hợp lệ. Thử lại"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "Đã nhận được chuỗi hex không hợp lệ. Thử lại"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "Tổng kiểm tra không thành công. Thử lại"
+
+/* Title for delivery speed */
+"Delivery speed" = "Tốc độ giao hàng"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 giây/U"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 giây/U"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 giây/U"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "Máy bơm Dana hỗ trợ tốc độ phân phối khác nhau. Bạn có thể thiết lập nó ở đây"
+
+/* Text for finish button */
+"Finish" = "Hoàn thành"
+
+/* Dana setup complete p1 */
+"Your " = "Của bạn "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " đã sẵn sàng để được sử dụng!"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "Lưu ý: Máy bơm Dana của bạn có một cài đặt đặc biệt cho phép bạn tắt tiếng bíp của máy bơm Dana. Để kích hoạt tính năng này, vui lòng liên hệ với nhà phân phối Dana của bạn"
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "Không thể thực hiện kết nối"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "Không thể điều chỉnh nhiệt độ cơ bản"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "Không thể điều chỉnh hệ thống treo"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "Không tạo được chương trình cơ bản Dana"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "Không thể điều chỉnh cơ bản"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "Không thể điều chỉnh thời gian bơm"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "Cài đặt nhiệt độ cơ bản không được hỗ trợ tại thời điểm này"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "Việc cung cấp insulin đã bị đình chỉ. Diễn: Đã thất bại"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "Hành động đã bị hủy vì máy bơm đang bận"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "Thời gian chờ truyền nhanh đang hoạt động. Chu kỳ vòng lặp không thể hoàn thành cho đến khi hết thời gian chờ không hoạt động"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "Đã đạt đến giới hạn bolus tối đa. Vui lòng thử số tiền thấp hơn hoặc tăng giới hạn"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "Đã đạt đến giới hạn insulin tối đa hàng ngày. Vui lòng thử số tiền thấp hơn hoặc tăng giới hạn"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "Chỉ hỗ trợ Bolus tự động"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "Vui lòng xem xét việc thay đổi chiến lược dùng thuốc của bạn trong menu cài đặt"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "Tiếp tục giao hàng"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "Tạm dừng giao hàng"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "Dừng nhiệt độ cơ bản"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "Loại insulin"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "Cơ bản theo lịch trình";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "Cung cấp insulin";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "Insulin\nBị đình chỉ";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "không xác định";
+
+/* Units for showing temp basal rate */
+"U/hr" = "U/giờ";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "Insulin còn lại";
+
+/* Text for Dana pump name */
+"Pump name" = "Tên máy bơm"
+
+/* Text for hardware model */
+"Hardware model" = "Mô hình phần cứng"
+
+/* Text for firmware version */
+"Firmware version" = "Phiên bản phần mềm"
+
+/* DanaKit sync pump */
+"Sync pump data" = "Đồng bộ hóa dữ liệu máy bơm"
+
+/* Text for last sync */
+"Last sync" = "Đồng bộ hóa lần cuối"
+
+/* Text for pump time */
+"Pump time" = "Thời gian bơm"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "Đồng bộ hóa thời gian bơm"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "Đã phát hiện thay đổi thời gian"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "Thời gian trên máy bơm của bạn khác với thời gian hiện tại. Bạn có muốn cập nhật thời gian trên máy bơm của mình đến thời điểm hiện tại không?"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "Thời gian trên máy bơm của bạn khác với thời gian hiện tại. Thời gian của máy bơm sẽ kiểm soát cài đặt trị liệu theo lịch trình của bạn. Cuộn xuống hàng Thời gian bơm để xem lại chênh lệch thời gian và định cấu hình máy bơm của bạn.";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "Có, Đồng bộ hóa với thời gian hiện tại"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "Không, giữ nguyên máy bơm"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "Bolus";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "Nhiệt độ cơ bản";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "cơ bản";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "Bản tóm tắt";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "Đình chỉ";
+
+/* Title for user options */
+"User options" = "Tùy chọn người dùng"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "Chia sẻ nhật ký bơm Dana"
+
+/* Loading */
+"Loading" = "Đang tải"
+
+/* Text for save button */
+"Save" = "Cứu"
+
+/* Text for 24h display */
+"24h display" = "hiển thị 24h"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "Thời gian nên hiển thị là 12h hay 24h"
+
+/* text on */
+"On" = "TRÊN"
+
+/* text off */
+"Off" = "Tắt"
+
+/* 12h */
+"12h notation" = "ký hiệu 12h"
+
+/* 24h */
+"24h notation" = "ký hiệu 24h"
+
+/* Text for Scroll function */
+"Scroll function" = "Chức năng cuộn"
+
+/* text for second */
+"sec" = "giây"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "Đèn nền đúng giờ"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "LCD đúng giờ"
+
+/* beepAndAlarm */
+"Alarm beeps" = "Tiếng bíp báo động"
+
+/* beepAndAlarm.sound */
+"Sound" = "Âm thanh"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "Rung"
+
+/* beepAndAlarm.both */
+"Both" = "Cả hai"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "Pin máy bơm 0%"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "Pin máy bơm đã hết. Hãy thay thế nó ngay bây giờ!"
+
+/* Alert title for pumpError */
+"Pump error" = "Lỗi bơm"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "Kiểm tra máy bơm và thử lại"
+
+/* Alert title for occlusion */
+"Occlusion" = "Tắc nghẽn"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "Kiểm tra bình chứa và dịch truyền rồi thử lại"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "Pin máy bơm yếu"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "Pin máy bơm cần được thay thế sớm"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "Tắt máy bơm"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "Đã quá lâu không có bất kỳ tương tác nào với máy bơm. Tắt chức năng này trong máy bơm hoặc tương tác với máy bơm"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "So sánh cơ bản"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "Đo đường huyết"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "Mức insulin còn lại"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "hồ chứa rỗng"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "Hồ chứa trống rỗng. Hãy thay thế nó ngay bây giờ!"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "Kiểm tra trục"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "Máy bơm đã phát hiện sự cố với trục của nó. Vui lòng tháo bình chứa, kiểm tra mọi thứ và thử lại"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "Đã đạt đến giới hạn cơ bản"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "Giới hạn cơ bản hàng ngày của bạn đã đạt đến. Vui lòng liên hệ với nhà phân phối Dana của bạn để tăng giới hạn"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "Đã đạt đến giới hạn hàng ngày"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "Đã đạt đến giới hạn insulin hàng ngày của bạn. Vui lòng liên hệ với nhà phân phối Dana của bạn để tăng giới hạn"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "Kiểm tra đường huyết bị bỏ lỡ"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "Lời nhắc kiểm tra đường huyết đã được thiết lập trong máy bơm của bạn và được kích hoạt. Vui lòng loại bỏ nó hoặc đưa mức đường huyết của bạn vào máy bơm"
+
+/* Alert title for unknown */
+"Unknown error" = "Lỗi không rõ"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "Đã xảy ra lỗi không xác định trong quá trình xử lý cảnh báo từ máy bơm. Hãy báo cáo điều này"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "Thông tin máy bơm"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "Chuyển đổi âm thanh im lặng?"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "Không, giữ nguyên"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "Có, Tắt âm im lặng"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "Có, Bật âm im lặng"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "Đặt cấu hình cơ bản mà máy bơm nên sử dụng. Lưu ý rằng nó sẽ ghi đè lên cấu hình trong máy bơm, bằng cấu hình trong %1$@"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "Không có Insulin"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "Insulin bị đình chỉ"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "Mất tín hiệu"
+
+/* Text for Day unit */
+"day(s)" = "(các) ngày"
+
+/* Text for cannula age */
+"Cannula age" = "Tuổi ống thông"
+
+/* Text for reservoir age */
+"Reservoir age" = "Tuổi hồ chứa"
diff --git a/DanaKit/Localization/zh-Hans.lproj/Localizable.strings b/DanaKit/Localization/zh-Hans.lproj/Localizable.strings
new file mode 100644
index 0000000..ddfa969
--- /dev/null
+++ b/DanaKit/Localization/zh-Hans.lproj/Localizable.strings
@@ -0,0 +1,422 @@
+/* Generic loading text */
+"loading" = "加载中"
+
+/* Title for DanaKitSetupView */
+"Dana-i/RS Setup" = "Dana-i/RS 设置"
+
+/* Subtitle for DanaKitSetupView */
+"Select your pump" = "选择您的泵"
+
+/* danaRS v1 option text for DanaKitSetupView */
+"DanaRS-v1" = "DanaRS-v1"
+
+/* danaRS v3 option text for DanaKitSetupView */
+"DanaRS-v3" = "DanaRS-v3"
+
+/* dana-i option text for DanaKitSetupView */
+"Dana-i" = "达娜伊"
+
+/* Title for danars v1 explaination */
+"Setting up DanaRS v1" = "设置 DanaRS v1"
+
+/* Subtext for danars v1 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "在配对过程中，您的 DanaRS v3 将显示配对提示，而您的 iPhone 将显示配对代码提示。在您的泵上，选择“确定”，然后在您的 iPhone 上输入代码。之后，Loop 即可与您的 DanaRS v1 进行通信"
+
+/* check password text for danars v1 */
+"Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "在开始配对过程之前，建议检查泵密码，如果需要，请更新。您可以通过泵设置 -&gt; 用户设置 -&gt; 密码来执行此操作。默认密码为 1234，如果这是您的密码，请考虑更改它"
+
+/* Title for danars v1 password */
+"Password DanaRS v1" = "密码 DanaRS v1"
+
+/* password placeholder danars v1 */
+"Fill in password" = "填写密码"
+
+/* Title for danars v3 explaination */
+"Setting up DanaRS v3" = "设置 DanaRS v3"
+
+/* Subtext for danars v3 */
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "在配对过程中，您的 DanaRS v3 将显示配对提示，而您的 iPhone 将显示两个配对代码的提示。在您的泵上，选择“确定”，然后在您的 iPhone 上输入这两个代码。之后，Loop 即可与您的 DanaRS v3 进行通信"
+
+/* Title for dana-i explaination */
+"Setting up Dana-i" = "设置 Dana-i"
+
+/* General subtext for dana */
+"After setting up the insulin type and bolus speed, you will see a screen with all found Dana pumps. Select the pump you want to link with %1$@." = "设置胰岛素类型和推注速度后，您将看到一个屏幕，其中显示所有找到的 Dana 泵。选择您想要与 %1$@ 链接的泵。"
+
+/* Subtext for dana-i */
+"During the pairing process, your Dana-i will show a pairing prompt while you iPhone will show a prompt for a pairing code. On you pump, select OK and type the 6-digit code in screen on your iPhone. After that, %1$@ is ready to communicate with your Dana-i" = "在配对过程中，您的 Dana-i 将显示配对提示，而您的 iPhone 将显示配对代码提示。在您的泵上，选择“确定”，然后在您的 iPhone 屏幕上输入 6 位代码。之后，%1$@ 即可与您的 Dana-i 通信"
+
+/* Dana-i/RS invalid ble5 keys */
+"ERROR: Failed to pair device" = "错误：无法配对设备"
+
+/* Dana-i oke invalid ble5 keys */
+"OK" = "好的"
+
+/* Cancel button title */
+"Cancel" = "取消"
+
+/* Dana-i/RS connecting alert title */
+"Scanning" = "扫描"
+
+/* Dana-i/RS connecting alert title */
+"Connecting" = "正在连接"
+
+/* Title text for insulin type confirmation page */
+"Select the type of insulin that you will be using in this pump" = "选择您将在此泵中使用的胰岛素类型"
+
+/* Title for Dana-i/RS PumpManager deletion action sheet. */
+"Remove Pump" = "移除泵"
+
+/* Message for Dana-i/RS PumpManager deletion action sheet */
+"Are you sure you want to stop using Dana-i/RS?" = "您确定要停止使用 Dana-i/RS 吗？"
+
+/* Button text to confirm Dana-i/RS PumpManager deletion */
+"Delete pump" = "删除泵"
+
+/* Label for PumpManager deletion button */
+"Delete Pump" = "刪除泵"
+
+/* Connection error message */
+"Error while connecting to device" = "连接设备时出错"
+
+/* Dana-RS v3 found */
+"Dana-RS v3 found!" = "找到了 Dana-RS v3！"
+
+/* Dana-RS v3 pincode prompt body */
+"Pincode required" = "需要邮政编码"
+
+/* Dana-RS v3 pincode prompt pin 1 */
+"Pin 1" = "引脚 1"
+
+/* Dana-RS v3 pincode prompt pin 2 */
+"Pin 2" = "引脚 2"
+
+/* Dana-RS v3 pincode prompt error invalid length */
+"Received invalid pincode lengths. Try again" = "收到的邮政编码长度无效。请重试"
+
+/* Dana-RS v3 pincode prompt error invalid hex */
+"Received invalid hex strings. Try again" = "收到无效的十六进制字符串。请重试"
+
+/* Dana-RS v3 pincode prompt error checksum failed */
+"Checksum failed. Try again" = "校验失败。请重试"
+
+/* Title for delivery speed */
+"Delivery speed" = "发货速度"
+
+/* Dana bolus speed 12u per min */
+"12 sec/U" = "12 秒/单位"
+
+/* Dana bolus speed 30u per min */
+"30 sec/U" = "30 秒/小时"
+
+/* Dana bolus speed 60u per min */
+"60 sec/U" = "60 秒/小时"
+
+/* Dana delivery speed body */
+"The Dana pumps support different delivery speeds. You can set it up here" = "Dana 泵支持不同的输送速度。您可以在此处进行设置"
+
+/* Text for finish button */
+"Finish" = "结束"
+
+/* Dana setup complete p1 */
+"Your " = "你的 "
+
+/* Dana setup complete p2 */
+" is ready to be used!" = " 已可投入使用！"
+
+/* Dana setup SMB setting */
+"Note: You Dana pump has a special setting which allows you to silence your Dana pump beeps. To enable this, please contact your Dana distributor" = "注意：您的 Dana 泵具有特殊设置，可让您关闭 Dana 泵蜂鸣声。要启用此功能，请联系您的 Dana 经销商"
+
+/* Error description when no dana connected */
+"Failed to make a connection" = "连接失败"
+
+/* Error description when failed temp adjustment */
+"Failed to adjust temp basal" = "调整基础体温失败"
+
+/* Error description when failed suspension adjustment */
+"Failed to adjust suspension" = "悬架调整失败"
+
+/* Error description when failed generating basal program */
+"Failed to generate Dana basal program" = "无法生成 Dana 基础程序"
+
+/* Error description when failed basal adjustment */
+"Failed to adjust basal" = "调整基础失败"
+
+/* Error description when pump time failed to sync */
+"Failed to adjust pump time" = "泵送时间调整失败"
+
+/* Error description when trying to set temp basal */
+"Setting temp basal is not supported at this time" = "目前不支持设置温度基础"
+
+/* Error description when pump is suspended */
+"The insulin delivery has been suspend. Action failed" = "胰岛素输送已暂停。操作失败"
+
+/* Error description when pump is busy (with bolussing probably) */
+"Action has been canceled, because the pump is busy" = "由于泵正忙，操作已取消"
+
+/* Error description when pump has an active blockage */
+"A bolus timeout is active. The loop cycle cannot be completed till the timeout is inactive" = "bolus 超时处于活动状态。循环周期无法完成，直到超时处于非活动状态"
+
+/* Error description when pump has reached the bolus max */
+"The max bolus limit is reached. Please try a lower amount or increase the limit" = "已达到最大剂量限制。请尝试降低剂量或增加限制"
+
+/* Error description when pump has reached the daily max */
+"The max daily insulin limit is reached. Please try a lower amount or increase the limit" = "已达到每日胰岛素最高限量。请尝试降低剂量或增加限量"
+
+/* dana AB limitation warning title */
+"Only Automatic Bolus is supported" = "仅支持自动推注"
+
+/* dana AB limitation warning body */
+"Please consider changing your dosing strategy in the setting menu" = "请考虑在设置菜单中更改您的剂量策略"
+
+/* Dana settings resume delivery */
+"Resume delivery" = "简历投递"
+
+/* Dana settings suspend delivery */
+"Suspend delivery" = "暂停配送"
+
+/* Dana settings stop temp basal */
+"Stop temp basal" = "停止临时基础"
+
+/* Text for confidence reminders navigation link */
+"Insulin Type" = "胰岛素类型"
+
+/* Title of insulin delivery section */
+"Scheduled Basal" = "预定基础";
+
+/* Title of insulin delivery section */
+"Insulin Delivery" = "胰岛素输送";
+
+/* Text shown in insulin delivery space when insulin suspended */
+"Insulin\nSuspended" = "胰岛素\n暂停";
+
+/* Text shown in basal rate space when delivery status is unknown */
+"Unknown" = "未知";
+
+/* Units for showing temp basal rate */
+"U/hr" = "单位/小时";
+
+/* Header for insulin remaining on pod settings screen */
+"Insulin Remaining" = "胰岛素剩余量";
+
+/* Text for Dana pump name */
+"Pump name" = "泵名称"
+
+/* Text for hardware model */
+"Hardware model" = "硬件模型"
+
+/* Text for firmware version */
+"Firmware version" = "固件版本"
+
+/* DanaKit sync pump */
+"Sync pump data" = "同步泵数据"
+
+/* Text for last sync */
+"Last sync" = "上次同步"
+
+/* Text for pump time */
+"Pump time" = "泵送时间"
+
+/* Label for syncing the time on the pump */
+"Sync Pump time" = "同步泵时间"
+
+/* Alert content title for timeOffsetChangeDetected pod alert
+   Title for pod sync time action sheet.
+   title for time change detected notice */
+"Time Change Detected" = "检测到时间变化"
+
+/* Message for pod sync time action sheet */
+"The time on your pump is different from the current time. Do you want to update the time on your pump to the current time?" = "您的泵上的时间与当前时间不同。是否要将泵上的时间更新为当前时间？"
+
+/* description for time change detected notice */
+"The time on your pump is different from the current time. Your pump’s time controls your scheduled therapy settings. Scroll down to Pump Time row to review the time difference and configure your pump." = "您的泵上的时间与当前时间不同。您的泵的时间控制着您的预定治疗设置。向下滚动到“泵时间”行以查看时差并配置您的泵。";
+
+/* Button text to confirm pump time sync */
+"Yes, Sync to Current Time" = "是的，同步到当前时间"
+
+/* Button text to cancel pump time sync */
+"No, Keep Pump As Is" = "否，保持泵原样"
+
+/* Pump Event title for UnfinalizedDose with doseType of .bolus */
+"Bolus" = "丸";
+
+/* Pump Event title for UnfinalizedDose with doseType of .tempBasal */
+"Temp Basal" = "温度基础";
+
+/* Pump Event title for UnfinalizedDose with doseType of .basal */
+"Basal" = "基础";
+
+/* Pump Event title for UnfinalizedDose with doseType of .resume */
+"Resume" = "恢复";
+
+/* Pump Event title for UnfinalizedDose with doseType of .suspend */
+"Suspend" = "暂停";
+
+/* Title for user options */
+"User options" = "用户选项"
+
+/* DanaKit share logs */
+"Share Dana pump logs" = "分享 Dana 泵日志"
+
+/* Loading */
+"Loading" = "加载中"
+
+/* Text for save button */
+"Save" = "节省"
+
+/* Text for 24h display */
+"24h display" = "24小时显示"
+
+/* Description for 24h display */
+"Should time be display in 12h or 24h" = "时间应该以 12 小时制还是 24 小时制显示"
+
+/* text on */
+"On" = "在"
+
+/* text off */
+"Off" = "离开"
+
+/* 12h */
+"12h notation" = "12 小时表示法"
+
+/* 24h */
+"24h notation" = "24 小时表示法"
+
+/* Text for Scroll function */
+"Scroll function" = "滚动功能"
+
+/* text for second */
+"sec" = "秒"
+
+/* backlightOnTimeInSec */
+"Backlight on time" = "背光亮起时间"
+
+/* lcdOnTimeInSec */
+"Lcd on time" = "液晶显示时间"
+
+/* beepAndAlarm */
+"Alarm beeps" = "闹钟响起"
+
+/* beepAndAlarm.sound */
+"Sound" = "声音"
+
+/* beepAndAlarm.vibration */
+"Vibration" = "振动"
+
+/* beepAndAlarm.both */
+"Both" = "两个都"
+
+/* Alert title for batteryZeroPercent */
+"Pump battery 0%" = "泵电池电量 0%"
+
+/* Alert body for batteryZeroPercent */
+"Pump battery is empty. Replace it now!" = "泵电池已耗尽。立即更换！"
+
+/* Alert title for pumpError */
+"Pump error" = "泵错误"
+
+/* Alert body for pumpError */
+"Check the pump and try again" = "检查泵并重试"
+
+/* Alert title for occlusion */
+"Occlusion" = "遮挡"
+
+/* Alert body for occlusion */
+"Check the reservoir and infus and try again" = "检查储液器并注入，然后重试"
+
+/* Alert title for lowBattery */
+"Low pump battery" = "泵电池电量低"
+
+/* Alert body for lowBattery */
+"Pump battery needs to be replaced soon" = "泵电池很快就需要更换"
+
+/* Alert title for shutdown */
+"Pump shutdown" = "泵关闭"
+
+/* Alert body for shutdown */
+"There has not been any interactions with the pump for too long. Either disable this function in the pump or interact with the pump" = "太长时间没有与泵进行任何交互。请在泵中禁用此功能或与泵进行交互"
+
+/* Alert title for basalCompare */
+"Basal Compare" = "基础比较"
+
+/* Alert title for bloodSugarMeasure */
+"Blood glucose Measure" = "血糖测量"
+
+/* Alert title for remainingInsulinLevel */
+"Remaining insulin level" = "剩余胰岛素水平"
+
+/* Alert title for emptyReservoir */
+"Empty reservoir" = "水库空了"
+
+/* Alert body for emptyReservoir */
+"Reservoir is empty. Replace it now!" = "水箱已空。立即更换！"
+
+/* Alert title for emptyReservoir */
+"Check chaft" = "检查裂缝"
+
+/* Alert body for checkShaft */
+"The pump has detected an issue with its chaft. Please remove the reservoir, check everything and try again" = "泵检测到其轴承存在问题。请卸下储液器，检查所有部件，然后重试"
+
+/* Alert title for basalMax */
+"Basal limit reached" = "已达到基础极限"
+
+/* Alert body for basalMax */
+"Your daily basal limit has been reached. Please contact your Dana distributer to increase the limit" = "您的每日基础剂量已达到上限。请联系您的 Dana 经销商以增加上限"
+
+/* Alert title for dailyMax */
+"Daily limit reached" = "已达到每日限额"
+
+/* Alert body for basalMax */
+"Your daily insulin limit has been reached. Please contact your Dana distributer to increase the limit" = "您的每日胰岛素限量已达到。请联系您的 Dana 经销商以提高限量"
+
+/* Alert title for bloodSugarCheckMiss */
+"Missed Blood glucose check" = "错过血糖检查"
+
+/* Alert body for bloodSugarCheckMiss */
+"A blood glucose check reminder has been setup in your pump and is triggered. Please remove it or give your glucose level to the pump" = "您的泵中已设置血糖检查提醒并已触发。请将其移除或将您的血糖水平提供给泵"
+
+/* Alert title for unknown */
+"Unknown error" = "未知错误"
+
+/* Alert body for unknown */
+"An unknown error has occurred during processing the alert from the pump. Please report this" = "处理泵警报时发生未知错误。请报告此问题"
+
+/* The title of the pump information section in DanaKit settings */
+"Pump information" = "泵信息"
+
+/* Title for silent tone action sheet */
+"Toggle silent tone?" = "切换静音模式？"
+
+/* Button text to cancel silent tone */
+"No, Keep as is" = "否，保持原样"
+
+/* Button text to disable silent tone */
+"Yes, Disable silent tones" = "是的，禁用静音音"
+
+/* Button text to enable silent tone */
+"Yes, Enable silent tones" = "是的，启用静音音"
+
+/* Description for basal profile number */
+"Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "设置泵应使用的基础配置文件。请注意，它将用 %1$@ 中的配置文件覆盖泵中的配置文件"
+
+
+/* Error message for reservoir view when reservoir empty
+   Status highlight message for emptyReservoir alarm.
+   Status highlight that a pump is out of insulin. */
+"No Insulin" = "无需胰岛素"
+
+/* Status highlight that insulin delivery was suspended. */
+"Insulin Suspended" = "胰岛素暂停"
+
+/* Error message for reservoir view during general pod fault
+   Status highlight when communications with the pod haven't happened recently. */
+"Signal Loss" = "信号丢失"
+
+/* Text for Day unit */
+"day(s)" = "天）"
+
+/* Text for cannula age */
+"Cannula age" = "套管年龄"
+
+/* Text for reservoir age */
+"Reservoir age" = "储层年龄"
diff --git a/DanaKit/README.md b/DanaKit/README.md
new file mode 100644
index 0000000..8ae926f
--- /dev/null
+++ b/DanaKit/README.md
@@ -0,0 +1,13 @@
+# DanaKit
+
+Dana-I/Dana-RS Bluetooth PumpManager For Loop.
+
+Library is based on JS port: https://github.com/bastiaanv/danars-js
+
+## Status
+
+This repository contains code being tested in Loop.
+
+## For more information
+
+Please join loop zulipchat at https://loop.zulipchat.com/
